{
  "openapi": "3.0.0",
  "info": {
    "title": "Zoom Revenue Accelerator API",
    "description": "Zoom Revenue Accelerator",
    "termsOfService": "https://zoom.us/docs/en-us/zoom_api_license_and_tou.html",
    "contact": {
      "name": "Zoom Developers",
      "url": "https://developer.zoom.us/"
    },
    "version": "2"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "https://swagger.io"
  },
  "servers": [{ "url": "https://api.zoom.us/v2" }],
  "paths": {
    "/iq/settings/indicators": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get indicators settings [Deprecated]",
        "description": "Get the account's indicators settings. \n\n **Prerequisites:** \n* The account must be a paid account.\n\n**Scopes:** `account:read:admin`,`account:write:admin`,`iq_account:read:admin`\n\n**Granular Scopes:** `zra:read:indicator`,`zra:read:indicator:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "accountSettingsIndicatorsDeprecated",
        "parameters": [
          {
            "name": "category_id",
            "in": "query",
            "description": "The category id of indicators:",
            "required": false,
            "schema": { "type": "string", "example": "KYjRY564SzGoUsGFG7zTTw" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of indicators: \n* `basic` &mdash; Identify basic keyword phrases. \n* `advanced` &mdash; Identify advanced keyword phrases. \n* `guiding_sentences` &mdash; Identify guiding sentences.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "basic",
              "enum": ["basic", "advanced", "guiding_sentences"]
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Account indicators settings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "indicators": {
                          "type": "array",
                          "description": "The indicator settings.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The indicator id.",
                                "example": "9u9Sl3PBTGmAm38-7ke-Fg"
                              },
                              "name": {
                                "type": "string",
                                "description": "The indicator's name.",
                                "example": "indicator name"
                              },
                              "description": {
                                "type": "string",
                                "description": "The indicator's description.",
                                "example": "description"
                              },
                              "category_id": {
                                "type": "string",
                                "description": "The indicator's category id.",
                                "example": "KYjRY564SzGoUsGFG7zTTw"
                              },
                              "category_name": {
                                "type": "string",
                                "description": "The indicator's category name.",
                                "example": "Market-3"
                              },
                              "type": {
                                "type": "string",
                                "description": "The indicator's type.",
                                "example": "basic",
                                "enum": [
                                  "basic",
                                  "advanced",
                                  "guiding_sentences"
                                ]
                              },
                              "mentioned_by": {
                                "type": "string",
                                "description": "Identify when Mentioned by.",
                                "example": "anyone",
                                "enum": ["anyone", "reps", "prospects"]
                              },
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether the indicator is enabled.",
                                "example": true
                              },
                              "created_time": {
                                "type": "string",
                                "description": "The time at which the indicator was added.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "last_modified_time": {
                                "type": "string",
                                "description": "The time at which the indicator was last updated.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "last_modified_user_name": {
                                "type": "string",
                                "description": "User name of the user that configured the latest update.",
                                "example": "user name"
                              }
                            }
                          }
                        }
                      },
                      "description": "List indicators."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1001` <br>\n indicator setting is disable. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Category does not exist: {$categoryId}. <br>\nType does not exist: {$typeId}. <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "account:read:admin",
              "account:write:admin",
              "iq_account:read:admin",
              "zra:read:indicator",
              "zra:read:indicator:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "account:read:admin",
            "account:write:admin",
            "iq_account:read:admin"
          ],
          "x-granular-scopes": [
            "zra:read:indicator",
            "zra:read:indicator:admin"
          ]
        }
      }
    },
    "/zra/settings/indicators": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get indicators settings",
        "description": "Get the account's indicators settings. \n\n **Prerequisites:** \n* The account must be a paid account.\n\n\n\n**Scopes:** `account:read:admin`,`account:write:admin`,`iq_account:read:admin`\n\n**Granular Scopes:** `zra:read:indicator`,`zra:read:indicator:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "accountIndicatorsSettings",
        "parameters": [
          {
            "name": "category_id",
            "in": "query",
            "description": "The category id of indicators:",
            "required": false,
            "schema": { "type": "string", "example": "KYjRY564SzGoUsGFG7zTTw" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of indicators: \n* `basic` &mdash; Identify basic keyword phrases. \n* `advanced` &mdash; Identify advanced keyword phrases. \n* `guiding_sentences` &mdash; Identify guiding sentences.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "basic",
              "enum": ["basic", "advanced", "guiding_sentences"]
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Account indicators settings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "indicators": {
                          "type": "array",
                          "description": "The indicator settings.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The indicator id.",
                                "example": "9u9Sl3PBTGmAm38-7ke-Fg"
                              },
                              "name": {
                                "type": "string",
                                "description": "The indicator's name.",
                                "example": "indicator name"
                              },
                              "description": {
                                "type": "string",
                                "description": "The indicator's description.",
                                "example": "description"
                              },
                              "category_id": {
                                "type": "string",
                                "description": "The indicator's category id.",
                                "example": "KYjRY564SzGoUsGFG7zTTw"
                              },
                              "category_name": {
                                "type": "string",
                                "description": "The indicator's category name.",
                                "example": "Market-3"
                              },
                              "type": {
                                "type": "string",
                                "description": "The indicator's type.",
                                "example": "basic",
                                "enum": [
                                  "basic",
                                  "advanced",
                                  "guiding_sentences"
                                ]
                              },
                              "mentioned_by": {
                                "type": "string",
                                "description": "Identify when Mentioned by.",
                                "example": "anyone",
                                "enum": ["anyone", "reps", "prospects"]
                              },
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether the indicator is enabled.",
                                "example": true
                              },
                              "created_time": {
                                "type": "string",
                                "description": "The time at which the indicator was added.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "last_modified_time": {
                                "type": "string",
                                "description": "The time at which the indicator was last updated.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "last_modified_user_name": {
                                "type": "string",
                                "description": "User name of the user that configured the latest update.",
                                "example": "user name"
                              }
                            }
                          }
                        }
                      },
                      "description": "List indicators."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1001` <br>\n indicator setting is disable. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Category does not exist: {$categoryId}. <br>\nType does not exist: {$typeId}. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "account:read:admin",
              "account:write:admin",
              "iq_account:read:admin",
              "zra:read:indicator",
              "zra:read:indicator:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": ["IQAccountSetting:Read"],
          "x-macro-scopes": [
            "account:read:admin",
            "account:write:admin",
            "iq_account:read:admin"
          ],
          "x-granular-scopes": [
            "zra:read:indicator",
            "zra:read:indicator:admin"
          ]
        }
      }
    },
    "/iq/conversations": {
      "get": {
        "tags": ["Conversations"],
        "summary": "List conversations [Deprecated]",
        "description": "List all conversations. \n\n\n\n**Scopes:** `iq_conversation:read`,`iq_conversation:write`,`iq_conversation:read:admin`,`iq_conversation:write:admin`\n\n**Granular Scopes:** `zra:read:list_conversations`,`zra:read:list_conversations:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listConversationsDeprecated",
        "parameters": [
          {
            "name": "host_id",
            "in": "query",
            "description": "The host user ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "participant_id",
            "in": "query",
            "description": "The internal participant ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "The Zoom specific team ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "deal_id",
            "in": "query",
            "description": "The Zoom specific deal ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "period_type",
            "in": "query",
            "description": "The type of period to query: \n* `meetingStartTime` &mdash; Queries conversations with meeting_start_time in the time period between the From and To parameters. \n* `iqProcessedTime` &mdash; Queries conversations with iq_processed_time in the time period between the From and To parameters.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "meetingStartTime",
              "default": "meetingStartTime",
              "enum": ["meetingStartTime", "iqProcessedTime"]
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.",
            "required": false,
            "schema": { "type": "string", "example": "2020-05-01T19:13:02Z" }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.",
            "required": false,
            "schema": { "type": "string", "example": "2020-05-02T19:13:05Z" }
          },
          {
            "name": "conversation_type",
            "in": "query",
            "description": "The type of conversations to query: \n* `all` &mdash; All conversations. \n* `meeting` &mdash; Meeting conversations. \n* `phone` - Phone conversations.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "meeting",
              "default": "all",
              "enum": ["all", "meeting", "phone"]
            }
          },
          {
            "name": "callout_type",
            "in": "query",
            "description": "The callout type of conversations to query: \n* `engagingQuestions` &mdash; Only query conversations that include engaging questions indicator. \n* `nextSteps` &mdash; Only query conversations that include next steps indicator.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "engagingQuestions",
              "enum": ["engagingQuestions", "nextSteps"]
            }
          },
          {
            "name": "indicator_id",
            "in": "query",
            "description": "The indicator id to query.",
            "required": false,
            "schema": { "type": "string", "example": "nZ2G0anOQfGECmsb4W0hxA" }
          },
          {
            "name": "mentioned_topic_id",
            "in": "query",
            "description": "The mentioned topic id to query.",
            "required": false,
            "schema": { "type": "string", "example": "user_requirements" }
          },
          {
            "name": "scored",
            "in": "query",
            "description": "Set to `true` to return scored conversations from the conversation list.",
            "required": false,
            "schema": { "type": "boolean", "example": true }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nAll authorized conversations returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "conversations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "conversation_id": {
                                "type": "string",
                                "description": "The conversation ID.",
                                "example": "egLSRuj2SlWet+wLi87LNA==,1667893163000"
                              },
                              "host_id": {
                                "type": "string",
                                "description": "The meeting host's user ID.",
                                "example": "x1yCzABCDEfg23HiJKl4mN"
                              },
                              "meeting_id": {
                                "type": "integer",
                                "description": "The meeting ID also known as the meeting number in long (int64) format.",
                                "format": "int64",
                                "example": 896549134891
                              },
                              "meeting_uuid": {
                                "type": "string",
                                "description": "The Meeting ID. Each meeting instance generates its own meeting UUID.",
                                "example": "egLSRuj2SlWet+wLi87LNA=="
                              },
                              "deal_id": {
                                "type": "string",
                                "description": "The Zoom specific deal ID.",
                                "example": "0065g00000DgD2QAAV"
                              },
                              "topic": {
                                "type": "string",
                                "description": "The meeting topic.",
                                "example": "Maximize profits",
                                "deprecated": true
                              },
                              "conversation_topic": {
                                "type": "string",
                                "description": "The conversation topic.",
                                "example": "Maximize profits"
                              },
                              "duration": {
                                "type": "integer",
                                "description": "The recording duration in minutes.",
                                "example": 60
                              },
                              "conversation_type": {
                                "type": "string",
                                "description": "The conversation type.",
                                "example": "meeting"
                              },
                              "meeting_start_time": {
                                "type": "string",
                                "description": "The meeting start time.",
                                "example": "2022-03-23T06:00:00Z"
                              },
                              "iq_processed_time": {
                                "type": "string",
                                "description": "The time IQ was processed.",
                                "example": "2022-03-23T06:00:00Z"
                              },
                              "engagement_score": {
                                "type": "integer",
                                "description": "The engagement score.",
                                "example": 20
                              },
                              "sentiment_score": {
                                "type": "integer",
                                "description": "The sentiment score.",
                                "example": 80
                              },
                              "engaging_questions_count": {
                                "type": "integer",
                                "description": "The count of engaging questions.",
                                "example": 5
                              },
                              "next_steps_count": {
                                "type": "integer",
                                "description": "The count of next steps.",
                                "example": 5
                              },
                              "filler_words_count": {
                                "type": "integer",
                                "description": "The count of filler words per minute.",
                                "example": 5
                              },
                              "processing_analysis": {
                                "type": "boolean",
                                "description": "Whether the conversation is in processing analysis.",
                                "example": false
                              }
                            }
                          }
                        }
                      },
                      "description": "The information about the conversations."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1001` <br>\n The from or to time is invalid. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Team does not exist: {$teamId} <br>\nDeal does not exist: {$dealId} <br>\nHost or participant user does not exist: {$userId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:read",
              "iq_conversation:write",
              "iq_conversation:read:admin",
              "iq_conversation:write:admin",
              "zra:read:list_conversations",
              "zra:read:list_conversations:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": ["AllConversations:Read"],
          "x-macro-scopes": [
            "iq_conversation:read",
            "iq_conversation:write",
            "iq_conversation:read:admin",
            "iq_conversation:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:list_conversations",
            "zra:read:list_conversations:admin"
          ]
        }
      },
      "post": {
        "tags": ["Conversations"],
        "summary": "Add conversation by file id or download url. [Deprecated]",
        "description": "Add conversation by file ID or third party download URL.\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:conversation`,`zra:write:conversation:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "AddConversationByFileIdOrDownloadUrlDeprecated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["conversation_type", "meeting_start_time"],
                "type": "object",
                "properties": {
                  "host_id": {
                    "type": "string",
                    "description": "The host user ID or email address.",
                    "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                  },
                  "file_id": {
                    "type": "string",
                    "description": "The IQ file's unique ID.",
                    "example": "xBvggqyjQUal6TecwMlYwQ"
                  },
                  "download_url": {
                    "type": "string",
                    "description": "The third party download URL.",
                    "example": "https://example.com/foo.mp4"
                  },
                  "conversation_topic": {
                    "type": "string",
                    "description": "The meeting/phone topic.",
                    "example": "Maximize profits"
                  },
                  "conversation_type": {
                    "type": "string",
                    "description": "The conversation type: \n* `meeting` - Meeting conversations. \n* `phone` - Phone conversations.",
                    "example": "meeting",
                    "enum": ["meeting", "phone"]
                  },
                  "deal_id": {
                    "type": "string",
                    "description": "The Zoom deal ID.",
                    "example": "0065g00000DgD2QAAV"
                  },
                  "primary_language": {
                    "type": "string",
                    "description": "The primary language.",
                    "example": "en",
                    "enum": [
                      "en",
                      "es",
                      "fr",
                      "de",
                      "it",
                      "zh",
                      "ru",
                      "uk",
                      "ja",
                      "ko",
                      "vi",
                      "pt",
                      "nl",
                      "hi"
                    ]
                  },
                  "meeting_start_time": {
                    "type": "string",
                    "description": "The meeting start time.",
                    "example": "2022-03-23T06:00:00Z"
                  },
                  "meeting_end_time": {
                    "type": "string",
                    "description": "The meeting end time.",
                    "example": "2022-03-23T06:00:00Z"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Time zone to format time. \n\nFor a list of supported timezones and their formats, see our [timezone list](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).",
                    "example": "America/Los_Angeles"
                  },
                  "participants": {
                    "type": "array",
                    "description": "A list of the participants. up to a maximum of 200 participants. For external users, only need to pass display name.",
                    "items": {
                      "required": ["display_name"],
                      "type": "object",
                      "properties": {
                        "display_name": {
                          "type": "string",
                          "description": "The name of the participant.",
                          "example": "user name"
                        },
                        "email": {
                          "type": "string",
                          "description": "The email of the participant, if available.",
                          "example": "user@example.com"
                        }
                      }
                    }
                  },
                  "timeline": {
                    "type": "array",
                    "description": "The speech timeline, who spoke when",
                    "items": {
                      "required": ["participants", "start_time_in_recording"],
                      "type": "object",
                      "properties": {
                        "start_time_in_recording": {
                          "type": "string",
                          "description": "The start time in recording.",
                          "example": "00:00:01.910"
                        },
                        "participants": {
                          "type": "array",
                          "description": "A list of the users.For external users, only need to pass display name.",
                          "items": {
                            "required": ["display_name"],
                            "type": "object",
                            "properties": {
                              "display_name": {
                                "type": "string",
                                "description": "The name of the participant.",
                                "example": "user name"
                              },
                              "email": {
                                "type": "string",
                                "description": "The email of the participant, if available.",
                                "example": "user@example.com"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nConversation added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation_id": {
                      "type": "string",
                      "description": "The conversation ID.",
                      "example": "egLSRuj2SlWet+wLi87LNA==,1667893163000"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n File id does not exist: {$fileId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:conversation",
              "zra:write:conversation:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": [
            "zra:write:conversation",
            "zra:write:conversation:admin"
          ]
        }
      }
    },
    "/iq/conversations/{conversationId}": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation information [Deprecated]",
        "description": "Get information for a specific conversation. \n\n\n\n**Scopes:** `iq_conversation:read`,`iq_conversation:write`,`iq_conversation:read:admin`,`iq_conversation:write:admin`\n\n**Granular Scopes:** `zra:read:conversations:admin`,`zra:read:conversations`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getConversationInfoDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation_id": {
                      "type": "string",
                      "description": "The conversation ID.",
                      "example": "egLSRuj2SlWet+wLi87LNA==,1667893163000"
                    },
                    "meeting_id": {
                      "type": "integer",
                      "description": "The meeting ID also known as the meeting number in long (int64) format.",
                      "format": "int64",
                      "example": 896549134891
                    },
                    "meeting_uuid": {
                      "type": "string",
                      "description": "The meeting ID. Each meeting instance generates its own meeting UUID.",
                      "example": "egLSRuj2SlWet+wLi87LNA=="
                    },
                    "host_id": {
                      "type": "string",
                      "description": "The meeting host's user ID.",
                      "example": "x1yCzABCDEfg23HiJKl4mN"
                    },
                    "host_email": {
                      "type": "string",
                      "description": "The meeting host's email address.",
                      "format": "email",
                      "example": "jchill@example.com"
                    },
                    "topic": {
                      "type": "string",
                      "description": "The meeting topic.",
                      "example": "Maximize profits",
                      "deprecated": true
                    },
                    "conversation_topic": {
                      "type": "string",
                      "description": "The conversation topic.",
                      "example": "Maximize profits"
                    },
                    "duration": {
                      "type": "integer",
                      "description": "The recording duration in minutes.",
                      "example": 60
                    },
                    "summary": {
                      "type": "string",
                      "description": "The conversation summary.",
                      "example": "summary"
                    },
                    "conversation_type": {
                      "type": "string",
                      "description": "The conversation type.",
                      "example": "meeting"
                    },
                    "stage_during_conversation": {
                      "type": "string",
                      "description": "The stage of the deal when the conversation occurred",
                      "example": "Perception Analysis"
                    },
                    "start_time": {
                      "type": "string",
                      "description": "The meeting start time.",
                      "example": "2022-03-23T06:00:00Z",
                      "deprecated": true
                    },
                    "meeting_start_time": {
                      "type": "string",
                      "description": "The meeting start time.",
                      "example": "2022-03-23T06:00:00Z"
                    },
                    "iq_processed_time": {
                      "type": "string",
                      "description": "The time IQ processed.",
                      "example": "2022-03-23T06:00:00Z"
                    },
                    "engagement_score": {
                      "type": "integer",
                      "description": "The engagement score.",
                      "example": 20
                    },
                    "sentiment_score": {
                      "type": "integer",
                      "description": "The sentiment score.",
                      "example": 80
                    },
                    "conversation_url": {
                      "type": "string",
                      "description": "The URL for easy access to conversation detail page.",
                      "example": "https://zoom.us/iq/conversation?meetingId..."
                    },
                    "deal": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The deal ID.",
                          "example": "0065g00000DhY3eAAF"
                        },
                        "name": {
                          "type": "string",
                          "description": "The deal name.",
                          "example": "deal name"
                        },
                        "stage": {
                          "type": "string",
                          "description": "The current stage of the deal.",
                          "example": "Needs Analysis"
                        },
                        "customer_crm_account_name": {
                          "type": "string",
                          "description": "The customer CRM account name of the deal.",
                          "example": "customer"
                        },
                        "close_date": {
                          "type": "string",
                          "description": "The close date of the deal.",
                          "example": "2023-04-19"
                        }
                      },
                      "description": "The deal of the conversation."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:read",
              "iq_conversation:write",
              "iq_conversation:read:admin",
              "iq_conversation:write:admin",
              "zra:read:conversations:admin",
              "zra:read:conversations"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": ["AllConversations:Read"],
          "x-macro-scopes": [
            "iq_conversation:read",
            "iq_conversation:write",
            "iq_conversation:read:admin",
            "iq_conversation:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:conversations:admin",
            "zra:read:conversations"
          ]
        }
      },
      "delete": {
        "tags": ["Conversations"],
        "summary": "Delete conversation by conversation ID [Deprecated]",
        "description": "Delete conversation by conversation ID. \n\n\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:delete:conversations`,`zra:delete:conversations:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteConversationDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n No Content."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `300` <br>\n Invalid path parameter: {param} <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden \n\n **Error Code:** `5004` <br>\n This conversation will be available after the processing analysis is completed <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {conversationId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:delete:conversations",
              "zra:delete:conversations:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": [
            "zra:delete:conversations",
            "zra:delete:conversations:admin"
          ]
        }
      }
    },
    "/iq/conversations/{conversationId}/comments": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation comments [Deprecated]",
        "description": "Get comments for a specific conversation. \n\n\n\n**Scopes:** `iq_comment:read`,`iq_comment:write`,`iq_comment:read:admin`,`iq_comment:write:admin`\n\n**Granular Scopes:** `zra:read:list_conversation_comments`,`zra:read:list_conversation_comments:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getConversationCommentsDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation comments returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "comments": {
                          "type": "array",
                          "description": "The comments of the conversation.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The comment's ID in this conversation.",
                                "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
                              },
                              "parent_comment_id": {
                                "type": "string",
                                "description": "The parent comment's ID in this conversation.",
                                "example": "34dfg301-d32b-4850-92c7-ea9f5a40fd39"
                              },
                              "user_name": {
                                "type": "string",
                                "description": "The commenter's user name.",
                                "example": "John Deve"
                              },
                              "user_email": {
                                "type": "string",
                                "description": "The commenter's email address.",
                                "example": "user@example.com"
                              },
                              "created_time": {
                                "type": "string",
                                "description": "The time at which the comment was added.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "last_modified_time": {
                                "type": "string",
                                "description": "The time at which the comment was last updated.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "comment": {
                                "type": "string",
                                "description": "The actual comment.",
                                "example": "Nicely done!"
                              },
                              "mention_users": {
                                "type": "array",
                                "description": "The list of the users mentioned in the comment",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": "string",
                                      "description": "The mentioned user's ID.",
                                      "example": "hjficvXtR42vjSABCCS32Q"
                                    },
                                    "user_name": {
                                      "type": "string",
                                      "description": "The mentioned user's name.",
                                      "example": "John Smith"
                                    }
                                  }
                                }
                              },
                              "mention_teams": {
                                "type": "array",
                                "description": "The list of teams mentioned in the comment",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "team_id": {
                                      "type": "string",
                                      "description": "The mentioned team's ID.",
                                      "example": "hjficvXtR42vjSABCCS32Q"
                                    },
                                    "team_name": {
                                      "type": "string",
                                      "description": "The mentioned team's name.",
                                      "example": "John's team"
                                    }
                                  }
                                }
                              },
                              "is_private": {
                                "type": "boolean",
                                "description": "Determine whether comment is public or private.",
                                "example": false
                              },
                              "time_in_recording": {
                                "type": "string",
                                "description": "The time in recording which the player should advance.",
                                "example": "00:00:10"
                              }
                            }
                          }
                        }
                      },
                      "description": "The comments of the conversation."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_comment:read",
              "iq_comment:write",
              "iq_comment:read:admin",
              "iq_comment:write:admin",
              "zra:read:list_conversation_comments",
              "zra:read:list_conversation_comments:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_comment:read",
            "iq_comment:write",
            "iq_comment:read:admin",
            "iq_comment:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:list_conversation_comments",
            "zra:read:list_conversation_comments:admin"
          ]
        }
      },
      "post": {
        "tags": ["Conversations"],
        "summary": "Add new comments to the conversation [Deprecated]",
        "description": "Add new comments to a specific conversation. \n\n\n\n**Scopes:** `iq_comment:write`,`iq_comment:write:admin`\n\n**Granular Scopes:** `zra:write:conversation_comment`,`zra:write:conversation_comment:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "addConversationCommentDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["comment"],
                "type": "object",
                "properties": {
                  "parent_comment_id": {
                    "type": "string",
                    "description": "The parent comment's ID in this conversation.",
                    "example": "34dfg301-d32b-4850-92c7-ea9f5a40fd39"
                  },
                  "comment": {
                    "type": "string",
                    "description": "The actual comment.",
                    "example": "Nicely done!"
                  },
                  "mention_user_ids": {
                    "type": "array",
                    "description": "The list of the users mentioned in the comment",
                    "items": {
                      "type": "string",
                      "description": "The mentioned user's ID.",
                      "example": "hjficvXtR42vjSABCCS32Q"
                    }
                  },
                  "mention_team_ids": {
                    "type": "array",
                    "description": "The list of teams mentioned in the comment",
                    "items": {
                      "type": "string",
                      "description": "The mentioned team's ID.",
                      "example": "hjficvXtR42vjSABCCS32Q"
                    }
                  },
                  "is_private": {
                    "type": "boolean",
                    "description": "Determine whether comment is public or private.",
                    "example": false
                  },
                  "time_in_recording": {
                    "type": "string",
                    "description": "The time in recording which the player should advance.",
                    "example": "00:00:10"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nSuccessfully added comment to conversation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The comment's ID in this conversation.",
                      "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
                    },
                    "parent_comment_id": {
                      "type": "string",
                      "description": "The parent comment's ID in this conversation.",
                      "example": "34dfg301-d32b-4850-92c7-ea9f5a40fd39"
                    },
                    "user_name": {
                      "type": "string",
                      "description": "The commenter's user name.",
                      "example": "John Deve"
                    },
                    "user_email": {
                      "type": "string",
                      "description": "The commenter's email address.",
                      "example": "user@example.com"
                    },
                    "created_time": {
                      "type": "string",
                      "description": "The time at which the comment was added.",
                      "format": "date-time",
                      "example": "2022-03-22T05:59:09Z"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The time at which the comment was last updated.",
                      "format": "date-time",
                      "example": "2022-03-22T05:59:09Z"
                    },
                    "comment": {
                      "type": "string",
                      "description": "The actual comment.",
                      "example": "Nicely done!"
                    },
                    "mention_users": {
                      "type": "array",
                      "description": "The list of the users mentioned in the comment",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The mentioned user's ID.",
                            "example": "hjficvXtR42vjSABCCS32Q"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "The mentioned user's name.",
                            "example": "John Smith"
                          }
                        }
                      }
                    },
                    "mention_teams": {
                      "type": "array",
                      "description": "The list of teams mentioned in the comment",
                      "items": {
                        "type": "object",
                        "properties": {
                          "team_id": {
                            "type": "string",
                            "description": "The mentioned team's ID.",
                            "example": "hjficvXtR42vjSABCCS32Q"
                          },
                          "team_name": {
                            "type": "string",
                            "description": "The mentioned team's name.",
                            "example": "John's team"
                          }
                        }
                      }
                    },
                    "is_private": {
                      "type": "boolean",
                      "description": "Determine whether comment is public or private.",
                      "example": false
                    },
                    "time_in_recording": {
                      "type": "string",
                      "description": "The time in recording which the player should advance.",
                      "example": "00:00:10"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_comment:write",
              "iq_comment:write:admin",
              "zra:write:conversation_comment",
              "zra:write:conversation_comment:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_comment:write", "iq_comment:write:admin"],
          "x-granular-scopes": [
            "zra:write:conversation_comment",
            "zra:write:conversation_comment:admin"
          ]
        }
      }
    },
    "/iq/conversations/{conversationId}/comments/{commentId}": {
      "delete": {
        "tags": ["Conversations"],
        "summary": "Delete conversation's comment [Deprecated]",
        "description": "Delete comment from a specific conversation. \n\n**Scopes:** `iq_comment:write`,`iq_comment:write:admin`\n\n**Granular Scopes:** `zra:delete:conversation_comment`,`zra:delete:conversation_comment:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "deleteConversationCommentDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n No Content."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {conversationId} <br>\nComment does not exist: {commentId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_comment:write",
              "iq_comment:write:admin",
              "zra:delete:conversation_comment",
              "zra:delete:conversation_comment:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_comment:write", "iq_comment:write:admin"],
          "x-granular-scopes": [
            "zra:delete:conversation_comment",
            "zra:delete:conversation_comment:admin"
          ]
        }
      },
      "patch": {
        "tags": ["Conversations"],
        "summary": "Edit conversation comment [Deprecated]",
        "description": "Edit a comment for a specific conversation. \n\n\n\n**Scopes:** `iq_comment:write`,`iq_comment:write:admin`\n\n**Granular Scopes:** `zra:update:conversation_comment`,`zra:update:conversation_comment:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "editConversationCommentDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "The actual comment.",
                    "example": "Nicely done!"
                  },
                  "mention_user_ids": {
                    "type": "array",
                    "description": "The list of the users mentioned in the comment",
                    "items": {
                      "type": "string",
                      "description": "The mentioned user's ID.",
                      "example": "hjficvXtR42vjSABCCS32Q"
                    }
                  },
                  "mention_team_ids": {
                    "type": "array",
                    "description": "The list of teams mentioned in the comment",
                    "items": {
                      "type": "string",
                      "description": "The mentioned team's ID.",
                      "example": "hjficvXtR42vjSABCCS32Q"
                    }
                  },
                  "time_in_recording": {
                    "type": "string",
                    "description": "The time in recording which the player should advance.",
                    "example": "00:00:10"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n No Content."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {conversationId} <br>\nComment does not exist: {commentId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_comment:write",
              "iq_comment:write:admin",
              "zra:update:conversation_comment",
              "zra:update:conversation_comment:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_comment:write", "iq_comment:write:admin"],
          "x-granular-scopes": [
            "zra:update:conversation_comment",
            "zra:update:conversation_comment:admin"
          ]
        }
      }
    },
    "/iq/conversations/{conversationId}/content_analysis": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation content analysis [Deprecated]",
        "description": "Get the content analysis for a specific conversation. \n\n\n\n**Scopes:** `iq_conversation:read`,`iq_conversation:write`,`iq_conversation:read:admin`,`iq_conversation:write:admin`\n\n**Granular Scopes:** `zra:read:conversation_analysis`,`zra:read:conversation_analysis:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getConversationContentAnalysisDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "analysis_type",
            "in": "query",
            "description": "The content analysis type of conversations to query: \n* `topics` - Topics analysis. \n* `nextSteps` - Next steps analysis. \n* `engagingQuestions` - Engaging questions analysis. \n* `indicators` - Indicators analysis. \n* `smartChapters` - Smart Chapters analysis.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "engagingQuestions",
              "enum": [
                "topics",
                "nextSteps",
                "engagingQuestions",
                "indicators",
                "smartChapters"
              ]
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "summary": {
                          "type": "string",
                          "description": "The overall conversation summary. Only returned when the `analysis_type` is `smartChapters`",
                          "example": "overall summary"
                        },
                        "smart_chapters": {
                          "type": "array",
                          "description": "The smart chapters. Only returned when `analysis_type` is `smartChapters`.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "The chapter title.",
                                "example": "chapter title"
                              },
                              "summary": {
                                "type": "string",
                                "description": "The chapter summary.",
                                "example": "chapter summary."
                              },
                              "category": {
                                "type": "string",
                                "description": "The chapter category.",
                                "example": "chapter category"
                              },
                              "start_time": {
                                "type": "string",
                                "description": "The chapter start time.",
                                "example": "2022-03-23T06:00:00Z"
                              },
                              "end_time": {
                                "type": "string",
                                "description": "The chapter end time.",
                                "example": "2022-03-23T06:05:00Z"
                              }
                            }
                          }
                        },
                        "analysis": {
                          "type": "array",
                          "description": "The analysis results.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "section": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": "string",
                                      "description": "The ID of the user. If the participant joins the meeting without logging in or is external user, the value of this field will be blank.",
                                      "example": "hjficvXtR42vjSABCCS32Q"
                                    },
                                    "display_name": {
                                      "type": "string",
                                      "description": "The name of the user.",
                                      "example": "user name"
                                    },
                                    "text": {
                                      "type": "string",
                                      "description": "The text content.",
                                      "example": "text"
                                    },
                                    "utterance": {
                                      "type": "string",
                                      "description": "The text's complete utterance.",
                                      "example": "next steps"
                                    },
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the topic.",
                                      "example": "pricing"
                                    },
                                    "indicator_name": {
                                      "type": "string",
                                      "description": "The indicator's name.",
                                      "example": "Johnny Dev"
                                    },
                                    "indicator_id": {
                                      "type": "string",
                                      "description": "The indicator ID.",
                                      "example": "INTrFEESRUqrdTXgKUIHnw"
                                    },
                                    "key_word": {
                                      "type": "string",
                                      "description": "The keyword define in indicator.",
                                      "example": "keyword"
                                    },
                                    "marked_by": {
                                      "type": "string",
                                      "description": "The one who marked the content. \n* `nlp` &mdash; Marked by NLP. \n* `es` &mdash; Marked by ES. \n* `user_id` - Manually marked by the user with this user ID.",
                                      "example": "nlp",
                                      "enum": [
                                        "nlp",
                                        "es",
                                        "the value of the user_id"
                                      ]
                                    },
                                    "start_time": {
                                      "type": "string",
                                      "description": "The indicator start time.",
                                      "example": "2022-03-23T06:00:00Z"
                                    },
                                    "end_time": {
                                      "type": "string",
                                      "description": "The indicator end time.",
                                      "example": "2022-03-23T06:00:00Z"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "description": "The content analysis of the conversation."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:read",
              "iq_conversation:write",
              "iq_conversation:read:admin",
              "iq_conversation:write:admin",
              "zra:read:conversation_analysis",
              "zra:read:conversation_analysis:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:read",
            "iq_conversation:write",
            "iq_conversation:read:admin",
            "iq_conversation:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:conversation_analysis",
            "zra:read:conversation_analysis:admin"
          ]
        }
      }
    },
    "/iq/conversations/{conversationId}/interactions": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation interactions [Deprecated]",
        "description": "Get interactions for a specific conversation. \n\n\n\n**Scopes:** `iq_conversation:read`,`iq_conversation:write`,`iq_conversation:read:admin`,`iq_conversation:write:admin`\n\n**Granular Scopes:** `zra:read:conversation_participants`,`zra:read:conversation_participants:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getConversationInteractionsDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "participants": {
                          "type": "array",
                          "description": "The speakers in the conversation.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "user_id": {
                                "type": "string",
                                "description": "The speaker's user ID. If the participant joins the meeting without logging in or is external user, the value of this field will be blank.",
                                "example": "hjficvXtR42vjSABCCS32Q"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The speaker's user name.",
                                "example": "John Deve"
                              },
                              "email": {
                                "type": "string",
                                "description": "The speaker's email address. If the participant joins the meeting without logging in or is external user, the value of this field will be blank.",
                                "example": "user@example.com"
                              },
                              "speaker_type": {
                                "type": "string",
                                "description": "The type of the speaker.",
                                "example": "rep",
                                "enum": ["rep", "customer"]
                              },
                              "transcripts": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "item_id": {
                                      "type": "string",
                                      "description": "The item ID.",
                                      "example": "0"
                                    },
                                    "text": {
                                      "type": "string",
                                      "description": "The speech in text.",
                                      "example": "speak text."
                                    },
                                    "start_time": {
                                      "type": "string",
                                      "description": "The speak item start time.",
                                      "example": "2022-03-23T06:00:00Z"
                                    },
                                    "end_time": {
                                      "type": "string",
                                      "description": "The speak item end time.",
                                      "example": "2022-03-23T06:02:00Z"
                                    }
                                  }
                                }
                              },
                              "metrics": {
                                "type": "object",
                                "properties": {
                                  "talk_to_listen_ratio": {
                                    "type": "number",
                                    "description": "The talk-to-listen ratio.",
                                    "example": 1
                                  },
                                  "longest_monolog": {
                                    "type": "number",
                                    "description": "The longest monologue in seconds.",
                                    "example": 10
                                  },
                                  "talk_speed": {
                                    "type": "number",
                                    "description": "The talk speed in words per minute.",
                                    "example": 10
                                  },
                                  "filler_words": {
                                    "type": "number",
                                    "description": "The count of filler words. Unit: words/min.",
                                    "example": 10
                                  },
                                  "patience": {
                                    "type": "number",
                                    "description": "The patience in seconds.",
                                    "example": 10
                                  }
                                },
                                "description": "The metrics for the conversation."
                              }
                            }
                          }
                        }
                      },
                      "description": "The interactions of the conversation."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:read",
              "iq_conversation:write",
              "iq_conversation:read:admin",
              "iq_conversation:write:admin",
              "zra:read:conversation_participants",
              "zra:read:conversation_participants:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:read",
            "iq_conversation:write",
            "iq_conversation:read:admin",
            "iq_conversation:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:conversation_participants",
            "zra:read:conversation_participants:admin"
          ]
        }
      }
    },
    "/iq/conversations/{conversationId}/scorecards": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation scorecards [Deprecated]",
        "description": "Get scorecards for a specific conversation. \n\n\n\n**Scopes:** `iq_coaching:read:admin`,`iq_coaching:read`\n\n**Granular Scopes:** `zra:read:conversation_scorecards`,`zra:read:conversation_scorecards:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getConversationScorecardsDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation scorecards returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "scorecards": {
                          "type": "array",
                          "description": "The scorecards of the conversation.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "scorecard_id": {
                                "type": "string",
                                "description": "The scorecard's ID.",
                                "example": "xMCKjazFS9GtJRhGdcLhcQ"
                              },
                              "scorecard_name": {
                                "type": "string",
                                "description": "The scorecard's name.",
                                "example": "Learning experience scoring"
                              },
                              "scorecard_description": {
                                "type": "string",
                                "description": "The scorecard's description.",
                                "example": "Rate your learning experience for this conversation"
                              },
                              "average_score": {
                                "type": "number",
                                "description": "The average score for this scorecard.",
                                "example": 10
                              },
                              "rate_time": {
                                "type": "string",
                                "description": "The time at which the scorecard was rated.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "rater": {
                                "type": "object",
                                "properties": {
                                  "email": {
                                    "type": "string",
                                    "description": "Email address of person who rates the scorecard.",
                                    "example": "dummyname@gmail.com"
                                  },
                                  "display_name": {
                                    "type": "string",
                                    "description": "Name of the person who rates the scorecard.",
                                    "example": "dummy name"
                                  },
                                  "user_id": {
                                    "type": "string",
                                    "description": "The unique identifier for the user.",
                                    "example": "6dfgdfgdg444447b0egga"
                                  }
                                },
                                "description": "User information of the person who rates this scorecard."
                              },
                              "scorecard_questions": {
                                "type": "array",
                                "description": "Questions in the scorecard",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "question_id": {
                                      "type": "string",
                                      "description": "The question's ID.",
                                      "example": "lasiSUvrSvG1rcqFCs4gtg"
                                    },
                                    "question_title": {
                                      "type": "string",
                                      "description": "The question title",
                                      "example": "Question 1"
                                    },
                                    "score": {
                                      "type": "number",
                                      "description": "The user's score for the question.",
                                      "example": 8
                                    },
                                    "question_description": {
                                      "type": "string",
                                      "description": "The question's description.",
                                      "example": "How is this video quality for the conversation?"
                                    },
                                    "question_comment": {
                                      "type": "string",
                                      "description": "The question's comment.",
                                      "example": "This question is great."
                                    },
                                    "scale": {
                                      "type": "object",
                                      "properties": {
                                        "min_score_label": {
                                          "type": "string",
                                          "description": "The lowest score.",
                                          "example": "Very strongly disagree."
                                        },
                                        "max_score_label": {
                                          "type": "string",
                                          "description": "The highest score.",
                                          "example": "Very strongly agree."
                                        }
                                      },
                                      "description": "The scale information for this question."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "description": "The scorecards of the conversation."
                    },
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_coaching:read:admin",
              "iq_coaching:read",
              "zra:read:conversation_scorecards",
              "zra:read:conversation_scorecards:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_coaching:read:admin", "iq_coaching:read"],
          "x-granular-scopes": [
            "zra:read:conversation_scorecards",
            "zra:read:conversation_scorecards:admin"
          ]
        }
      }
    },
    "/iq/conversations/{conversationId}/update_host": {
      "patch": {
        "tags": ["Conversations"],
        "summary": "Update conversation host id to new host id by conversation id [Deprecated]",
        "description": "Update the conversation host id.\r\n\r\n**Prerequisite**: \r\nYou must have either `iq_conversation:write:admin` or `iq_conversation:write` permissions.\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:update:conversation_host`,`zra:update:conversation_host:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "UpdateconversationhostidtonewhostidbyconversationidDeprecated",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_host_id": {
                    "type": "string",
                    "description": "The user ID or email address of the host.",
                    "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`    Conversation updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1006` <br>\n User has no IQ license. <br>\n**Error Code:** `300` <br>\n Missing field: {field} <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n User does not exist.<br> <br>\n**Error Code:** `2001` <br>\n Conversation does not exist: {conversationId}.<br> <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:update:conversation_host",
              "zra:update:conversation_host:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": [
            "zra:update:conversation_host",
            "zra:update:conversation_host:admin"
          ]
        }
      }
    },
    "/iq/files": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Upload IQ file [Deprecated]",
        "description": "Upload a file to Zoom Revenue Acclerator. \n\n **Prerequisite:**  \n The caller must be a Zoom Revenue Acclerator-licensed user.\n\n **Note:**  \n* Base URL: `https://fileapi.zoom.us/v2/`.  \n* Rate limit: 20 requests per second per user or 2000 requests per second per IP address. \n* The caller must support HTTP 30x redirects. \n* The caller must retain the Authorization header when redirected to a different hostname. \n\n* Supported video formats: `.mov`, `.mp4`, `.avi`, `.wmv` or `H.264`.\n* Supported transcript and file attachment format: `.json` .  The `fileName` must end with `transcript.json`.\n* Supported metadata and file attachment format: `.json`. The fileName must end with `metadata.json`.\n* Required file upload sequence: main file, transcript file (if necessary), metadata file (if necessary).\n* When your object size reaches 2 GB, you should use multipart uploads instead of uploading the object in a single operation.\n* For an **account-level** [OAuth app](https://developers.zoom.us/docs/integrations/create/), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) with **Edit** permission for **All Conversations**.\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:file`,`zra:write:file:admin`",
        "operationId": "UploadIQFileDeprecated",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["file"],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The upload file, in binary format. You can only send a maximum of 2 gigabytes.",
                    "format": "binary"
                  },
                  "main_file_id": {
                    "type": "string",
                    "description": "The main file's unique ID. Use this field to upload a attachment file.",
                    "example": "xBvggqyjQUal6TecwMlYwQ"
                  },
                  "source": {
                    "type": "number",
                    "description": "The source of the transcript and metadata files, if this field is not provided, it defaults to a value of 1. \n\n There are two valid values for this field: \n* 1: Represents files sourced from 'Gong.' \n* 2: Represents files sourced from 'Chorus.'\n",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nFile successfully uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file_id": {
                      "type": "string",
                      "description": "The IQ file's unique ID.",
                      "example": "xBvggqyjQUal6TecwMlYwE"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `124` <br>\n Invalid access token. <br>\n**Error Code:** `200` <br>\n Zoom IQ plan is missing. You must subscribe to the zoom iq plan and enable zoom iq for this user in order to perform this action. <br>\n**Error Code:** `300` <br>\n Invalid File type. <br>\nMaximum file size exceeded: ${maxSize}. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n File ID does not exist: {$fileId}.<br> <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:file",
              "zra:write:file:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240222",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": ["zra:write:file", "zra:write:file:admin"]
        }
      }
    },
    "/iq/files/multipart": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Upload iq multipart file. [Deprecated]",
        "description": "Use this API to upload a multipart file. \n\n **Note:** \n* The base URL for this API is `https://fileapi.zoom.us/v2/`. \n* The rate limit of this API is 20 requests per second or 2000 requests per day per IP address. \n* The caller must support HTTP 30x redirects. \n* The caller must retain the authorization header when redirected to a different hostname. \n* Video can be in `.mov`, `.mp4`, `.avi`, `.wmv` or `H.264` format.\n* Transcript can be in `.vtt`, `.json` format.\n* In general, when your object size reaches 2 GB, you should use multipart uploads instead of uploading the object in a single operation.\n* The caller must be a iq_listened user.\n* For an **account-level** [OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) that has the **Edit** permission for **All Conversations**. \n*  \n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:file`,`zra:write:file:admin`",
        "operationId": "UploadIqMultipartFileDeprecated",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["file", "part_number", "upload_context"],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The upload file, in binary format. Each part must be at most 100 MB in size. Each part must be at least 5 MB in size, except the last part.",
                    "format": "binary"
                  },
                  "upload_context": {
                    "type": "string",
                    "description": "When uploading multipart files, use Upload context to identify the multipart upload whose part is being uploaded.",
                    "example": "noNpr2pkBEv4_fTxYWDEHBsSs3pl8keRx4fPZmnyNDe.SPdodJp.3UZDaCI2xRVzkRh0xeEV6RuOrXZpJQBPutWCS424c2YnHVxVh8b9.4DNwd4VErRuD98jeJBwRCgz6rC3I4NQg5zXAtCqPFoC0g--"
                  },
                  "part_number": {
                    "type": "integer",
                    "description": "When uploading multipart files, the part number of the part being uploaded. This is a positive integer between 1 and 100.",
                    "example": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nFile successfully uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "part_number_etag": {
                      "type": "object",
                      "properties": {
                        "part_number": {
                          "type": "integer",
                          "description": "the part number of the part being uploaded.",
                          "example": 1
                        },
                        "etag": {
                          "type": "string",
                          "description": "The etag of the part being uploaded.",
                          "example": "etag1"
                        }
                      },
                      "description": "The part number etag, Collect and bring it back in the final request to complete the multipart upload request."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `124` <br>\n Invalid access token. <br>\n**Error Code:** `200` <br>\n Zoom IQ plan is missing. You must subscribe to the Zoom IQ plan and enable Zoom IQ for this user in order to perform this action. <br>\n**Error Code:** `300` <br>\n Invalid File type. <br>Part number exceeded: ${maxSize}. <br>Maximum file size exceeded: ${maxSize}.<br>Each part must be at least 5 MB in size, except the last part.  <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Upload context {upload_context} not exist.<br> <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:file",
              "zra:write:file:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240222",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": ["zra:write:file", "zra:write:file:admin"]
        }
      }
    },
    "/iq/files/multipart/upload_events": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Initiate and complete a multipart upload. [Deprecated]",
        "description": "Initiate or complete a multipart upload. \n\n **Note:** \n* The base URL for this API is `https://fileapi.zoom.us/v2/`. \n* The rate limit is 20 requests per second or 2000 requests per day per IP address.\n* The caller must support HTTP 30x redirects. \n* The caller must retain the authorization header when redirected to a different hostname. \n* Once initiated the multipart upload must complete within 7 days. \n* The caller must be an iq_listened user. \n* For **account-level** [OAuth apps](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) with **Edit** permission for **All Conversations**.\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:file`,`zra:write:file:admin`",
        "operationId": "InitiateAndCompleteAMultipartUpload. [Deprecated]",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["method"],
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "The method to upload events: \n* `CreateMultipartUpload` — Create a multipart upload. \n* `CompleteMultipartUpload` — Complete a multipart upload.",
                    "example": "CreateMultipartUpload",
                    "enum": ["CreateMultipartUpload", "CompleteMultipartUpload"]
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "file_name": {
                        "type": "string",
                        "description": "The iq file's name. If you pass the `CreateMultipartUpload` value for the `method` field.",
                        "example": "file name"
                      },
                      "main_file_id": {
                        "type": "string",
                        "description": "The main file's unique ID. If you pass the `CreateMultipartUpload` value for the `method` field, Use this field to upload a attachment file.",
                        "example": "xBvggqyjQUal6TecwMlYwQ"
                      },
                      "upload_context": {
                        "type": "string",
                        "description": "Upload context identifying the multipart upload whose part is being uploaded. Use this field if you pass the `CompleteMultipartUpload` value for the `method` field.",
                        "example": "noNpr2pkBEv4_fTxYWDEHBsSs3pl8keRx4fPZmnyNDe.SPdodJp.3UZDaCI2xRVzkRh0xeEV6RuOrXZpJQBPutWCS424c2YnHVxVh8b9.4DNwd4VErRuD98jeJBwRCgz6rC3I4NQg5zXAtCqPFoC0g--"
                      },
                      "part_number_etags": {
                        "type": "array",
                        "description": "The part number etags being uploaded. Use this field if you pass the `CompleteMultipartUpload` value for the `method` field.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "part_number": {
                              "type": "integer",
                              "description": "the part number of the part being uploaded.",
                              "example": 1
                            },
                            "etag": {
                              "type": "string",
                              "description": "The etag of the part being uploaded.",
                              "example": "etag1"
                            }
                          }
                        }
                      }
                    },
                    "description": "The CompleteMultipartUpload parameters."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**Status Code:** `201`   \n \nSuccessfully initiate and complete a multipart upload.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "upload_context": {
                      "type": "string",
                      "description": "The upload context. Return this field if you pass the `CreateMultipartUpload` value for the `method` field. **Note:** * Use this upload context to associate all of the parts in the specific multipart upload. You specify this upload context in each of your subsequent upload part requests. You also include this upload context in the final request to complete the multipart upload request.",
                      "example": "noNpr2pkBEv4_fTxYWDEHBsSs3pl8keRx4fPZmnyNDe.SPdodJp.3UZDaCI2xRVzkRh0xeEV6RuOrXZpJQBPutWCS424c2YnHVxVh8b9.4DNwd4VErRuD98jeJBwRCgz6rC3I4NQg5zXAtCqPFoC0g--"
                    },
                    "file_id": {
                      "type": "string",
                      "description": "The iq file's unique ID. Return this field if you pass the `CompleteMultipartUpload` value for the `method` field.",
                      "example": "xBvggqyjQUal6TecwMlYwQ"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `124` <br>\n Invalid access token. <br>\n**Error Code:** `200` <br>\n Zoom IQ plan is missing. You must subscribe to the Zoom IQ plan and enable Zoom IQ for this user in order to perform this action. <br>\n**Error Code:** `300` <br>\n Invalid part number etags. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Upload context {upload_context} not exist.<br>File ID does not exist: {$fileId}. <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:file",
              "zra:write:file:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240222",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": ["zra:write:file", "zra:write:file:admin"]
        }
      }
    },
    "/iq/users/{userId}/conversations": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Add conversation by meeting record url or meeting UUID. [Deprecated]",
        "description": "Add new conversation by meeting recording URL or meeting UUID. If both recording URL and meeting UUID are passed in the request but refer to different meetings, we use the recording URL and ignore the meeting UUID.\n\n\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:conversation`,`zra:write:conversation:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "addConversationDeprecated",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address of the user, or the text 'me' for the current user.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "If both recording url and meeting UUID are passed in request and refer to difference meeting, we will ignore meeting UUID.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recording_link": {
                    "type": "string",
                    "description": "The meeting record url. It could be share_url or play_url.",
                    "example": "https://zoom.us/rec/share/...."
                  },
                  "meeting_uuid": {
                    "type": "string",
                    "description": "The Meeting ID. Each meeting instance generates its own meeting UUID.",
                    "example": "egLSRuj2SlWet+wLi87LNA=="
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nConversation added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "meeting_uuid": {
                      "type": "string",
                      "description": "The Meeting ID. Each meeting instance generates its own meeting UUID.",
                      "example": "egLSRuj2SlWet+wLi87LNA=="
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3300` <br>\n Failed to add the recording, please try again.<br> <br>\n**Error Code:** `5333` <br>\n `3318`<br>\nThis is an invalid link. <br> <br>\n**Error Code:** `3318` <br>\n This is an invalid link. <br> <br>\n**Error Code:** `3320` <br>\n You cannot add recording with CMK encryption. <br> <br>\n**Error Code:** `3319` <br>\n This recording is already added. <br> <br>\n**Error Code:** `3315` <br>\n This recording is already under processing analysis.<br> <br>\n**Error Code:** `3314` <br>\n The recording must have been made after {0}.<br> <br>\n**Error Code:** `3317` <br>\n User has no IQ license. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden \n\n **Error Code:** `3313` <br>\n User {$userId} is not the host of recording. <br> <br>\n**Error Code:** `1004` <br>\n no permission to operate. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n User ID does not exist: {$userId}. <br> <br>\n**Error Code:** `3316` <br>\n Meeting ID does not exist. <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:conversation",
              "zra:write:conversation:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": [
            "zra:write:conversation",
            "zra:write:conversation:admin"
          ]
        }
      }
    },
    "/iq/users/{userId}/conversations/playlists": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get a user's playlist [Deprecated]",
        "description": "Get all playlists for a user. \n\n\n\n**Scopes:** `iq_playlist:read`,`iq_playlist:read:admin`\n\n**Granular Scopes:** `zra:read:list_conversation_playlists`,`zra:read:list_conversation_playlists`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getUserPlaylistDeprecated",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address of the user.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the playlist to query: \n* `All` - All playlists. \n* `Normal` - Normal playlist. \n* `Smart` - Smart playlist. \n* `Favorite` - Favorite playlist.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Normal",
              "default": "All",
              "enum": ["All", "Normal", "Smart", "Favorite"]
            }
          },
          {
            "name": "following",
            "in": "query",
            "description": "Whether to see Following only.",
            "required": false,
            "schema": { "type": "boolean", "example": true, "default": false }
          },
          {
            "name": "create_by_self",
            "in": "query",
            "description": "Whether to see playlist created by self.",
            "required": false,
            "schema": { "type": "boolean", "example": true, "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nSuccessfully listed a user's playlist.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "playlists": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "playlist_id": {
                                "type": "string",
                                "description": "The Playlist ID. Each playlist will generate its own playlist UUID.",
                                "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
                              },
                              "type": {
                                "type": "string",
                                "description": "The type of the playlist",
                                "example": "Normal"
                              },
                              "modified_time": {
                                "type": "string",
                                "description": "The time the playlist was modified.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "playlist_name": {
                                "type": "string",
                                "description": "The name of the playlist.",
                                "example": "ZoomIQ Playlist"
                              },
                              "number_of_conversations": {
                                "type": "integer",
                                "description": "The number of conversations in a playlist.",
                                "example": 4
                              },
                              "following": {
                                "type": "boolean",
                                "description": "Following plalist",
                                "example": true
                              },
                              "created_by": {
                                "type": "string",
                                "description": "The create user's name.",
                                "example": "John Smith"
                              }
                            }
                          }
                        }
                      },
                      "description": "The information about the playlist"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1001` <br>\n User ID does not exist: {$userId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_playlist:read",
              "iq_playlist:read:admin",
              "zra:read:list_conversation_playlists",
              "zra:read:list_conversation_playlists"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_playlist:read", "iq_playlist:read:admin"],
          "x-granular-scopes": [
            "zra:read:list_conversation_playlists",
            "zra:read:list_conversation_playlists"
          ]
        }
      }
    },
    "/zra/conversations": {
      "get": {
        "tags": ["Conversations"],
        "summary": "List conversations",
        "description": "List all conversations. \n\n\n\n\n\n**Scopes:** `iq_conversation:read`,`iq_conversation:write`,`iq_conversation:read:admin`,`iq_conversation:write:admin`\n\n**Granular Scopes:** `zra:read:list_conversations`,`zra:read:list_conversations:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listAllConversations",
        "parameters": [
          {
            "name": "host_id",
            "in": "query",
            "description": "The host user ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "participant_id",
            "in": "query",
            "description": "The internal participant ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "The Zoom specific team ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "deal_id",
            "in": "query",
            "description": "The Zoom specific deal ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "period_type",
            "in": "query",
            "description": "The type of period to query: \n* `meetingStartTime` &mdash; Queries conversations with meeting_start_time in the time period between the From and To parameters. \n* `iqProcessedTime` &mdash; Queries conversations with iq_processed_time in the time period between the From and To parameters.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "meetingStartTime",
              "default": "meetingStartTime",
              "enum": ["meetingStartTime", "iqProcessedTime"]
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.",
            "required": false,
            "schema": { "type": "string", "example": "2020-05-01T19:13:02Z" }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.",
            "required": false,
            "schema": { "type": "string", "example": "2020-05-02T19:13:05Z" }
          },
          {
            "name": "conversation_type",
            "in": "query",
            "description": "The type of conversations to query: \n* `all` &mdash; All conversations. \n* `meeting` &mdash; Meeting conversations. \n* `phone` - Phone conversations.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "meeting",
              "default": "all",
              "enum": ["all", "meeting", "phone"]
            }
          },
          {
            "name": "callout_type",
            "in": "query",
            "description": "The callout type of conversations to query: \n* `engagingQuestions` &mdash; Only query conversations that include engaging questions indicator. \n* `nextSteps` &mdash; Only query conversations that include next steps indicator.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "engagingQuestions",
              "enum": ["engagingQuestions", "nextSteps"]
            }
          },
          {
            "name": "indicator_id",
            "in": "query",
            "description": "The indicator id to query.",
            "required": false,
            "schema": { "type": "string", "example": "nZ2G0anOQfGECmsb4W0hxA" }
          },
          {
            "name": "mentioned_topic_id",
            "in": "query",
            "description": "The mentioned topic id to query.",
            "required": false,
            "schema": { "type": "string", "example": "user_requirements" }
          },
          {
            "name": "scored",
            "in": "query",
            "description": "Set to `true` to return scored conversations from the conversation list.",
            "required": false,
            "schema": { "type": "boolean", "example": true }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nAll authorized conversations returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "conversations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "conversation_id": {
                                "type": "string",
                                "description": "The conversation ID.",
                                "example": "egLSRuj2SlWet+wLi87LNA==,1667893163000"
                              },
                              "host_id": {
                                "type": "string",
                                "description": "The meeting host's user ID.",
                                "example": "x1yCzABCDEfg23HiJKl4mN"
                              },
                              "meeting_id": {
                                "type": "integer",
                                "description": "The meeting ID also known as the meeting number in long (int64) format.",
                                "format": "int64",
                                "example": 896549134891
                              },
                              "meeting_uuid": {
                                "type": "string",
                                "description": "The Meeting ID. Each meeting instance generates its own meeting UUID.",
                                "example": "egLSRuj2SlWet+wLi87LNA=="
                              },
                              "deal_id": {
                                "type": "string",
                                "description": "The Zoom specific deal ID.",
                                "example": "0065g00000DgD2QAAV"
                              },
                              "topic": {
                                "type": "string",
                                "description": "The meeting topic.",
                                "example": "Maximize profits",
                                "deprecated": true
                              },
                              "conversation_topic": {
                                "type": "string",
                                "description": "The conversation topic.",
                                "example": "Maximize profits"
                              },
                              "duration": {
                                "type": "integer",
                                "description": "The recording duration in minutes.",
                                "example": 60
                              },
                              "conversation_type": {
                                "type": "string",
                                "description": "The conversation type.",
                                "example": "meeting"
                              },
                              "meeting_start_time": {
                                "type": "string",
                                "description": "The meeting start time.",
                                "example": "2022-03-23T06:00:00Z"
                              },
                              "iq_processed_time": {
                                "type": "string",
                                "description": "The time IQ was processed.",
                                "example": "2022-03-23T06:00:00Z"
                              },
                              "engagement_score": {
                                "type": "integer",
                                "description": "The engagement score.",
                                "example": 20
                              },
                              "sentiment_score": {
                                "type": "integer",
                                "description": "The sentiment score.",
                                "example": 80
                              },
                              "engaging_questions_count": {
                                "type": "integer",
                                "description": "The count of engaging questions.",
                                "example": 5
                              },
                              "next_steps_count": {
                                "type": "integer",
                                "description": "The count of next steps.",
                                "example": 5
                              },
                              "filler_words_count": {
                                "type": "integer",
                                "description": "The count of filler words per minute.",
                                "example": 5
                              },
                              "processing_analysis": {
                                "type": "boolean",
                                "description": "Whether the conversation is in processing analysis.",
                                "example": false
                              }
                            }
                          }
                        }
                      },
                      "description": "The information about the conversations."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1001` <br>\n The from or to time is invalid. <br> <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Team does not exist: {$teamId} <br>\nDeal does not exist: {$dealId} <br>\nHost or participant user does not exist: {$userId} <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:read",
              "iq_conversation:write",
              "iq_conversation:read:admin",
              "iq_conversation:write:admin",
              "zra:read:list_conversations",
              "zra:read:list_conversations:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": ["AllConversations:Read"],
          "x-macro-scopes": [
            "iq_conversation:read",
            "iq_conversation:write",
            "iq_conversation:read:admin",
            "iq_conversation:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:list_conversations",
            "zra:read:list_conversations:admin"
          ]
        }
      },
      "post": {
        "tags": ["Conversations"],
        "summary": "Add conversation by file id or download url.",
        "description": "Add conversation by file ID or third party download URL.\n\n\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:conversation`,`zra:write:conversation:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "AddConversationByFileIdOrDownloadUrl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["conversation_type", "meeting_start_time"],
                "type": "object",
                "properties": {
                  "host_id": {
                    "type": "string",
                    "description": "The host user ID or email address.",
                    "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                  },
                  "file_id": {
                    "type": "string",
                    "description": "The IQ file's unique ID.",
                    "example": "xBvggqyjQUal6TecwMlYwQ"
                  },
                  "download_url": {
                    "type": "string",
                    "description": "The third party download URL.",
                    "example": "https://example.com/foo.mp4"
                  },
                  "conversation_topic": {
                    "type": "string",
                    "description": "The meeting/phone topic.",
                    "example": "Maximize profits"
                  },
                  "conversation_type": {
                    "type": "string",
                    "description": "The conversation type: \n* `meeting` - Meeting conversations. \n* `phone` - Phone conversations.",
                    "example": "meeting",
                    "enum": ["meeting", "phone"]
                  },
                  "deal_id": {
                    "type": "string",
                    "description": "The Zoom deal ID.",
                    "example": "0065g00000DgD2QAAV"
                  },
                  "primary_language": {
                    "type": "string",
                    "description": "The primary language.",
                    "example": "en",
                    "enum": [
                      "en",
                      "es",
                      "fr",
                      "de",
                      "it",
                      "zh",
                      "ru",
                      "uk",
                      "ja",
                      "ko",
                      "vi",
                      "pt",
                      "nl",
                      "hi"
                    ]
                  },
                  "meeting_start_time": {
                    "type": "string",
                    "description": "The meeting start time.",
                    "example": "2022-03-23T06:00:00Z"
                  },
                  "meeting_end_time": {
                    "type": "string",
                    "description": "The meeting end time.",
                    "example": "2022-03-23T06:00:00Z"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Time zone to format time. \n\nFor a list of supported timezones and their formats, see our [timezone list](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).",
                    "example": "America/Los_Angeles"
                  },
                  "participants": {
                    "type": "array",
                    "description": "A list of the participants. up to a maximum of 200 participants. For external users, only need to pass display name.",
                    "items": {
                      "required": ["display_name"],
                      "type": "object",
                      "properties": {
                        "display_name": {
                          "type": "string",
                          "description": "The name of the participant.",
                          "example": "user name"
                        },
                        "email": {
                          "type": "string",
                          "description": "The email of the participant, if available.",
                          "example": "user@example.com"
                        }
                      }
                    }
                  },
                  "timeline": {
                    "type": "array",
                    "description": "The speech timeline, who spoke when",
                    "items": {
                      "required": ["participants", "start_time_in_recording"],
                      "type": "object",
                      "properties": {
                        "start_time_in_recording": {
                          "type": "string",
                          "description": "The start time in recording.",
                          "example": "00:00:01.910"
                        },
                        "participants": {
                          "type": "array",
                          "description": "A list of the users.For external users, only need to pass display name.",
                          "items": {
                            "required": ["display_name"],
                            "type": "object",
                            "properties": {
                              "display_name": {
                                "type": "string",
                                "description": "The name of the participant.",
                                "example": "user name"
                              },
                              "email": {
                                "type": "string",
                                "description": "The email of the participant, if available.",
                                "example": "user@example.com"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nConversation added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation_id": {
                      "type": "string",
                      "description": "The conversation ID.",
                      "example": "egLSRuj2SlWet+wLi87LNA==,1667893163000"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n File id does not exist: {$fileId} <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:conversation",
              "zra:write:conversation:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": [
            "zra:write:conversation",
            "zra:write:conversation:admin"
          ]
        }
      }
    },
    "/zra/conversations/{conversationId}": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation information",
        "description": "Get information for a specific conversation. \n\n\n\n\n\n**Scopes:** `iq_conversation:read`,`iq_conversation:write`,`iq_conversation:read:admin`,`iq_conversation:write:admin`\n\n**Granular Scopes:** `zra:read:conversations:admin`,`zra:read:conversations`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getConversationDetail",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation_id": {
                      "type": "string",
                      "description": "The conversation ID.",
                      "example": "egLSRuj2SlWet+wLi87LNA==,1667893163000"
                    },
                    "meeting_id": {
                      "type": "integer",
                      "description": "The meeting ID also known as the meeting number in long (int64) format.",
                      "format": "int64",
                      "example": 896549134891
                    },
                    "meeting_uuid": {
                      "type": "string",
                      "description": "The meeting ID. Each meeting instance generates its own meeting UUID.",
                      "example": "egLSRuj2SlWet+wLi87LNA=="
                    },
                    "host_id": {
                      "type": "string",
                      "description": "The meeting host's user ID.",
                      "example": "x1yCzABCDEfg23HiJKl4mN"
                    },
                    "host_email": {
                      "type": "string",
                      "description": "The meeting host's email address.",
                      "format": "email",
                      "example": "jchill@example.com"
                    },
                    "topic": {
                      "type": "string",
                      "description": "The meeting topic.",
                      "example": "Maximize profits",
                      "deprecated": true
                    },
                    "conversation_topic": {
                      "type": "string",
                      "description": "The conversation topic.",
                      "example": "Maximize profits"
                    },
                    "duration": {
                      "type": "integer",
                      "description": "The recording duration in minutes.",
                      "example": 60
                    },
                    "summary": {
                      "type": "string",
                      "description": "The conversation summary.",
                      "example": "summary"
                    },
                    "conversation_type": {
                      "type": "string",
                      "description": "The conversation type.",
                      "example": "meeting"
                    },
                    "stage_during_conversation": {
                      "type": "string",
                      "description": "The stage of the deal when the conversation occurred",
                      "example": "Perception Analysis"
                    },
                    "start_time": {
                      "type": "string",
                      "description": "The meeting start time.",
                      "example": "2022-03-23T06:00:00Z",
                      "deprecated": true
                    },
                    "meeting_start_time": {
                      "type": "string",
                      "description": "The meeting start time.",
                      "example": "2022-03-23T06:00:00Z"
                    },
                    "iq_processed_time": {
                      "type": "string",
                      "description": "The time IQ processed.",
                      "example": "2022-03-23T06:00:00Z"
                    },
                    "engagement_score": {
                      "type": "integer",
                      "description": "The engagement score.",
                      "example": 20
                    },
                    "sentiment_score": {
                      "type": "integer",
                      "description": "The sentiment score.",
                      "example": 80
                    },
                    "conversation_url": {
                      "type": "string",
                      "description": "The URL for easy access to conversation detail page.",
                      "example": "https://zoom.us/iq/conversation?meetingId..."
                    },
                    "deal": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The deal ID.",
                          "example": "0065g00000DhY3eAAF"
                        },
                        "name": {
                          "type": "string",
                          "description": "The deal name.",
                          "example": "deal name"
                        },
                        "stage": {
                          "type": "string",
                          "description": "The current stage of the deal.",
                          "example": "Needs Analysis"
                        },
                        "customer_crm_account_name": {
                          "type": "string",
                          "description": "The customer CRM account name of the deal.",
                          "example": "customer"
                        },
                        "close_date": {
                          "type": "string",
                          "description": "The close date of the deal.",
                          "example": "2023-04-19"
                        }
                      },
                      "description": "The deal of the conversation."
                    },
                    "calendar_client": {
                      "type": "string",
                      "description": "The calendar provider associated with the calendar event linked to this conversation.",
                      "example": "Google/Outlook"
                    },
                    "event_id": {
                      "type": "string",
                      "description": "The unique ID of this calendar event in the calendar provider.",
                      "example": "6COPSIvrTv2LUS1pvtBokQ"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:read",
              "iq_conversation:write",
              "iq_conversation:read:admin",
              "iq_conversation:write:admin",
              "zra:read:conversations:admin",
              "zra:read:conversations"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZRA-QM-20240718",
          "x-permissions": ["AllConversations:Read"],
          "x-macro-scopes": [
            "iq_conversation:read",
            "iq_conversation:write",
            "iq_conversation:read:admin",
            "iq_conversation:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:conversations:admin",
            "zra:read:conversations"
          ]
        }
      },
      "delete": {
        "tags": ["Conversations"],
        "summary": "Delete conversation by conversation ID",
        "description": "Delete conversation by conversation ID. \n\n\n\n\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:delete:conversations`,`zra:delete:conversations:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteConversationById",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n No Content."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `300` <br>\n Invalid path parameter: {param} <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden \n\n **Error Code:** `5004` <br>\n This conversation will be available after the processing analysis is completed <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {conversationId} <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:delete:conversations",
              "zra:delete:conversations:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": [
            "zra:delete:conversations",
            "zra:delete:conversations:admin"
          ]
        }
      }
    },
    "/zra/conversations/{conversationId}/comments": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation comments",
        "description": "Get comments for a specific conversation. \n\n\n\n\n\n**Scopes:** `iq_comment:read`,`iq_comment:write`,`iq_comment:read:admin`,`iq_comment:write:admin`\n\n**Granular Scopes:** `zra:read:list_conversation_comments`,`zra:read:list_conversation_comments:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getConversationCommentsById",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation comments returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "comments": {
                          "type": "array",
                          "description": "The comments of the conversation.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The comment's ID in this conversation.",
                                "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
                              },
                              "parent_comment_id": {
                                "type": "string",
                                "description": "The parent comment's ID in this conversation.",
                                "example": "34dfg301-d32b-4850-92c7-ea9f5a40fd39"
                              },
                              "user_name": {
                                "type": "string",
                                "description": "The commenter's user name.",
                                "example": "John Deve"
                              },
                              "user_email": {
                                "type": "string",
                                "description": "The commenter's email address.",
                                "example": "user@example.com"
                              },
                              "created_time": {
                                "type": "string",
                                "description": "The time at which the comment was added.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "last_modified_time": {
                                "type": "string",
                                "description": "The time at which the comment was last updated.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "comment": {
                                "type": "string",
                                "description": "The actual comment.",
                                "example": "Nicely done!"
                              },
                              "mention_users": {
                                "type": "array",
                                "description": "The list of the users mentioned in the comment",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": "string",
                                      "description": "The mentioned user's ID.",
                                      "example": "hjficvXtR42vjSABCCS32Q"
                                    },
                                    "user_name": {
                                      "type": "string",
                                      "description": "The mentioned user's name.",
                                      "example": "John Smith"
                                    }
                                  }
                                }
                              },
                              "mention_teams": {
                                "type": "array",
                                "description": "The list of teams mentioned in the comment",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "team_id": {
                                      "type": "string",
                                      "description": "The mentioned team's ID.",
                                      "example": "hjficvXtR42vjSABCCS32Q"
                                    },
                                    "team_name": {
                                      "type": "string",
                                      "description": "The mentioned team's name.",
                                      "example": "John's team"
                                    }
                                  }
                                }
                              },
                              "is_private": {
                                "type": "boolean",
                                "description": "Determine whether comment is public or private.",
                                "example": false
                              },
                              "time_in_recording": {
                                "type": "string",
                                "description": "The time in recording which the player should advance.",
                                "example": "00:00:10"
                              }
                            }
                          }
                        }
                      },
                      "description": "The comments of the conversation."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_comment:read",
              "iq_comment:write",
              "iq_comment:read:admin",
              "iq_comment:write:admin",
              "zra:read:list_conversation_comments",
              "zra:read:list_conversation_comments:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_comment:read",
            "iq_comment:write",
            "iq_comment:read:admin",
            "iq_comment:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:list_conversation_comments",
            "zra:read:list_conversation_comments:admin"
          ]
        }
      },
      "post": {
        "tags": ["Conversations"],
        "summary": "Add new comments to the conversation",
        "description": "Add new comments to a specific conversation. \n\n\n\n\n\n**Scopes:** `iq_comment:write`,`iq_comment:write:admin`\n\n**Granular Scopes:** `zra:read:list_conversation_comments`,`zra:read:list_conversation_comments:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "addConversationComments",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["comment"],
                "type": "object",
                "properties": {
                  "parent_comment_id": {
                    "type": "string",
                    "description": "The parent comment's ID in this conversation.",
                    "example": "34dfg301-d32b-4850-92c7-ea9f5a40fd39"
                  },
                  "comment": {
                    "type": "string",
                    "description": "The actual comment.",
                    "example": "Nicely done!"
                  },
                  "mention_user_ids": {
                    "type": "array",
                    "description": "The list of the users mentioned in the comment",
                    "items": {
                      "type": "string",
                      "description": "The mentioned user's ID.",
                      "example": "hjficvXtR42vjSABCCS32Q"
                    }
                  },
                  "mention_team_ids": {
                    "type": "array",
                    "description": "The list of teams mentioned in the comment",
                    "items": {
                      "type": "string",
                      "description": "The mentioned team's ID.",
                      "example": "hjficvXtR42vjSABCCS32Q"
                    }
                  },
                  "is_private": {
                    "type": "boolean",
                    "description": "Determine whether comment is public or private.",
                    "example": false
                  },
                  "time_in_recording": {
                    "type": "string",
                    "description": "The time in recording which the player should advance.",
                    "example": "00:00:10"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nSuccessfully added comment to conversation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The comment's ID in this conversation.",
                      "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
                    },
                    "parent_comment_id": {
                      "type": "string",
                      "description": "The parent comment's ID in this conversation.",
                      "example": "34dfg301-d32b-4850-92c7-ea9f5a40fd39"
                    },
                    "user_name": {
                      "type": "string",
                      "description": "The commenter's user name.",
                      "example": "John Deve"
                    },
                    "user_email": {
                      "type": "string",
                      "description": "The commenter's email address.",
                      "example": "user@example.com"
                    },
                    "created_time": {
                      "type": "string",
                      "description": "The time at which the comment was added.",
                      "format": "date-time",
                      "example": "2022-03-22T05:59:09Z"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The time at which the comment was last updated.",
                      "format": "date-time",
                      "example": "2022-03-22T05:59:09Z"
                    },
                    "comment": {
                      "type": "string",
                      "description": "The actual comment.",
                      "example": "Nicely done!"
                    },
                    "mention_users": {
                      "type": "array",
                      "description": "The list of the users mentioned in the comment",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The mentioned user's ID.",
                            "example": "hjficvXtR42vjSABCCS32Q"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "The mentioned user's name.",
                            "example": "John Smith"
                          }
                        }
                      }
                    },
                    "mention_teams": {
                      "type": "array",
                      "description": "The list of teams mentioned in the comment",
                      "items": {
                        "type": "object",
                        "properties": {
                          "team_id": {
                            "type": "string",
                            "description": "The mentioned team's ID.",
                            "example": "hjficvXtR42vjSABCCS32Q"
                          },
                          "team_name": {
                            "type": "string",
                            "description": "The mentioned team's name.",
                            "example": "John's team"
                          }
                        }
                      }
                    },
                    "is_private": {
                      "type": "boolean",
                      "description": "Determine whether comment is public or private.",
                      "example": false
                    },
                    "time_in_recording": {
                      "type": "string",
                      "description": "The time in recording which the player should advance.",
                      "example": "00:00:10"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_comment:write",
              "iq_comment:write:admin",
              "zra:read:list_conversation_comments",
              "zra:read:list_conversation_comments:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_comment:write", "iq_comment:write:admin"],
          "x-granular-scopes": [
            "zra:read:list_conversation_comments",
            "zra:read:list_conversation_comments:admin"
          ]
        }
      }
    },
    "/zra/conversations/{conversationId}/comments/{commentId}": {
      "delete": {
        "tags": ["Conversations"],
        "summary": "Delete conversation's comment",
        "description": "Delete comment from a specific conversation. \n\n\n\n**Scopes:** `iq_comment:write`,`iq_comment:write:admin`\n\n**Granular Scopes:** `zra:delete:conversation_comment`,`zra:delete:conversation_comment:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "deleteConversationCommentById",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n No Content."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {conversationId} <br>\nComment does not exist: {commentId} <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_comment:write",
              "iq_comment:write:admin",
              "zra:delete:conversation_comment",
              "zra:delete:conversation_comment:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_comment:write", "iq_comment:write:admin"],
          "x-granular-scopes": [
            "zra:delete:conversation_comment",
            "zra:delete:conversation_comment:admin"
          ]
        }
      },
      "patch": {
        "tags": ["Conversations"],
        "summary": "Edit conversation comment",
        "description": "Edit a comment for a specific conversation. \n\n\n\n\n\n**Scopes:** `iq_comment:write`,`iq_comment:write:admin`\n\n**Granular Scopes:** `zra:update:conversation_comment`,`zra:update:conversation_comment:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "editConversationCommentById",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "The actual comment.",
                    "example": "Nicely done!"
                  },
                  "mention_user_ids": {
                    "type": "array",
                    "description": "The list of the users mentioned in the comment",
                    "items": {
                      "type": "string",
                      "description": "The mentioned user's ID.",
                      "example": "hjficvXtR42vjSABCCS32Q"
                    }
                  },
                  "mention_team_ids": {
                    "type": "array",
                    "description": "The list of teams mentioned in the comment",
                    "items": {
                      "type": "string",
                      "description": "The mentioned team's ID.",
                      "example": "hjficvXtR42vjSABCCS32Q"
                    }
                  },
                  "time_in_recording": {
                    "type": "string",
                    "description": "The time in recording which the player should advance.",
                    "example": "00:00:10"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n No Content."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {conversationId} <br>\nComment does not exist: {commentId} <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_comment:write",
              "iq_comment:write:admin",
              "zra:update:conversation_comment",
              "zra:update:conversation_comment:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_comment:write", "iq_comment:write:admin"],
          "x-granular-scopes": [
            "zra:update:conversation_comment",
            "zra:update:conversation_comment:admin"
          ]
        }
      }
    },
    "/zra/conversations/{conversationId}/content_analysis": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation content analysis",
        "description": "Get the content analysis for a specific conversation. \n\n\n\n\n\n**Scopes:** `iq_conversation:read`,`iq_conversation:write`,`iq_conversation:read:admin`,`iq_conversation:write:admin`\n\n**Granular Scopes:** `zra:read:conversation_analysis`,`zra:read:conversation_analysis:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getConversationContentAnalysisById",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "analysis_type",
            "in": "query",
            "description": "The content analysis type of conversations to query: \n* `topics` - Topics analysis. \n* `nextSteps` - Next steps analysis. \n* `engagingQuestions` - Engaging questions analysis. \n* `indicators` - Indicators analysis. \n* `smartChapters` - Smart Chapters analysis.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "engagingQuestions",
              "enum": [
                "topics",
                "nextSteps",
                "engagingQuestions",
                "indicators",
                "smartChapters"
              ]
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "summary": {
                          "type": "string",
                          "description": "The overall conversation summary. Only returned when the `analysis_type` is `smartChapters`",
                          "example": "overall summary"
                        },
                        "smart_chapters": {
                          "type": "array",
                          "description": "The smart chapters. Only returned when `analysis_type` is `smartChapters`.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "The chapter title.",
                                "example": "chapter title"
                              },
                              "summary": {
                                "type": "string",
                                "description": "The chapter summary.",
                                "example": "chapter summary."
                              },
                              "category": {
                                "type": "string",
                                "description": "The chapter category.",
                                "example": "chapter category"
                              },
                              "start_time": {
                                "type": "string",
                                "description": "The chapter start time.",
                                "example": "2022-03-23T06:00:00Z"
                              },
                              "end_time": {
                                "type": "string",
                                "description": "The chapter end time.",
                                "example": "2022-03-23T06:05:00Z"
                              }
                            }
                          }
                        },
                        "analysis": {
                          "type": "array",
                          "description": "The analysis results.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "section": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "user_id": {
                                      "type": "string",
                                      "description": "The ID of the user. If the participant joins the meeting without logging in or is external user, the value of this field will be blank.",
                                      "example": "hjficvXtR42vjSABCCS32Q"
                                    },
                                    "display_name": {
                                      "type": "string",
                                      "description": "The name of the user.",
                                      "example": "user name"
                                    },
                                    "text": {
                                      "type": "string",
                                      "description": "The text content.",
                                      "example": "text"
                                    },
                                    "utterance": {
                                      "type": "string",
                                      "description": "The text's complete utterance.",
                                      "example": "next steps"
                                    },
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the topic.",
                                      "example": "pricing"
                                    },
                                    "indicator_name": {
                                      "type": "string",
                                      "description": "The indicator's name.",
                                      "example": "Johnny Dev"
                                    },
                                    "indicator_id": {
                                      "type": "string",
                                      "description": "The indicator ID.",
                                      "example": "INTrFEESRUqrdTXgKUIHnw"
                                    },
                                    "key_word": {
                                      "type": "string",
                                      "description": "The keyword define in indicator.",
                                      "example": "keyword"
                                    },
                                    "marked_by": {
                                      "type": "string",
                                      "description": "The one who marked the content. \n* `nlp` &mdash; Marked by NLP. \n* `es` &mdash; Marked by ES. \n* `user_id` - Manually marked by the user with this user ID.",
                                      "example": "nlp",
                                      "enum": [
                                        "nlp",
                                        "es",
                                        "the value of the user_id"
                                      ]
                                    },
                                    "start_time": {
                                      "type": "string",
                                      "description": "The indicator start time.",
                                      "example": "2022-03-23T06:00:00Z"
                                    },
                                    "end_time": {
                                      "type": "string",
                                      "description": "The indicator end time.",
                                      "example": "2022-03-23T06:00:00Z"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "description": "The content analysis of the conversation."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:read",
              "iq_conversation:write",
              "iq_conversation:read:admin",
              "iq_conversation:write:admin",
              "zra:read:conversation_analysis",
              "zra:read:conversation_analysis:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": ["AllConversations:Read"],
          "x-macro-scopes": [
            "iq_conversation:read",
            "iq_conversation:write",
            "iq_conversation:read:admin",
            "iq_conversation:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:conversation_analysis",
            "zra:read:conversation_analysis:admin"
          ]
        }
      }
    },
    "/zra/conversations/{conversationId}/interactions": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation interactions",
        "description": "Get interactions for a specific conversation. \n\n\n\n\n\n**Scopes:** `iq_conversation:read`,`iq_conversation:write`,`iq_conversation:read:admin`,`iq_conversation:write:admin`\n\n**Granular Scopes:** `zra:read:conversation_participants`,`zra:read:conversation_participants:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getConversationInteraction",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "participants": {
                          "type": "array",
                          "description": "The speakers in the conversation.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "user_id": {
                                "type": "string",
                                "description": "The speaker's user ID. If the participant joins the meeting without logging in or is external user, the value of this field will be blank.",
                                "example": "hjficvXtR42vjSABCCS32Q"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The speaker's user name.",
                                "example": "John Deve"
                              },
                              "email": {
                                "type": "string",
                                "description": "The speaker's email address. If the participant joins the meeting without logging in or is external user, the value of this field will be blank.",
                                "example": "user@example.com"
                              },
                              "speaker_type": {
                                "type": "string",
                                "description": "The type of the speaker.",
                                "example": "rep",
                                "enum": ["rep", "customer"]
                              },
                              "transcripts": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "item_id": {
                                      "type": "string",
                                      "description": "The item ID.",
                                      "example": "0"
                                    },
                                    "text": {
                                      "type": "string",
                                      "description": "The speech in text.",
                                      "example": "speak text."
                                    },
                                    "start_time": {
                                      "type": "string",
                                      "description": "The speak item start time.",
                                      "example": "2022-03-23T06:00:00Z"
                                    },
                                    "end_time": {
                                      "type": "string",
                                      "description": "The speak item end time.",
                                      "example": "2022-03-23T06:02:00Z"
                                    }
                                  }
                                }
                              },
                              "metrics": {
                                "type": "object",
                                "properties": {
                                  "talk_to_listen_ratio": {
                                    "type": "number",
                                    "description": "The talk-to-listen ratio.",
                                    "example": 1
                                  },
                                  "longest_monolog": {
                                    "type": "number",
                                    "description": "The longest monologue in seconds.",
                                    "example": 10
                                  },
                                  "talk_speed": {
                                    "type": "number",
                                    "description": "The talk speed in words per minute.",
                                    "example": 10
                                  },
                                  "filler_words": {
                                    "type": "number",
                                    "description": "The count of filler words. Unit: words/min.",
                                    "example": 10
                                  },
                                  "patience": {
                                    "type": "number",
                                    "description": "The patience in seconds.",
                                    "example": 10
                                  }
                                },
                                "description": "The metrics for the conversation."
                              }
                            }
                          }
                        }
                      },
                      "description": "The interactions of the conversation."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:read",
              "iq_conversation:write",
              "iq_conversation:read:admin",
              "iq_conversation:write:admin",
              "zra:read:conversation_participants",
              "zra:read:conversation_participants:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": ["AllConversations:Read"],
          "x-macro-scopes": [
            "iq_conversation:read",
            "iq_conversation:write",
            "iq_conversation:read:admin",
            "iq_conversation:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:conversation_participants",
            "zra:read:conversation_participants:admin"
          ]
        }
      }
    },
    "/zra/conversations/{conversationId}/scorecards": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation scorecards",
        "description": "Get scorecards for a specific conversation. \n\n\n\n\n\n**Scopes:** `iq_coaching:read:admin`,`iq_coaching:read`\n\n**Granular Scopes:** `zra:read:conversation_scorecards`,`zra:read:conversation_scorecards:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getConversationScorecardsById",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation's ID. If the ID begins with a `/` character or contains `//` characters, you must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the ID value.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eCFFfhRiSV+ju48yH1cg2g==,1667893163000"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nConversation scorecards returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "scorecards": {
                          "type": "array",
                          "description": "The scorecards of the conversation.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "scorecard_id": {
                                "type": "string",
                                "description": "The scorecard's ID.",
                                "example": "xMCKjazFS9GtJRhGdcLhcQ"
                              },
                              "scorecard_name": {
                                "type": "string",
                                "description": "The scorecard's name.",
                                "example": "Learning experience scoring"
                              },
                              "scorecard_description": {
                                "type": "string",
                                "description": "The scorecard's description.",
                                "example": "Rate your learning experience for this conversation"
                              },
                              "average_score": {
                                "type": "number",
                                "description": "The average score for this scorecard.",
                                "example": 10
                              },
                              "rate_time": {
                                "type": "string",
                                "description": "The time at which the scorecard was rated.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "rater": {
                                "type": "object",
                                "properties": {
                                  "email": {
                                    "type": "string",
                                    "description": "Email address of person who rates the scorecard.",
                                    "example": "dummyname@gmail.com"
                                  },
                                  "display_name": {
                                    "type": "string",
                                    "description": "Name of the person who rates the scorecard.",
                                    "example": "dummy name"
                                  },
                                  "user_id": {
                                    "type": "string",
                                    "description": "The unique identifier for the user.",
                                    "example": "6dfgdfgdg444447b0egga"
                                  }
                                },
                                "description": "User information of the person who rates this scorecard."
                              },
                              "scorecard_questions": {
                                "type": "array",
                                "description": "Questions in the scorecard",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "question_id": {
                                      "type": "string",
                                      "description": "The question's ID.",
                                      "example": "lasiSUvrSvG1rcqFCs4gtg"
                                    },
                                    "question_title": {
                                      "type": "string",
                                      "description": "The question title",
                                      "example": "Question 1"
                                    },
                                    "score": {
                                      "type": "number",
                                      "description": "The user's score for the question.",
                                      "example": 8
                                    },
                                    "question_description": {
                                      "type": "string",
                                      "description": "The question's description.",
                                      "example": "How is this video quality for the conversation?"
                                    },
                                    "question_comment": {
                                      "type": "string",
                                      "description": "The question's comment.",
                                      "example": "This question is great."
                                    },
                                    "scale": {
                                      "type": "object",
                                      "properties": {
                                        "min_score_label": {
                                          "type": "string",
                                          "description": "The lowest score.",
                                          "example": "Very strongly disagree."
                                        },
                                        "max_score_label": {
                                          "type": "string",
                                          "description": "The highest score.",
                                          "example": "Very strongly agree."
                                        }
                                      },
                                      "description": "The scale information for this question."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "description": "The scorecards of the conversation."
                    },
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Conversation does not exist: {$conversationId} <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_coaching:read:admin",
              "iq_coaching:read",
              "zra:read:conversation_scorecards",
              "zra:read:conversation_scorecards:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_coaching:read:admin", "iq_coaching:read"],
          "x-granular-scopes": [
            "zra:read:conversation_scorecards",
            "zra:read:conversation_scorecards:admin"
          ]
        }
      }
    },
    "/zra/conversations/{conversationId}/update_host": {
      "patch": {
        "tags": ["Conversations"],
        "summary": "Update conversation host id",
        "description": "Update the conversation host id to a new host id by conversation id.\r\n\r\n**Prerequisite**: \r\nYou must have either `iq_conversation:write:admin` or `iq_conversation:write` permissions.\r\n\r\n\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:update:conversation_host`,`zra:update:conversation_host:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "UpdateConversationhostid2NewHostidByConversationId",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_host_id": {
                    "type": "string",
                    "description": "The user ID or email address of the host.",
                    "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`    Conversation updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1006` <br>\n User has no IQ license. <br> <br>\n**Error Code:** `300` <br>\n Missing field: {field} <br> <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n User does not exist.<br> <br> <br>\n**Error Code:** `2001` <br>\n Conversation does not exist: {conversationId}.<br> <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:update:conversation_host",
              "zra:update:conversation_host:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": [
            "zra:update:conversation_host",
            "zra:update:conversation_host:admin"
          ]
        }
      }
    },
    "/zra/files": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Upload IQ file",
        "description": "Upload a file to Zoom Revenue Acclerator. \n\n **Prerequisite:**  \n The caller must be a Zoom Revenue Acclerator-licensed user.\n\n **Note:**  \n* Base URL: `https://fileapi.zoom.us/v2/`.  \n* Rate limit: 20 requests per second per user or 2000 requests per second per IP address. \n* The caller must support HTTP 30x redirects. \n* The caller must retain the Authorization header when redirected to a different hostname. \n\n* Supported video formats: `.mov`, `.mp4`, `.avi`, `.wmv` or `H.264`.\n* Supported transcript and file attachment format: `.json` .  The `fileName` must end with `transcript.json`.\n* Supported metadata and file attachment format: `.json`. The fileName must end with `metadata.json`.\n* Required file upload sequence: main file, transcript file (if necessary), metadata file (if necessary).\n* When your object size reaches 2 GB, you should use multipart uploads instead of uploading the object in a single operation.\n* For an **account-level** [OAuth app](https://developers.zoom.us/docs/integrations/create/), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) with **Edit** permission for **All Conversations**.\n\n\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:file`,`zra:write:file:admin`",
        "operationId": "UploadZraFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["file"],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The upload file, in binary format. You can only send a maximum of 2 gigabytes.",
                    "format": "binary"
                  },
                  "main_file_id": {
                    "type": "string",
                    "description": "The main file's unique ID. Use this field to upload a attachment file.",
                    "example": "xBvggqyjQUal6TecwMlYwQ"
                  },
                  "source": {
                    "type": "number",
                    "description": "The source of the transcript and metadata files, if this field is not provided, it defaults to a value of 1. \n\n There are two valid values for this field: \n* 1: Represents files sourced from 'Gong.' \n* 2: Represents files sourced from 'Chorus.'\n",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nFile successfully uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file_id": {
                      "type": "string",
                      "description": "The IQ file's unique ID.",
                      "example": "xBvggqyjQUal6TecwMlYwE"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `124` <br>\n Invalid access token. <br> <br>\n**Error Code:** `200` <br>\n Zoom IQ plan is missing. You must subscribe to the zoom iq plan and enable zoom iq for this user in order to perform this action. <br> <br>\n**Error Code:** `300` <br>\n Invalid File type. <br>\nMaximum file size exceeded: ${maxSize}. <br> <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n File ID does not exist: {$fileId}.<br> <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:file",
              "zra:write:file:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240222",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": ["zra:write:file", "zra:write:file:admin"]
        }
      }
    },
    "/zra/files/multipart": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Upload iq multipart file.",
        "description": "Use this API to upload a multipart file. \n\n **Note:** \n* The base URL for this API is `https://fileapi.zoom.us/v2/`. \n* The rate limit of this API is 20 requests per second or 2000 requests per day per IP address. \n* The caller must support HTTP 30x redirects. \n* The caller must retain the authorization header when redirected to a different hostname. \n* Video can be in `.mov`, `.mp4`, `.avi`, `.wmv` or `H.264` format.\n* Transcript can be in `.vtt`, `.json` format.\n* In general, when your object size reaches 2 GB, you should use multipart uploads instead of uploading the object in a single operation.\n* The caller must be a iq_listened user.\n* For an **account-level** [OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) that has the **Edit** permission for **All Conversations**. \n*  \n\n\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:file`,`zra:write:file:admin`",
        "operationId": "UploadZraMultipartFile.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["file", "part_number", "upload_context"],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The upload file, in binary format. Each part must be at most 100 MB in size. Each part must be at least 5 MB in size, except the last part.",
                    "format": "binary"
                  },
                  "upload_context": {
                    "type": "string",
                    "description": "When uploading multipart files, use Upload context to identify the multipart upload whose part is being uploaded.",
                    "example": "noNpr2pkBEv4_fTxYWDEHBsSs3pl8keRx4fPZmnyNDe.SPdodJp.3UZDaCI2xRVzkRh0xeEV6RuOrXZpJQBPutWCS424c2YnHVxVh8b9.4DNwd4VErRuD98jeJBwRCgz6rC3I4NQg5zXAtCqPFoC0g--"
                  },
                  "part_number": {
                    "type": "integer",
                    "description": "When uploading multipart files, the part number of the part being uploaded. This is a positive integer between 1 and 100.",
                    "example": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nFile successfully uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "part_number_etag": {
                      "type": "object",
                      "properties": {
                        "part_number": {
                          "type": "integer",
                          "description": "the part number of the part being uploaded.",
                          "example": 1
                        },
                        "etag": {
                          "type": "string",
                          "description": "The etag of the part being uploaded.",
                          "example": "etag1"
                        }
                      },
                      "description": "The part number etag, Collect and bring it back in the final request to complete the multipart upload request."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `124` <br>\n Invalid access token. <br> <br>\n**Error Code:** `200` <br>\n Zoom IQ plan is missing. You must subscribe to the Zoom IQ plan and enable Zoom IQ for this user in order to perform this action. <br> <br>\n**Error Code:** `300` <br>\n Invalid File type. <br>Part number exceeded: ${maxSize}. <br>Maximum file size exceeded: ${maxSize}.<br>Each part must be at least 5 MB in size, except the last part.  <br> <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Upload context {upload_context} not exist.<br> <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:file",
              "zra:write:file:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240222",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": ["zra:write:file", "zra:write:file:admin"]
        }
      }
    },
    "/zra/files/multipart/upload_events": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Initiate and complete a multipart upload.",
        "description": "Initiate or complete a multipart upload. \n\n **Note:** \n* The base URL for this API is `https://fileapi.zoom.us/v2/`. \n* The rate limit is 20 requests per second or 2000 requests per day per IP address.\n* The caller must support HTTP 30x redirects. \n* The caller must retain the authorization header when redirected to a different hostname. \n* Once initiated the multipart upload must complete within 7 days. \n* The caller must be an iq_listened user. \n* For **account-level** [OAuth apps](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) with **Edit** permission for **All Conversations**.\n\n\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:file`,`zra:write:file:admin`",
        "operationId": "InitiateAndCompleteAMultipartUpload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["method"],
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "The method to upload events: \n* `CreateMultipartUpload` — Create a multipart upload. \n* `CompleteMultipartUpload` — Complete a multipart upload.",
                    "example": "CreateMultipartUpload",
                    "enum": ["CreateMultipartUpload", "CompleteMultipartUpload"]
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "file_name": {
                        "type": "string",
                        "description": "The iq file's name. If you pass the `CreateMultipartUpload` value for the `method` field.",
                        "example": "file name"
                      },
                      "main_file_id": {
                        "type": "string",
                        "description": "The main file's unique ID. If you pass the `CreateMultipartUpload` value for the `method` field, Use this field to upload a attachment file.",
                        "example": "xBvggqyjQUal6TecwMlYwQ"
                      },
                      "upload_context": {
                        "type": "string",
                        "description": "Upload context identifying the multipart upload whose part is being uploaded. Use this field if you pass the `CompleteMultipartUpload` value for the `method` field.",
                        "example": "noNpr2pkBEv4_fTxYWDEHBsSs3pl8keRx4fPZmnyNDe.SPdodJp.3UZDaCI2xRVzkRh0xeEV6RuOrXZpJQBPutWCS424c2YnHVxVh8b9.4DNwd4VErRuD98jeJBwRCgz6rC3I4NQg5zXAtCqPFoC0g--"
                      },
                      "part_number_etags": {
                        "type": "array",
                        "description": "The part number etags being uploaded. Use this field if you pass the `CompleteMultipartUpload` value for the `method` field.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "part_number": {
                              "type": "integer",
                              "description": "the part number of the part being uploaded.",
                              "example": 1
                            },
                            "etag": {
                              "type": "string",
                              "description": "The etag of the part being uploaded.",
                              "example": "etag1"
                            }
                          }
                        }
                      }
                    },
                    "description": "The CompleteMultipartUpload parameters."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**Status Code:** `201`   \n \nSuccessfully initiate and complete a multipart upload.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "upload_context": {
                      "type": "string",
                      "description": "The upload context. Return this field if you pass the `CreateMultipartUpload` value for the `method` field. **Note:** * Use this upload context to associate all of the parts in the specific multipart upload. You specify this upload context in each of your subsequent upload part requests. You also include this upload context in the final request to complete the multipart upload request.",
                      "example": "noNpr2pkBEv4_fTxYWDEHBsSs3pl8keRx4fPZmnyNDe.SPdodJp.3UZDaCI2xRVzkRh0xeEV6RuOrXZpJQBPutWCS424c2YnHVxVh8b9.4DNwd4VErRuD98jeJBwRCgz6rC3I4NQg5zXAtCqPFoC0g--"
                    },
                    "file_id": {
                      "type": "string",
                      "description": "The iq file's unique ID. Return this field if you pass the `CompleteMultipartUpload` value for the `method` field.",
                      "example": "xBvggqyjQUal6TecwMlYwQ"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `124` <br>\n Invalid access token. <br> <br>\n**Error Code:** `200` <br>\n Zoom IQ plan is missing. You must subscribe to the Zoom IQ plan and enable Zoom IQ for this user in order to perform this action. <br> <br>\n**Error Code:** `300` <br>\n Invalid part number etags. <br> <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Upload context {upload_context} not exist.<br>File ID does not exist: {$fileId}. <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:file",
              "zra:write:file:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240222",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": ["zra:write:file", "zra:write:file:admin"]
        }
      }
    },
    "/zra/users/{userId}/conversations": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Add conversation by meeting record url or meeting UUID.",
        "description": "Add new conversations by meeting record URL or meeting UUID. If both recording URL and meeting UUID are passed in the request and refer to different meetings, we ignore meeting UUID.\n\n**Scopes:** `iq_conversation:write:admin`,`iq_conversation:write`\n\n**Granular Scopes:** `zra:write:conversation`,`zra:write:conversation:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "addConversationByRecord",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address of the user, The user's user ID or email address, or the text 'me' for the current user",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "If both recording url and meeting UUID are passed in request and refer to difference meeting, we will ignore meeting UUID.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recording_link": {
                    "type": "string",
                    "description": "The meeting record url. It could be share_url or play_url.",
                    "example": "https://zoom.us/rec/share/...."
                  },
                  "meeting_uuid": {
                    "type": "string",
                    "description": "The Meeting ID. Each meeting instance generates its own meeting UUID.",
                    "example": "egLSRuj2SlWet+wLi87LNA=="
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nConversation added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "meeting_uuid": {
                      "type": "string",
                      "description": "The Meeting ID. Each meeting instance generates its own meeting UUID.",
                      "example": "egLSRuj2SlWet+wLi87LNA=="
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3300` <br>\n Failed to add the recording, please try again.<br> <br>\n**Error Code:** `5333` <br>\n `3318`<br>\nThis is an invalid link. <br> <br>\n**Error Code:** `3318` <br>\n This is an invalid link. <br> <br>\n**Error Code:** `3318` <br>\n This is an invalid link. <br> <br>\n**Error Code:** `3320` <br>\n You cannot add recording with CMK encryption. <br> <br>\n**Error Code:** `3319` <br>\n This recording is already added. <br> <br>\n**Error Code:** `3315` <br>\n This recording is already under processing analysis.<br> <br>\n**Error Code:** `3314` <br>\n The recording must have been made after {0}.<br> <br>\n**Error Code:** `3317` <br>\n User has no IQ license. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden \n\n **Error Code:** `3313` <br>\n User {$userId} is not the host of recording. <br> <br>\n**Error Code:** `1004` <br>\n no permission to operate. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n User ID does not exist: {$userId}. <br> <br>\n**Error Code:** `3316` <br>\n Meeting ID does not exist. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_conversation:write:admin",
              "iq_conversation:write",
              "zra:write:conversation",
              "zra:write:conversation:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_conversation:write:admin",
            "iq_conversation:write"
          ],
          "x-granular-scopes": [
            "zra:write:conversation",
            "zra:write:conversation:admin"
          ]
        }
      }
    },
    "/zra/users/{userId}/conversations/playlists": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get a user's playlist",
        "description": "Get all playlists for a user. \n\n\n\n\n\n**Scopes:** `iq_playlist:read`,`iq_playlist:read:admin`\n\n**Granular Scopes:** `zra:read:list_conversation_playlists`,`zra:read:list_conversation_playlists`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getUserPlaylists",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address of the user.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the playlist to query: \n* `All` - All playlists. \n* `Normal` - Normal playlist. \n* `Smart` - Smart playlist. \n* `Favorite` - Favorite playlist.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Normal",
              "default": "All",
              "enum": ["All", "Normal", "Smart", "Favorite"]
            }
          },
          {
            "name": "following",
            "in": "query",
            "description": "Whether to see Following only.",
            "required": false,
            "schema": { "type": "boolean", "example": true, "default": false }
          },
          {
            "name": "create_by_self",
            "in": "query",
            "description": "Whether to see playlist created by self.",
            "required": false,
            "schema": { "type": "boolean", "example": true, "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nSuccessfully listed a user's playlist.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "playlists": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "playlist_id": {
                                "type": "string",
                                "description": "The Playlist ID. Each playlist will generate its own playlist UUID.",
                                "example": "7c8b7301-d32b-4850-92c7-ea9f5a40fd39"
                              },
                              "type": {
                                "type": "string",
                                "description": "The type of the playlist",
                                "example": "Normal"
                              },
                              "modified_time": {
                                "type": "string",
                                "description": "The time the playlist was modified.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "playlist_name": {
                                "type": "string",
                                "description": "The name of the playlist.",
                                "example": "ZoomIQ Playlist"
                              },
                              "number_of_conversations": {
                                "type": "integer",
                                "description": "The number of conversations in a playlist.",
                                "example": 4
                              },
                              "following": {
                                "type": "boolean",
                                "description": "Following plalist",
                                "example": true
                              },
                              "created_by": {
                                "type": "string",
                                "description": "The create user's name.",
                                "example": "John Smith"
                              }
                            }
                          }
                        }
                      },
                      "description": "The information about the playlist"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1001` <br>\n User ID does not exist: {$userId} <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_playlist:read",
              "iq_playlist:read:admin",
              "zra:read:list_conversation_playlists",
              "zra:read:list_conversation_playlists"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_playlist:read", "iq_playlist:read:admin"],
          "x-granular-scopes": [
            "zra:read:list_conversation_playlists",
            "zra:read:list_conversation_playlists"
          ]
        }
      }
    },
    "/iq/deals": {
      "get": {
        "tags": ["Deals"],
        "summary": "List deals [Deprecated]",
        "description": "List all deals.\n\n**Scopes:** `iq_deal:read`,`iq_deal:read:admin`,`iq_deal:write`,`iq_deal:write:admin`\n\n**Granular Scopes:** `zra:read:list_deals`,`zra:read:list_deals:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listDealsDeprecated",
        "parameters": [
          {
            "name": "deal_name",
            "in": "query",
            "description": "The deal name",
            "required": false,
            "schema": { "type": "string", "example": "Good deal" }
          },
          {
            "name": "only_show_with_analytics",
            "in": "query",
            "description": "Set to `true` to return deals with analytics.",
            "required": false,
            "schema": { "type": "boolean", "example": true }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.",
            "required": false,
            "schema": { "type": "string", "example": "2020-05-01T19:13:02Z" }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.",
            "required": false,
            "schema": { "type": "string", "example": "2020-05-02T19:13:05Z" }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "The Zoom specific team ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "deal_stage",
            "in": "query",
            "description": "The stage of the deal.",
            "required": false,
            "schema": { "type": "string", "example": "Needs Analysis" }
          },
          {
            "name": "owner_id",
            "in": "query",
            "description": "The Zoom specific user ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "max_deal_amount",
            "in": "query",
            "description": "The maximum deal amount to query.",
            "required": false,
            "schema": { "type": "integer", "example": 1000 }
          },
          {
            "name": "min_deal_amount",
            "in": "query",
            "description": "The minimum deal amount to query.",
            "required": false,
            "schema": { "type": "string", "example": "100.0" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "deals": {
                          "type": "array",
                          "description": "The Zoom specific deals",
                          "items": {
                            "type": "object",
                            "properties": {
                              "deal_id": {
                                "type": "string",
                                "description": "The Zoom specific deal ID.",
                                "example": "0065g00000DgD2QAAV"
                              },
                              "deal_name": {
                                "type": "string",
                                "description": "The deal name.",
                                "example": "Maximize profits"
                              },
                              "deal_stage": {
                                "type": "string",
                                "description": "The current stage of the deal.",
                                "example": "Needs Analysis"
                              },
                              "deal_description": {
                                "type": "string",
                                "description": "The deal description.",
                                "example": "Maximize profits"
                              },
                              "owner_name": {
                                "type": "string",
                                "description": "The name of the deal owner.",
                                "example": "John Wick"
                              },
                              "owner_email": {
                                "type": "string",
                                "description": "The email of the deal owner.",
                                "example": "jw@zoom.us"
                              },
                              "owner_id": {
                                "type": "string",
                                "description": "The Zoom specific user ID of the deal owner.",
                                "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                              },
                              "deal_is_closed": {
                                "type": "boolean",
                                "description": "Whether the deal is closed.",
                                "example": false
                              },
                              "create_time": {
                                "type": "string",
                                "description": "The time at which the deal was created.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "account_name": {
                                "type": "string",
                                "description": "The customer CRM account name of the deal.",
                                "example": "customer"
                              },
                              "deal_is_private": {
                                "type": "boolean",
                                "description": "Determine whether deal is public or private.",
                                "example": false
                              },
                              "deal_amount": {
                                "type": "integer",
                                "description": "The amount of the deal.",
                                "example": 1000000
                              },
                              "currency_type": {
                                "type": "string",
                                "description": "The currency of the deal.",
                                "example": "USD"
                              },
                              "close_date": {
                                "type": "string",
                                "description": "The close date of the deal.",
                                "example": "2023-04-19"
                              },
                              "time_in_stage": {
                                "type": "integer",
                                "description": "The number days in current stage.",
                                "example": 12
                              },
                              "number_of_conversations": {
                                "type": "integer",
                                "description": "The number of conversations in deal.",
                                "example": 4
                              },
                              "last_activity_time": {
                                "type": "string",
                                "description": "The time at which the deal's last activity added.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "account_type": {
                                "type": "string",
                                "description": "The customer CRM account type of the deal.",
                                "example": "salesforce"
                              }
                            }
                          }
                        }
                      },
                      "description": "The Zoom specific deals"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1001` <br>\n The from or to time is invalid. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Team does not exist: {$teamId} <br>\nOwner does not exist: {ownerId} <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_deal:read",
              "iq_deal:read:admin",
              "iq_deal:write",
              "iq_deal:write:admin",
              "zra:read:list_deals",
              "zra:read:list_deals:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_deal:read",
            "iq_deal:read:admin",
            "iq_deal:write",
            "iq_deal:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:list_deals",
            "zra:read:list_deals:admin"
          ]
        }
      }
    },
    "/iq/deals/{dealId}": {
      "get": {
        "tags": ["Deals"],
        "summary": "Get deal information [Deprecated]",
        "description": "Get information for a specific deal. (deprecated)\n\n**Scopes:** `iq_deal:read`,`iq_deal:read:admin`,`iq_deal:write`,`iq_deal:write:admin`\n\n**Granular Scopes:** `zra:read:deal`,`zra:read:deal:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getDealInfoDeprecated",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "description": "The deal's ID.",
            "required": true,
            "schema": { "type": "string", "example": "0065g00000N3Xz6AAF" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "deal_id": {
                          "type": "string",
                          "description": "The Zoom specific deal ID.",
                          "example": "0065g00000DgD2QAAV"
                        },
                        "deal_name": {
                          "type": "string",
                          "description": "The deal name.",
                          "example": "Maximize profits"
                        },
                        "deal_stage": {
                          "type": "string",
                          "description": "The current stage of the deal.",
                          "example": "Needs Analysis"
                        },
                        "deal_description": {
                          "type": "string",
                          "description": "The deal description.",
                          "example": "Maximize profits"
                        },
                        "owner_name": {
                          "type": "string",
                          "description": "The name of the deal owner.",
                          "example": "John Wick"
                        },
                        "owner_email": {
                          "type": "string",
                          "description": "The email of the deal owner.",
                          "example": "jw@zoom.us"
                        },
                        "owner_id": {
                          "type": "string",
                          "description": "The Zoom specific user ID of the deal owner.",
                          "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                        },
                        "deal_is_closed": {
                          "type": "boolean",
                          "description": "Whether the deal is closed.",
                          "example": false
                        },
                        "create_time": {
                          "type": "string",
                          "description": "The time at which the deal was created.",
                          "format": "date-time",
                          "example": "2022-03-22T05:59:09Z"
                        },
                        "account_name": {
                          "type": "string",
                          "description": "The customer CRM account name of the deal.",
                          "example": "customer"
                        },
                        "deal_is_private": {
                          "type": "boolean",
                          "description": "Determine whether deal is public or private.",
                          "example": false
                        },
                        "deal_amount": {
                          "type": "integer",
                          "description": "The amount of the deal.",
                          "example": 1000000
                        },
                        "currency_type": {
                          "type": "string",
                          "description": "The currency of the deal.",
                          "example": "USD"
                        },
                        "close_date": {
                          "type": "string",
                          "description": "The close date of the deal.",
                          "example": "2023-04-19"
                        },
                        "time_in_stage": {
                          "type": "integer",
                          "description": "The number days in current stage.",
                          "example": 12
                        },
                        "number_of_conversations": {
                          "type": "integer",
                          "description": "The number of conversations in deal.",
                          "example": 4
                        },
                        "last_activity_time": {
                          "type": "string",
                          "description": "The time at which the deal's last activity added.",
                          "format": "date-time",
                          "example": "2022-03-22T05:59:09Z"
                        },
                        "account_type": {
                          "type": "string",
                          "description": "The customer CRM account type of the deal.",
                          "example": "salesforce"
                        },
                        "contacts": {
                          "type": "array",
                          "description": "The contacts of the deal.",
                          "items": {
                            "type": "string",
                            "description": "The name of the contact.",
                            "example": "John"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Deal does not exist: {dealId}. <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_deal:read",
              "iq_deal:read:admin",
              "iq_deal:write",
              "iq_deal:write:admin",
              "zra:read:deal",
              "zra:read:deal:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_deal:read",
            "iq_deal:read:admin",
            "iq_deal:write",
            "iq_deal:write:admin"
          ],
          "x-granular-scopes": ["zra:read:deal", "zra:read:deal:admin"]
        }
      }
    },
    "/iq/deals/{dealId}/activities": {
      "get": {
        "tags": ["Deals"],
        "summary": "Get deal activities [Deprecated]",
        "description": "Get activities for a specific deal. (deprecated)\n\n**Scopes:** `iq_deal:read`,`iq_deal:read:admin`,`iq_deal:write`,`iq_deal:write:admin`\n\n**Granular Scopes:** `zra:read:list_deal_activities`,`zra:read:list_deal_activities:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getDealActivitiesDeprecated",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "description": "The deal's ID.",
            "required": true,
            "schema": { "type": "string", "example": "0065g00000N3Xz6AAF" }
          },
          {
            "name": "conversation_topic",
            "in": "query",
            "description": "The conversation topic",
            "required": false,
            "schema": { "type": "string", "example": "Good deal" }
          },
          {
            "name": "callout_type",
            "in": "query",
            "description": "The callout type of conversations to query: \n* `engagingQuestions` &mdash; Only query conversations that include engaging questions indicator. \n* `nextSteps` &mdash; Only query conversations that include next steps indicator.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "engagingQuestions",
              "enum": ["engagingQuestions", "nextSteps"]
            }
          },
          {
            "name": "indicator_id",
            "in": "query",
            "description": "The indicator id to query.",
            "required": false,
            "schema": { "type": "string", "example": "nZ2G0anOQfGECmsb4W0hxA" }
          },
          {
            "name": "mentioned_topic_id",
            "in": "query",
            "description": "The mentioned topic id to query.",
            "required": false,
            "schema": { "type": "string", "example": "user_requirements" }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "activities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "conversation_topic": {
                                "type": "string",
                                "description": "The conversation topic.",
                                "example": "Maximize profits"
                              },
                              "deal_stage": {
                                "type": "string",
                                "description": "The current stage of the deal.",
                                "example": "Needs Analysis"
                              },
                              "sentiment_score": {
                                "type": "integer",
                                "description": "The sentiment score.",
                                "example": 80
                              },
                              "engagement_score": {
                                "type": "integer",
                                "description": "The engagement score.",
                                "example": 20
                              },
                              "host_id": {
                                "type": "string",
                                "description": "The meeting host's user ID.",
                                "example": "x1yCzABCDEfg23HiJKl4mN"
                              },
                              "direction": {
                                "type": "string",
                                "description": "The direction of the activity.",
                                "example": "outbound"
                              },
                              "start_date": {
                                "type": "string",
                                "description": "The activity start date.",
                                "example": "2022-03-23T06:00:00Z"
                              },
                              "activity_type": {
                                "type": "string",
                                "description": "The activity type.",
                                "example": "call"
                              },
                              "stage_during_conversation": {
                                "type": "string",
                                "description": "The stage of the deal when the conversation occurred",
                                "example": "Perception Analysis"
                              },
                              "processing_analysis": {
                                "type": "boolean",
                                "description": "Whether the conversation is in processing analysis.",
                                "example": false
                              },
                              "message_ids": {
                                "type": "string",
                                "description": "The message ID",
                                "example": "4c59ed1d-439a-4e0d-a31f-0c130946f10b"
                              },
                              "number_of_message_in_thread": {
                                "type": "integer",
                                "description": "The number of messages in thread.",
                                "example": 10
                              },
                              "conversation_id": {
                                "type": "string",
                                "description": "The conversation ID.",
                                "example": "egLSRuj2SlWet+wLi87LNA==,1667893163000"
                              },
                              "duration": {
                                "type": "integer",
                                "description": "The duration of the activity.",
                                "example": 0
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Deal does not exist: {dealId}. <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_deal:read",
              "iq_deal:read:admin",
              "iq_deal:write",
              "iq_deal:write:admin",
              "zra:read:list_deal_activities",
              "zra:read:list_deal_activities:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_deal:read",
            "iq_deal:read:admin",
            "iq_deal:write",
            "iq_deal:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:list_deal_activities",
            "zra:read:list_deal_activities:admin"
          ]
        }
      },
      "delete": {
        "tags": ["Deals"],
        "summary": "Delete activity from the deal [Deprecated]",
        "description": "Delete specific activity from the deal. Either <b>conversation_id</b> or <b>message_id</b> would be required.\n\n**Scopes:** `iq_deal:write:admin`,`iq_deal:write`\n\n**Granular Scopes:** `zra:delete:deal_activity`,`zra:delete:deal_activity:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "DeleteActivityFromTheDealDeprecated",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "description": "The deal's ID.",
            "required": false,
            "schema": { "type": "string", "example": "0065g00000N3Xz6AAF" }
          },
          {
            "name": "conversation_id",
            "in": "query",
            "description": "The conversation ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "POxLVSU2T82lZ7ScEXDJ1g==,1682647804000"
            }
          },
          {
            "name": "message_id",
            "in": "query",
            "description": "The message ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "97b14c12-8fae-4ced-b350-96939b4af484"
            }
          }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Deal does not exist: {dealId}. <br>\n**Error Code:** `1005` <br>\n Activity does not exists: {id}. <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "iq_deal:write:admin",
              "iq_deal:write",
              "zra:delete:deal_activity",
              "zra:delete:deal_activity:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_deal:write:admin", "iq_deal:write"],
          "x-granular-scopes": [
            "zra:delete:deal_activity",
            "zra:delete:deal_activity:admin"
          ]
        }
      }
    },
    "/zra/deals": {
      "get": {
        "tags": ["Deals"],
        "summary": "List deals",
        "description": "List all deals.\n\n\n\n**Scopes:** `iq_deal:read`,`iq_deal:read:admin`,`iq_deal:write`,`iq_deal:write:admin`\n\n**Granular Scopes:** `zra:read:list_deals`,`zra:read:list_deals:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listAllDeals",
        "parameters": [
          {
            "name": "deal_name",
            "in": "query",
            "description": "The deal name",
            "required": false,
            "schema": { "type": "string", "example": "Good deal" }
          },
          {
            "name": "only_show_with_analytics",
            "in": "query",
            "description": "Set to `true` to return deals with analytics.",
            "required": false,
            "schema": { "type": "boolean", "example": true }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.",
            "required": false,
            "schema": { "type": "string", "example": "2020-05-01T19:13:02Z" }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.",
            "required": false,
            "schema": { "type": "string", "example": "2020-05-02T19:13:05Z" }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "The Zoom specific team ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "deal_stage",
            "in": "query",
            "description": "The stage of the deal.",
            "required": false,
            "schema": { "type": "string", "example": "Needs Analysis" }
          },
          {
            "name": "owner_id",
            "in": "query",
            "description": "The Zoom specific user ID to query.",
            "required": false,
            "schema": { "type": "string", "example": "IGTRVt3gQ2i-WjoUIjeZxw" }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "max_deal_amount",
            "in": "query",
            "description": "The maximum deal amount to query.",
            "required": false,
            "schema": { "type": "integer", "example": 1000 }
          },
          {
            "name": "min_deal_amount",
            "in": "query",
            "description": "The minimum deal amount to query.",
            "required": false,
            "schema": { "type": "string", "example": "100.0" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "deals": {
                          "type": "array",
                          "description": "The Zoom specific deals",
                          "items": {
                            "type": "object",
                            "properties": {
                              "deal_id": {
                                "type": "string",
                                "description": "The Zoom specific deal ID.",
                                "example": "0065g00000DgD2QAAV"
                              },
                              "deal_name": {
                                "type": "string",
                                "description": "The deal name.",
                                "example": "Maximize profits"
                              },
                              "deal_stage": {
                                "type": "string",
                                "description": "The current stage of the deal.",
                                "example": "Needs Analysis"
                              },
                              "deal_description": {
                                "type": "string",
                                "description": "The deal description.",
                                "example": "Maximize profits"
                              },
                              "owner_name": {
                                "type": "string",
                                "description": "The name of the deal owner.",
                                "example": "John Wick"
                              },
                              "owner_email": {
                                "type": "string",
                                "description": "The email of the deal owner.",
                                "example": "jw@zoom.us"
                              },
                              "owner_id": {
                                "type": "string",
                                "description": "The Zoom specific user ID of the deal owner.",
                                "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                              },
                              "deal_is_closed": {
                                "type": "boolean",
                                "description": "Whether the deal is closed.",
                                "example": false
                              },
                              "create_time": {
                                "type": "string",
                                "description": "The time at which the deal was created.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "account_name": {
                                "type": "string",
                                "description": "The customer CRM account name of the deal.",
                                "example": "customer"
                              },
                              "deal_is_private": {
                                "type": "boolean",
                                "description": "Determine whether deal is public or private.",
                                "example": false
                              },
                              "deal_amount": {
                                "type": "integer",
                                "description": "The amount of the deal.",
                                "example": 1000000
                              },
                              "currency_type": {
                                "type": "string",
                                "description": "The currency of the deal.",
                                "example": "USD"
                              },
                              "close_date": {
                                "type": "string",
                                "description": "The close date of the deal.",
                                "example": "2023-04-19"
                              },
                              "time_in_stage": {
                                "type": "integer",
                                "description": "The number days in current stage.",
                                "example": 12
                              },
                              "number_of_conversations": {
                                "type": "integer",
                                "description": "The number of conversations in deal.",
                                "example": 4
                              },
                              "last_activity_time": {
                                "type": "string",
                                "description": "The time at which the deal's last activity added.",
                                "format": "date-time",
                                "example": "2022-03-22T05:59:09Z"
                              },
                              "account_type": {
                                "type": "string",
                                "description": "The customer CRM account type of the deal.",
                                "example": "salesforce"
                              }
                            }
                          }
                        }
                      },
                      "description": "The Zoom specific deals"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1001` <br>\n The from or to time is invalid. <br> <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Team does not exist: {$teamId} <br>\n Owner does not exist: {ownerId} <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_deal:read",
              "iq_deal:read:admin",
              "iq_deal:write",
              "iq_deal:write:admin",
              "zra:read:list_deals",
              "zra:read:list_deals:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_deal:read",
            "iq_deal:read:admin",
            "iq_deal:write",
            "iq_deal:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:list_deals",
            "zra:read:list_deals:admin"
          ]
        }
      }
    },
    "/zra/deals/{dealId}": {
      "get": {
        "tags": ["Deals"],
        "summary": "Get deal information",
        "description": "Get information for a specific deal.\n\n\n\n**Scopes:** `iq_deal:read`,`iq_deal:read:admin`,`iq_deal:write`,`iq_deal:write:admin`\n\n**Granular Scopes:** `zra:read:deal`,`zra:read:deal:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getDealDetail",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "description": "The deal's ID.",
            "required": true,
            "schema": { "type": "string", "example": "0065g00000N3Xz6AAF" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "deal_id": {
                          "type": "string",
                          "description": "The Zoom specific deal ID.",
                          "example": "0065g00000DgD2QAAV"
                        },
                        "deal_name": {
                          "type": "string",
                          "description": "The deal name.",
                          "example": "Maximize profits"
                        },
                        "deal_stage": {
                          "type": "string",
                          "description": "The current stage of the deal.",
                          "example": "Needs Analysis"
                        },
                        "deal_description": {
                          "type": "string",
                          "description": "The deal description.",
                          "example": "Maximize profits"
                        },
                        "owner_name": {
                          "type": "string",
                          "description": "The name of the deal owner.",
                          "example": "John Wick"
                        },
                        "owner_email": {
                          "type": "string",
                          "description": "The email of the deal owner.",
                          "example": "jw@zoom.us"
                        },
                        "owner_id": {
                          "type": "string",
                          "description": "The Zoom specific user ID of the deal owner.",
                          "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                        },
                        "deal_is_closed": {
                          "type": "boolean",
                          "description": "Whether the deal is closed.",
                          "example": false
                        },
                        "create_time": {
                          "type": "string",
                          "description": "The time at which the deal was created.",
                          "format": "date-time",
                          "example": "2022-03-22T05:59:09Z"
                        },
                        "account_name": {
                          "type": "string",
                          "description": "The customer CRM account name of the deal.",
                          "example": "customer"
                        },
                        "deal_is_private": {
                          "type": "boolean",
                          "description": "Determine whether deal is public or private.",
                          "example": false
                        },
                        "deal_amount": {
                          "type": "integer",
                          "description": "The amount of the deal.",
                          "example": 1000000
                        },
                        "currency_type": {
                          "type": "string",
                          "description": "The currency of the deal.",
                          "example": "USD"
                        },
                        "close_date": {
                          "type": "string",
                          "description": "The close date of the deal.",
                          "example": "2023-04-19"
                        },
                        "time_in_stage": {
                          "type": "integer",
                          "description": "The number days in current stage.",
                          "example": 12
                        },
                        "number_of_conversations": {
                          "type": "integer",
                          "description": "The number of conversations in deal.",
                          "example": 4
                        },
                        "last_activity_time": {
                          "type": "string",
                          "description": "The time at which the deal's last activity added.",
                          "format": "date-time",
                          "example": "2022-03-22T05:59:09Z"
                        },
                        "account_type": {
                          "type": "string",
                          "description": "The customer CRM account type of the deal.",
                          "example": "salesforce"
                        },
                        "contacts": {
                          "type": "array",
                          "description": "The contacts of the deal.",
                          "items": {
                            "type": "string",
                            "description": "The name of the contact.",
                            "example": "John"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Deal does not exist: {dealId}. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_deal:read",
              "iq_deal:read:admin",
              "iq_deal:write",
              "iq_deal:write:admin",
              "zra:read:deal",
              "zra:read:deal:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_deal:read",
            "iq_deal:read:admin",
            "iq_deal:write",
            "iq_deal:write:admin"
          ],
          "x-granular-scopes": ["zra:read:deal", "zra:read:deal:admin"]
        }
      }
    },
    "/zra/deals/{dealId}/activities": {
      "get": {
        "tags": ["Deals"],
        "summary": "Get deal activities",
        "description": "Get activities for a specific deal.\n\n\n\n**Scopes:** `iq_deal:read`,`iq_deal:read:admin`,`iq_deal:write`,`iq_deal:write:admin`\n\n**Granular Scopes:** `zra:read:list_deal_activities`,`zra:read:list_deal_activities:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "geAllActivitiesFromDeal",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "description": "The deal's ID.",
            "required": true,
            "schema": { "type": "string", "example": "0065g00000N3Xz6AAF" }
          },
          {
            "name": "conversation_topic",
            "in": "query",
            "description": "The conversation topic",
            "required": false,
            "schema": { "type": "string", "example": "Good deal" }
          },
          {
            "name": "callout_type",
            "in": "query",
            "description": "The callout type of conversations to query: \n* `engagingQuestions` &mdash; Only query conversations that include engaging questions indicator. \n* `nextSteps` &mdash; Only query conversations that include next steps indicator.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "engagingQuestions",
              "enum": ["engagingQuestions", "nextSteps"]
            }
          },
          {
            "name": "indicator_id",
            "in": "query",
            "description": "The indicator id to query.",
            "required": false,
            "schema": { "type": "string", "example": "nZ2G0anOQfGECmsb4W0hxA" }
          },
          {
            "name": "mentioned_topic_id",
            "in": "query",
            "description": "The mentioned topic id to query.",
            "required": false,
            "schema": { "type": "string", "example": "user_requirements" }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "next_page_token": {
                          "type": "string",
                          "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                          "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                        },
                        "page_size": {
                          "maximum": 300,
                          "type": "integer",
                          "description": "The number of records returned in a single API call.",
                          "example": 30,
                          "default": 30
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "activities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "conversation_topic": {
                                "type": "string",
                                "description": "The conversation topic.",
                                "example": "Maximize profits"
                              },
                              "deal_stage": {
                                "type": "string",
                                "description": "The current stage of the deal.",
                                "example": "Needs Analysis"
                              },
                              "sentiment_score": {
                                "type": "integer",
                                "description": "The sentiment score.",
                                "example": 80
                              },
                              "engagement_score": {
                                "type": "integer",
                                "description": "The engagement score.",
                                "example": 20
                              },
                              "host_id": {
                                "type": "string",
                                "description": "The meeting host's user ID.",
                                "example": "x1yCzABCDEfg23HiJKl4mN"
                              },
                              "direction": {
                                "type": "string",
                                "description": "The direction of the activity.",
                                "example": "outbound"
                              },
                              "start_date": {
                                "type": "string",
                                "description": "The activity start date.",
                                "example": "2022-03-23T06:00:00Z"
                              },
                              "activity_type": {
                                "type": "string",
                                "description": "The activity type.",
                                "example": "call"
                              },
                              "stage_during_conversation": {
                                "type": "string",
                                "description": "The stage of the deal when the conversation occurred",
                                "example": "Perception Analysis"
                              },
                              "processing_analysis": {
                                "type": "boolean",
                                "description": "Whether the conversation is in processing analysis.",
                                "example": false
                              },
                              "message_ids": {
                                "type": "string",
                                "description": "The message ID",
                                "example": "4c59ed1d-439a-4e0d-a31f-0c130946f10b"
                              },
                              "number_of_message_in_thread": {
                                "type": "integer",
                                "description": "The number of messages in thread.",
                                "example": 10
                              },
                              "conversation_id": {
                                "type": "string",
                                "description": "The conversation ID.",
                                "example": "egLSRuj2SlWet+wLi87LNA==,1667893163000"
                              },
                              "duration": {
                                "type": "integer",
                                "description": "The duration of the activity.",
                                "example": 0
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Deal does not exist: {dealId}. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_deal:read",
              "iq_deal:read:admin",
              "iq_deal:write",
              "iq_deal:write:admin",
              "zra:read:list_deal_activities",
              "zra:read:list_deal_activities:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": [
            "iq_deal:read",
            "iq_deal:read:admin",
            "iq_deal:write",
            "iq_deal:write:admin"
          ],
          "x-granular-scopes": [
            "zra:read:list_deal_activities",
            "zra:read:list_deal_activities:admin"
          ]
        }
      },
      "delete": {
        "tags": ["Deals"],
        "summary": "Delete activity from the deal",
        "description": "Delete specific activity from a deal. Use either <b>conversation_id</b> or <b>message_id</b>.\n\n\n\n**Scopes:** `iq_deal:write:admin`,`iq_deal:write`\n\n**Granular Scopes:** `zra:delete:deal_activity`,`zra:delete:deal_activity:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "DeleteActivityFromDeal",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "description": "The deal's ID.",
            "required": true,
            "schema": { "type": "string", "example": "0065g00000N3Xz6AAF" }
          },
          {
            "name": "conversation_id",
            "in": "query",
            "description": "The conversation ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "POxLVSU2T82lZ7ScEXDJ1g==,1682647804000"
            }
          },
          {
            "name": "message_id",
            "in": "query",
            "description": "The message ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "97b14c12-8fae-4ced-b350-96939b4af484"
            }
          }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1005` <br>\n Deal does not exist: {dealId}. <br> <br>\n**Error Code:** `1005` <br>\n Activity does not exists: {id}. <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_deal:write:admin",
              "iq_deal:write",
              "zra:delete:deal_activity",
              "zra:delete:deal_activity:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": ["AllDeals:Edit"],
          "x-macro-scopes": ["iq_deal:write:admin", "iq_deal:write"],
          "x-granular-scopes": [
            "zra:delete:deal_activity",
            "zra:delete:deal_activity:admin"
          ]
        }
      }
    },
    "/iq/teams": {
      "get": {
        "tags": ["Teams"],
        "summary": "List Account Teams [Deprecated]",
        "description": "List account teams. Filter by parent team ID or team name.\n\n**Scopes:** `iq_team:read`,`iq_team:read:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "ListAccountTeamsDeprecated",
        "parameters": [
          {
            "name": "parent_team_id",
            "in": "query",
            "description": "parent team  id",
            "required": false,
            "schema": { "type": "string", "example": "aO1RVNBSRC2klMMdco14_g" }
          },
          {
            "name": "team_name",
            "in": "query",
            "description": "the name of team",
            "required": false,
            "schema": { "type": "string", "example": "team1-1" }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "gPP6D7Oy6TUyGwpBBtICy03182P6nJp3yQ2"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "teams": {
                      "type": "array",
                      "items": {
                        "required": ["name", "team_id"],
                        "type": "object",
                        "properties": {
                          "team_id": {
                            "type": "string",
                            "description": "UUID of team",
                            "example": "aO1RVNBSRC2klMMdco14_g"
                          },
                          "name": {
                            "type": "string",
                            "description": "team name",
                            "example": "level 1-10"
                          },
                          "description": {
                            "type": "string",
                            "description": "team description",
                            "example": "level 1-10"
                          },
                          "type": {
                            "type": "string",
                            "description": "the structure type of team",
                            "example": "hierarchical team",
                            "enum": ["flat team", "hierarchical team"]
                          },
                          "member_size": {
                            "type": "integer",
                            "description": "team member size",
                            "example": 1
                          },
                          "supervisor_size": {
                            "type": "integer",
                            "description": "team admin size",
                            "example": 1
                          },
                          "leaf": {
                            "type": "boolean",
                            "description": "If this flag is true, it means this team has no child teams.",
                            "example": true
                          },
                          "parent_teams": {
                            "type": "array",
                            "description": "This field will only be returned when you enter a search key. The parent teams are all the parent nodes of the hit teams, these team nodes have been sorted, from the upper parent node to the root node.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "team_id": {
                                  "type": "string",
                                  "description": "UUID of team",
                                  "example": "jeazIFbXSKm4E65_cxxQzA"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "team name",
                                  "example": "level 1"
                                }
                              },
                              "description": "element of array"
                            }
                          }
                        }
                      }
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                      "example": "gPP6D7Oy6TUyGwpBBtICy03182P6nJp3yQ2"
                    },
                    "page_size": {
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `300` <br>\n The next page token is invalid or expired. <br>\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized \n\n **Error Code:** `30031004` <br>\n Invalid or expired token <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden \n\n **Error Code:** `5001` <br>\n Access is denied <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `0` <br>\n 404 Route Not Found <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": ["iq_team:read", "iq_team:read:admin"],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZoomIQ-Web-20240123",
          "x-permissions": [],
          "x-macro-scopes": ["iq_team:read", "iq_team:read:admin"]
        }
      }
    },
    "/zra/team": {
      "post": {
        "tags": ["Teams"],
        "summary": "Create Team",
        "description": "Please create team one by one, if your account enable hierarchical structure team. We currently do not support concurrent hierarchical team creation\n\n**Scopes:** `iq_team:write:admin`\n\n**Granular Scopes:** `zra:write:team:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "CreateTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["team_name"],
                "type": "object",
                "properties": {
                  "team_name": {
                    "type": "string",
                    "description": "The name of new team.",
                    "example": "CEO team"
                  },
                  "parent_team_id": {
                    "type": "string",
                    "description": "Zoom team id. If you want to create a child team, please fill this field. And if you want to create a new falt or root team, you can keep this field empty. ",
                    "example": "XmmeMsj3RLqnKeImNwYI4w"
                  }
                },
                "description": "JSON Object, and should include team_name(required) and parent_team_id(optional)"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`    Successfully add new team.",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["added_at", "added_team_id"],
                  "type": "object",
                  "properties": {
                    "added_at": {
                      "type": "string",
                      "description": "Successfully added time",
                      "example": "yyyy-MM-dd'T'HH:mm:ss'Z'"
                    },
                    "added_team_id": {
                      "type": "string",
                      "description": "Successfully added Zoom team id",
                      "example": "Ikl0Wx89Tx-2XBoYVz53BQ"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `5002` <br>\n Require team name. <br>\n**Error Code:** `5005` <br>\n Exceed the maximum size of account available teams. <br>\n**Error Code:** `5005` <br>\n Exceed 10 tiers limit! <br>\n**Error Code:** `5005` <br>\n Exceed 100 children team limit! <br>\n**Error Code:** `5004` <br>\n Other admins are editing team structure, please wait. <br>\n**Error Code:** `5009` <br>\n Add team failed. <br>\n**Error Code:** `5006` <br>\n Team name has already been used. <br>\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized  \n\n **Error Code:** `30031004` <br>\n Invalid or expired token <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `5001` <br>\n Access is denied. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": ["iq_team:write:admin", "zra:write:team:admin"],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "Team-2024-Jun",
          "x-permissions": ["TeamManagement:Edit"],
          "x-macro-scopes": ["iq_team:write:admin"],
          "x-granular-scopes": ["zra:write:team:admin"]
        }
      }
    },
    "/zra/team/{teamId}": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get Team Detail",
        "description": "Get team detail, such as team name, team description, team member size and etc.\n\n**Scopes:** `iq_team:read:admin`\n\n**Granular Scopes:** `zra:read:team:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "GetTeamDetail",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The Zoom specific team ID to query. Retrieve by calling the [**List Account Teams**](/docs/api/rest/reference/iq/methods/#operation/ListAccountTeams) API.",
            "required": true,
            "schema": { "type": "string", "example": "N5nHB8FTSnG56_hyOFPovQ" }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`    Successfully get team detail.",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["name", "team_id"],
                  "type": "object",
                  "properties": {
                    "team_id": {
                      "type": "string",
                      "description": "Zoom team UUID",
                      "example": "N5nHB8FTSnG56_hyOFPovQ"
                    },
                    "name": {
                      "type": "string",
                      "description": "Team name",
                      "example": "CEO Team"
                    },
                    "description": {
                      "type": "string",
                      "description": "Team description.",
                      "example": "CEO Office"
                    },
                    "type": {
                      "type": "string",
                      "description": "The structure type of team.",
                      "example": "hierarchical team"
                    },
                    "member_size": {
                      "type": "integer",
                      "description": "Member size of this team",
                      "example": 1
                    },
                    "manager_size": {
                      "type": "integer",
                      "description": "Manager size of this team. If team type is flat, please ignore this field. ",
                      "example": 1
                    },
                    "leaf": {
                      "type": "boolean",
                      "description": "If this flag is true, it means this team has no child teams.",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `5002` <br>\n Invalid parameters. <br>\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized  \n\n **Error Code:** `30031004` <br>\n Invalid or expired token <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `5001` <br>\n Access is denied. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5011` <br>\n Team not existing! <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": ["iq_team:read:admin", "zra:read:team:admin"],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "Team-2024-Jun",
          "x-permissions": [],
          "x-macro-scopes": ["iq_team:read:admin"],
          "x-granular-scopes": ["zra:read:team:admin"]
        }
      },
      "delete": {
        "tags": ["Teams"],
        "summary": "Delete Team",
        "description": "Please delete team one by one, if your account enable hierarchical structure team. We currently do not support concurrent hierarchical team deletion.\r\nAnd if you want to delete flat team, you should make sure that the team members of the target team are empty.\n\n**Scopes:** `iq_team:write:admin`\n\n**Granular Scopes:** `zra:delete:team:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "DeleteTeam",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The Zoom specific team ID to query. Retrieve by calling the [**List Account Teams**](/docs/api/rest/reference/iq/methods/#operation/ListAccountTeams) API.",
            "required": true,
            "schema": { "type": "string", "example": "N5nHB8FTSnG56_hyOFPovQ" }
          }
        ],
        "responses": {
          "204": { "description": "Successfully delete team" },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `5002` <br>\n Invalid parameters. <br>\n**Error Code:** `5006` <br>\n Can not delete team, because team members are not null. <br>\n**Error Code:** `5004` <br>\n Other admins are editing team structure, please wait. <br>\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized  \n\n **Error Code:** `30031004` <br>\n Invalid or expired token <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `5001` <br>\n Access is denied. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5011` <br>\n Team not existing! <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": ["iq_team:write:admin", "zra:delete:team:admin"],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "Team-2024-Jun",
          "x-permissions": ["TeamManagement:Edit"],
          "x-macro-scopes": ["iq_team:write:admin"],
          "x-granular-scopes": ["zra:delete:team:admin"]
        }
      }
    },
    "/zra/team/{teamId}/team_managers": {
      "post": {
        "tags": ["Teams"],
        "summary": "Assign Team Managers",
        "description": "Add team managers. Make sure your account support hierarchical structure team.\n\n**Scopes:** `iq_team:write:admin`\n\n**Granular Scopes:** `zra:write:team_manages:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "AssignTeamManagers",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The Zoom specific team ID to query. Retrieve by calling the [**List Account Teams**](/docs/api/rest/reference/iq/methods/#operation/ListAccountTeams) API.",
            "required": true,
            "schema": { "type": "string", "example": "Ur7FSzS3QPerlRhHJvj3HA" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Zoom user id list",
                "items": {
                  "maxLength": 3,
                  "minLength": 1,
                  "type": "string",
                  "description": "Zoom user Id",
                  "example": "Ikl0Wx89Tx-2XBoYVz53BQ"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assign Team Manager Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "added_at": {
                      "type": "string",
                      "description": "Successfully added time",
                      "example": "yyyy-MM-dd'T'HH:mm:ss'Z'"
                    },
                    "user_ids": {
                      "type": "string",
                      "description": "Successfully added team manager ids",
                      "example": "xrr05LIrS_e496HBfkrP2w,Ur7FSzS3QPerlRhHJvj3HA"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `5002` <br>\n Invalid parameters. <br>\n**Error Code:** `5007` <br>\n Please don't add more than the threshold number of supervisors at one time. <br>\n**Error Code:** `5006` <br>\n Assigning supervisor in flat team is not supported. <br>\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized  \n\n **Error Code:** `30031004` <br>\n Invalid or expired token <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `5001` <br>\n Access is denied. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5011` <br>\n Team not existing! <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_team:write:admin",
              "zra:write:team_manages:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "Team-2024-Jun",
          "x-permissions": ["TeamManagement:Edit"],
          "x-macro-scopes": ["iq_team:write:admin"],
          "x-granular-scopes": ["zra:write:team_manages:admin"]
        }
      },
      "delete": {
        "tags": ["Teams"],
        "summary": "Unassign Team Managers",
        "description": "Delete team managers. Make sure your account support hierarchical structure team.\n\n**Scopes:** `iq_team:write:admin`\n\n**Granular Scopes:** `zra:delete:team_managers:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "UnassignTeamManagers",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The Zoom specific team ID to query. Retrieve by calling the [**List Account Teams**](/docs/api/rest/reference/iq/methods/#operation/ListAccountTeams) API.",
            "required": true,
            "schema": { "type": "string", "example": "_avENaWhQniWMRqXpusIdw" }
          },
          {
            "name": "user_ids",
            "in": "query",
            "description": "Zoom User Ids. Splited by comma. Max size is 3 in ZRA.",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 1,
              "type": "string",
              "example": "_avENaWhQniWMRqXpusIdw,REV2an9MOQEGxpOrqpIupvw"
            }
          }
        ],
        "responses": {
          "204": { "description": "Delete team managers successfully" },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `5002` <br>\n Invalid parameters. <br>\n**Error Code:** `5008` <br>\n Please don't delete more than the limited number of supervisors at one time. <br>\n**Error Code:** `5006` <br>\n Unassigning supervisor in flat team is not supported. <br>\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized  \n\n **Error Code:** `30031004` <br>\n Invalid or expired token <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `5001` <br>\n Access is denied. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5011` <br>\n Team not existing! <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_team:write:admin",
              "zra:delete:team_managers:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "Team-2024-Jun",
          "x-permissions": ["TeamManagement:Edit"],
          "x-macro-scopes": ["iq_team:write:admin"],
          "x-granular-scopes": ["zra:delete:team_managers:admin"]
        }
      }
    },
    "/zra/team/{teamId}/team_members": {
      "post": {
        "tags": ["Teams"],
        "summary": "Assign Team Members",
        "description": "Add one or more users to a team.\n\n**Scopes:** `iq_team:write:admin`\n\n**Granular Scopes:** `zra:write:team_members:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "AssignTeamMembers",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The Zoom specific team ID to query.\r\nRetrieve by calling the [**List Account Teams**](/docs/api/rest/reference/iq/methods/#operation/ListAccountTeams) API.",
            "required": true,
            "schema": { "type": "string", "example": "aO1RVNBSRC2klMMdco14_g" }
          }
        ],
        "requestBody": {
          "description": "member's info array",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "You can add a maximum of 200 users at one time.",
                "items": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "User ID. If you fill user id field, please ignore email field.",
                      "example": "iL2FL0wsRbOU__OsdO-4Lg"
                    },
                    "email": {
                      "type": "string",
                      "description": "User Email. If you fill both user id and Email fields, we will choose user id. The Email field only takes effect when the user id field is empty.",
                      "example": "xxx@zoom.us"
                    }
                  },
                  "description": "Members to be added to the team."
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "added_at": {
                      "type": "string",
                      "description": "Successfully added time",
                      "example": "yyyy-MM-dd'T'HH:mm:ss'Z'"
                    },
                    "user_ids": {
                      "type": "string",
                      "description": "Successfully added member user ids",
                      "example": "useridxxx,useridyyy"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `5002` <br>\n Invalid parameters. <br>\n**Error Code:** `5007` <br>\n Please don't add more than 200 agents at one time. <br>\n**Error Code:** `5006` <br>\n Team not existing! <br>\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized  \n\n **Error Code:** `30031004` <br>\n Invalid or expired token <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `5001` <br>\n Access is denied <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `0` <br>\n 404 Route Not Found <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_team:write:admin",
              "zra:write:team_members:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "Team-2024-Jun",
          "x-permissions": ["TeamManagement:Edit"],
          "x-macro-scopes": ["iq_team:write:admin"],
          "x-granular-scopes": ["zra:write:team_members:admin"]
        }
      },
      "delete": {
        "tags": ["Teams"],
        "summary": "Unassign Team Members",
        "description": "Delete members of the team. Make sure to delete less than 30 users at one time.\n\n**Scopes:** `iq_team:write:admin`\n\n**Granular Scopes:** `zra:delete:team_members:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "UnassignTeamMembers",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The Zoom specific team ID to query. Retrieve by calling the [**List Account Teams**](/docs/api/rest/reference/iq/methods/#operation/ListAccountTeams) API.",
            "required": true,
            "schema": { "type": "string", "example": "_avENaWhQniWMRqXpusIdw" }
          },
          {
            "name": "user_ids",
            "in": "query",
            "description": "Zoom User Ids. Splited by comma. Max size is 30",
            "required": true,
            "schema": {
              "maxLength": 30,
              "minLength": 1,
              "type": "string",
              "example": "_avENaWhQniWMRqXpusIdw,REV2an9MOQEGxpOrqpIupvw"
            }
          }
        ],
        "responses": {
          "204": { "description": "Delete Success" },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `5002` <br>\n Invalid parameters. <br>\n**Error Code:** `5008` <br>\n Please don't delete more than 30 agents at one time. <br>\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized  \n\n **Error Code:** `30031004` <br>\n Invalid or expired token <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `5001` <br>\n Access is denied. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5011` <br>\n Team not existing! <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_team:write:admin",
              "zra:delete:team_members:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "Team-2024-Jun",
          "x-permissions": ["TeamManagement:Edit"],
          "x-macro-scopes": ["iq_team:write:admin"],
          "x-granular-scopes": ["zra:delete:team_members:admin"]
        }
      }
    },
    "/zra/teams": {
      "get": {
        "tags": ["Teams"],
        "summary": "List Account Teams",
        "description": "List account teams. Filter by parent team ID or team name.\n\n\n\n**Scopes:** `iq_team:read:admin`,`iq_team:read`\n\n**Granular Scopes:** `zra:read:team_list:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "ListTeams",
        "parameters": [
          {
            "name": "parent_team_id",
            "in": "query",
            "description": "parent team  id",
            "required": false,
            "schema": { "type": "string", "example": "aO1RVNBSRC2klMMdco14_g" }
          },
          {
            "name": "team_name",
            "in": "query",
            "description": "the name of team",
            "required": false,
            "schema": { "type": "string", "example": "team1-1" }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "gPP6D7Oy6TUyGwpBBtICy03182P6nJp3yQ2"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "teams": {
                      "type": "array",
                      "items": {
                        "required": ["name", "team_id"],
                        "type": "object",
                        "properties": {
                          "team_id": {
                            "type": "string",
                            "description": "UUID of team",
                            "example": "aO1RVNBSRC2klMMdco14_g"
                          },
                          "name": {
                            "type": "string",
                            "description": "team name",
                            "example": "level 1-10"
                          },
                          "description": {
                            "type": "string",
                            "description": "team description",
                            "example": "level 1-10"
                          },
                          "type": {
                            "type": "string",
                            "description": "the structure type of team",
                            "example": "hierarchical team",
                            "enum": ["flat team", "hierarchical team"]
                          },
                          "member_size": {
                            "type": "integer",
                            "description": "team member size",
                            "example": 1
                          },
                          "supervisor_size": {
                            "type": "integer",
                            "description": "team admin size",
                            "example": 1
                          },
                          "leaf": {
                            "type": "boolean",
                            "description": "If this flag is true, it means this team has no child teams.",
                            "example": true
                          },
                          "parent_teams": {
                            "type": "array",
                            "description": "This field will only be returned when you enter a search key. The parent teams are all the parent nodes of the hit teams, these team nodes have been sorted, from the upper parent node to the root node.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "team_id": {
                                  "type": "string",
                                  "description": "UUID of team",
                                  "example": "jeazIFbXSKm4E65_cxxQzA"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "team name",
                                  "example": "level 1"
                                }
                              },
                              "description": "element of array"
                            }
                          }
                        }
                      }
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.",
                      "example": "gPP6D7Oy6TUyGwpBBtICy03182P6nJp3yQ2"
                    },
                    "page_size": {
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `300` <br>\n The next page token is invalid or expired. <br> <br>\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized  \n\n **Error Code:** `30031004` <br>\n Invalid or expired token <br> <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `5001` <br>\n Access is denied <br> <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `0` <br>\n 404 Route Not Found <br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "iq_team:read:admin",
              "iq_team:read",
              "zra:read:team_list:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "Team-2024-Jun",
          "x-permissions": [],
          "x-macro-scopes": ["iq_team:read:admin", "iq_team:read"],
          "x-granular-scopes": ["zra:read:team_list:admin"]
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "openapi_authorization": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      },
      "openapi_oauth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/",
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {
              "account:read:admin": "account:read:admin",
              "account:write:admin": "account:write:admin",
              "iq_account:read:admin": "iq_account:read:admin",
              "zra:read:indicator": "zra:read:indicator",
              "zra:read:indicator:admin": "zra:read:indicator:admin",
              "iq_conversation:read": "iq_conversation:read",
              "iq_conversation:write": "iq_conversation:write",
              "iq_conversation:read:admin": "iq_conversation:read:admin",
              "iq_conversation:write:admin": "iq_conversation:write:admin",
              "zra:read:list_conversations": "zra:read:list_conversations",
              "zra:read:list_conversations:admin": "zra:read:list_conversations:admin",
              "zra:write:conversation": "zra:write:conversation",
              "zra:write:conversation:admin": "zra:write:conversation:admin",
              "zra:read:conversations:admin": "zra:read:conversations:admin",
              "zra:read:conversations": "zra:read:conversations",
              "zra:delete:conversations": "zra:delete:conversations",
              "zra:delete:conversations:admin": "zra:delete:conversations:admin",
              "iq_comment:read": "iq_comment:read",
              "iq_comment:write": "iq_comment:write",
              "iq_comment:read:admin": "iq_comment:read:admin",
              "iq_comment:write:admin": "iq_comment:write:admin",
              "zra:read:list_conversation_comments": "zra:read:list_conversation_comments",
              "zra:read:list_conversation_comments:admin": "zra:read:list_conversation_comments:admin",
              "zra:write:conversation_comment": "zra:write:conversation_comment",
              "zra:write:conversation_comment:admin": "zra:write:conversation_comment:admin",
              "zra:delete:conversation_comment": "zra:delete:conversation_comment",
              "zra:delete:conversation_comment:admin": "zra:delete:conversation_comment:admin",
              "zra:update:conversation_comment": "zra:update:conversation_comment",
              "zra:update:conversation_comment:admin": "zra:update:conversation_comment:admin",
              "zra:read:conversation_analysis": "zra:read:conversation_analysis",
              "zra:read:conversation_analysis:admin": "zra:read:conversation_analysis:admin",
              "zra:read:conversation_participants": "zra:read:conversation_participants",
              "zra:read:conversation_participants:admin": "zra:read:conversation_participants:admin",
              "iq_coaching:read:admin": "iq_coaching:read:admin",
              "iq_coaching:read": "iq_coaching:read",
              "zra:read:conversation_scorecards": "zra:read:conversation_scorecards",
              "zra:read:conversation_scorecards:admin": "zra:read:conversation_scorecards:admin",
              "zra:update:conversation_host": "zra:update:conversation_host",
              "zra:update:conversation_host:admin": "zra:update:conversation_host:admin",
              "zra:write:file": "zra:write:file",
              "zra:write:file:admin": "zra:write:file:admin",
              "iq_playlist:read": "iq_playlist:read",
              "iq_playlist:read:admin": "iq_playlist:read:admin",
              "zra:read:list_conversation_playlists": "zra:read:list_conversation_playlists",
              "iq_deal:read": "iq_deal:read",
              "iq_deal:read:admin": "iq_deal:read:admin",
              "iq_deal:write": "iq_deal:write",
              "iq_deal:write:admin": "iq_deal:write:admin",
              "zra:read:list_deals": "zra:read:list_deals",
              "zra:read:list_deals:admin": "zra:read:list_deals:admin",
              "zra:read:deal": "zra:read:deal",
              "zra:read:deal:admin": "zra:read:deal:admin",
              "zra:delete:deal_activity": "zra:delete:deal_activity",
              "zra:delete:deal_activity:admin": "zra:delete:deal_activity:admin",
              "zra:read:list_deal_activities": "zra:read:list_deal_activities",
              "zra:read:list_deal_activities:admin": "zra:read:list_deal_activities:admin",
              "iq_team:read": "iq_team:read",
              "iq_team:read:admin": "iq_team:read:admin",
              "iq_team:write:admin": "iq_team:write:admin",
              "zra:write:team:admin": "zra:write:team:admin",
              "zra:delete:team:admin": "zra:delete:team:admin",
              "zra:read:team:admin": "zra:read:team:admin",
              "zra:write:team_manages:admin": "zra:write:team_manages:admin",
              "zra:delete:team_managers:admin": "zra:delete:team_managers:admin",
              "zra:write:team_members:admin": "zra:write:team_members:admin",
              "zra:delete:team_members:admin": "zra:delete:team_members:admin",
              "zra:read:team_list:admin": "zra:read:team_list:admin"
            }
          }
        }
      }
    }
  }
}
