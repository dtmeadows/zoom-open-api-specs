{
  "openapi": "3.0.0",
  "info": {
    "title": "Zoom Contact Center API",
    "description": "Contact Center",
    "termsOfService": "https://zoom.us/docs/en-us/zoom_api_license_and_tou.html",
    "contact": {
      "name": "Zoom Developers",
      "url": "https://developer.zoom.us/"
    },
    "version": "2"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "https://swagger.io"
  },
  "servers": [
    {
      "url": "https://api.zoom.us/v2"
    }
  ],
  "paths": {
    "/contact_center/address_books": {
      "get": {
        "tags": [
          "Address Books"
        ],
        "summary": "List address books",
        "description": "Use this API to return all address books. \n\n \n\n**Scopes:** `contact_center_contact:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_address_books:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listAddressBooks",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "unit_id",
            "in": "query",
            "description": "The address book unit's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Address books list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "address_books": {
                      "type": "array",
                      "description": "Information about the address books.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address_book_id": {
                            "type": "string",
                            "description": "The address book's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "address_book_name": {
                            "type": "string",
                            "description": "The address book's name.",
                            "example": "Address Book"
                          },
                          "address_book_description": {
                            "type": "string",
                            "description": "The address book's description.",
                            "example": "This is an address book."
                          },
                          "total_contacts": {
                            "type": "integer",
                            "description": "The address book's total number of contacts.",
                            "example": 30
                          },
                          "unit_id": {
                            "type": "string",
                            "description": "The address book unit's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "unit_name": {
                            "type": "string",
                            "description": "The address book unit's name.",
                            "example": "Unit"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `1902` <br>\nThe \"unit_id\" field cannot be an empty value.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:read:admin",
              "contact_center:read:list_address_books:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_address_books:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Address Books"
        ],
        "summary": "Create an address book",
        "description": "Use this API to create an [address book](https://support.zoom.us/hc/en-us/articles/4471544949389). An address book is a collection of consumer information like display names, phone numbers, and locations. \n\n \n\n**Scopes:** `contact_center_contact:write:admin`\n\n**Granular Scopes:** `contact_center:write:address_book:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "createAddressBook",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unit_id": {
                    "type": "string",
                    "description": "The address book's unit ID.",
                    "example": "zeYjXoDOS_eV1QmTpj63PQ"
                  },
                  "address_book_name": {
                    "type": "string",
                    "description": "The address book's name.",
                    "example": "Address Book"
                  },
                  "address_book_description": {
                    "type": "string",
                    "description": "The address book's description.",
                    "example": "This is an address book."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \n Address book created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address_book_id": {
                      "type": "string",
                      "description": "The address book's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "address_book_name": {
                      "type": "string",
                      "description": "The address book's name.",
                      "example": "Address Book"
                    },
                    "address_book_description": {
                      "type": "string",
                      "description": "The address book's description.",
                      "example": "This is an address book."
                    },
                    "unit_id": {
                      "type": "string",
                      "description": "The address book unit's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "unit_name": {
                      "type": "string",
                      "description": "The address book unit's name.",
                      "example": "Unit"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `1902` <br>\nThe \"unit_id\" field cannot be an empty value.\n\n**Error Code:** `1903` <br>\nThe \"address_book_name\" field cannot be an empty value.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:write:admin",
              "contact_center:write:address_book:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:address_book:admin"
          ]
        }
      }
    },
    "/contact_center/address_books/units": {
      "get": {
        "tags": [
          "Address Books"
        ],
        "summary": "List address book units",
        "description": "Use this API to return all address book units. \n\n \n\n**Scopes:** `contact_center_contact:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_address_book_units:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listUnits",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Units list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "units": {
                      "type": "array",
                      "description": "Information about the address book units.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "unit_id": {
                            "type": "string",
                            "description": "The address book unit's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "unit_name": {
                            "type": "string",
                            "description": "The address book unit's name.",
                            "example": "Example"
                          },
                          "unit_description": {
                            "type": "string",
                            "description": "The address book unit's description.",
                            "example": "This is a unit description."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:read:admin",
              "contact_center:read:list_address_book_units:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_address_book_units:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Address Books"
        ],
        "summary": "Create an address book unit",
        "description": "Use this API to create an [address book unit](https://support.zoom.us/hc/en-us/articles/4471495629837-Managing-address-book-units). Admins can use address book units to organize several [address books](https://support.zoom.us/hc/en-us/articles/4471544949389#:~:text=An%20address%20book%20is%20a%20collection%20of%20consumer%20information%20like%20display%20names%2C%20phone%20numbers%2C%20and%20locations.). \n\n \n\n**Scopes:** `contact_center_contact:write:admin`\n\n**Granular Scopes:** `contact_center:write:address_book_unit:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "createUnit",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unit_name": {
                    "type": "string",
                    "description": "The address book unit's name.",
                    "example": "Example"
                  },
                  "unit_description": {
                    "type": "string",
                    "description": "The address book unit's description.",
                    "example": "This is a unit."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \n Unit created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unit_id": {
                      "type": "string",
                      "description": "The address book unit's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "unit_name": {
                      "type": "string",
                      "description": "The address book unit's name.",
                      "example": "Example"
                    },
                    "unit_description": {
                      "type": "string",
                      "description": "The address book unit's description.",
                      "example": "This is a unit."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:write:admin",
              "contact_center:write:address_book_unit:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:address_book_unit:admin"
          ]
        }
      }
    },
    "/contact_center/address_books/units/{unitId}": {
      "get": {
        "tags": [
          "Address Books"
        ],
        "summary": "Get an address book unit",
        "description": "Use this API to get information about an address book unit. \n\n \n\n**Scopes:** `contact_center_contact:read:admin`\n\n**Granular Scopes:** `contact_center:read:address_book_unit:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The address book unit's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Unit returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unit_id": {
                      "type": "string",
                      "description": "The address book unit's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "unit_name": {
                      "type": "string",
                      "description": "The address book unit's name.",
                      "example": "Example"
                    },
                    "unit_description": {
                      "type": "string",
                      "description": "The address book unit's description.",
                      "example": "This is a unit description."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nUnit does not exist: $unitId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:read:admin",
              "contact_center:read:address_book_unit:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:address_book_unit:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Address Books"
        ],
        "summary": "Delete an address book unit",
        "description": "Use this API to delete an address book unit. \n\n \n\n**Scopes:** `contact_center_contact:write:admin`\n\n**Granular Scopes:** `contact_center:delete:address_book_unit:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The address book unit's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n Unit deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nUnit does not exist: $unitId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:write:admin",
              "contact_center:delete:address_book_unit:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:address_book_unit:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Address Books"
        ],
        "summary": "Update an address book unit",
        "description": "Use this API to update an address book unit. \n\n \n\n**Scopes:** `contact_center_contact:write:admin`\n\n**Granular Scopes:** `contact_center:update:address_book_unit:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "updateUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The address book unit's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unit_name": {
                    "type": "string",
                    "description": "The address book unit's name.",
                    "example": "example"
                  },
                  "unit_description": {
                    "type": "string",
                    "description": "The address book unit's description.",
                    "example": "This is a Demo Unit."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n Unit updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nUnit does not exist: $unitId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:write:admin",
              "contact_center:update:address_book_unit:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:address_book_unit:admin"
          ]
        }
      }
    },
    "/contact_center/address_books/{addressBookId}": {
      "get": {
        "tags": [
          "Address Books"
        ],
        "summary": "Get an address book",
        "description": "Use this API to get information about an address book. \n\n \n\n**Scopes:** `contact_center_contact:read:admin`\n\n**Granular Scopes:** `contact_center:read:address_book:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getAddressBook",
        "parameters": [
          {
            "name": "addressBookId",
            "in": "path",
            "description": "The address book's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Address book list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address_book_id": {
                      "type": "string",
                      "description": "The address book's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "address_book_name": {
                      "type": "string",
                      "description": "The address book's name.",
                      "example": "Address Book"
                    },
                    "address_book_description": {
                      "type": "string",
                      "description": "The address book's description.",
                      "example": "This is an address book."
                    },
                    "total_contacts": {
                      "type": "integer",
                      "description": "The address book's total number of contacts.",
                      "example": 30
                    },
                    "unit_id": {
                      "type": "string",
                      "description": "The address book unit's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "unit_name": {
                      "type": "string",
                      "description": "The address book unit's name.",
                      "example": "Unit"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nAddress book does not exist: $addressBookId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:read:admin",
              "contact_center:read:address_book:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:address_book:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Address Books"
        ],
        "summary": "Delete an address book",
        "description": "Use this API to delete an address book. \n\n \n\n**Scopes:** `contact_center_contact:write:admin`\n\n**Granular Scopes:** `contact_center:delete:address_book:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteAddressBook",
        "parameters": [
          {
            "name": "addressBookId",
            "in": "path",
            "description": "The address book's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n Address Book deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nAddress book does not exist: $addressBookId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:write:admin",
              "contact_center:delete:address_book:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:address_book:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Address Books"
        ],
        "summary": "Update an address book",
        "description": "Use this API to update an address book's information. \n\n \n\n**Scopes:** `contact_center_contact:write:admin`\n\n**Granular Scopes:** `contact_center:update:address_book:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "updateAddressBook",
        "parameters": [
          {
            "name": "addressBookId",
            "in": "path",
            "description": "The address book's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address_book_name": {
                    "type": "string",
                    "description": "The address book's name.",
                    "example": "example"
                  },
                  "address_book_description": {
                    "type": "string",
                    "description": "The address book's description.",
                    "example": "This is a Demo Address Book."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n Address book updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nAddress book does not exist: $addressBookId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:write:admin",
              "contact_center:update:address_book:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:address_book:admin"
          ]
        }
      }
    },
    "/contact_center/address_books/{addressBookId}/contacts": {
      "get": {
        "tags": [
          "Address Books"
        ],
        "summary": "List address book contacts",
        "description": "Returns all contacts in an address book.\n\n**Scopes:** `contact_center_contact:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_address_book_contacts:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listContacts",
        "parameters": [
          {
            "name": "addressBookId",
            "in": "path",
            "description": "The address book's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "emails",
            "in": "query",
            "description": "The contact's email address. Multiple emails can be searched. Only an exact match is supported. Accomodates a maximum of 10 emails.",
            "required": false,
            "schema": {
              "type": "array",
              "example": [
                "user@example.com"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "phone_numbers",
            "in": "query",
            "description": "The contact's phone number. Multiple phone numbers can be searched, Only an exact match is supported. Accomodates a maximum of 10 phone numbers.",
            "required": false,
            "schema": {
              "type": "array",
              "example": [
                "+12048002447"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Contacts list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "contacts": {
                      "type": "array",
                      "description": "Information about the contacts.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contact_id": {
                            "type": "string",
                            "description": "The contact's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The contact's name.",
                            "example": "Jill Chill"
                          },
                          "first_name": {
                            "type": "string",
                            "description": "The contact's first name.",
                            "example": "Jill"
                          },
                          "last_name": {
                            "type": "string",
                            "description": "The contact's last name.",
                            "example": "Chill"
                          },
                          "phone_numbers": {
                            "type": "array",
                            "description": "The contact's phone numbers.",
                            "items": {
                              "type": "string",
                              "example": "+12048002447"
                            }
                          },
                          "emails": {
                            "type": "array",
                            "description": "The contact's email addresses.",
                            "items": {
                              "type": "string",
                              "format": "email",
                              "example": "user@example.com"
                            }
                          },
                          "location": {
                            "type": "string",
                            "description": "The contact's location.",
                            "example": "San Jose"
                          },
                          "account_number": {
                            "type": "string",
                            "description": "The contact's account number.",
                            "example": "112233445566"
                          },
                          "company": {
                            "type": "string",
                            "description": "The contact's company.",
                            "example": "Example"
                          },
                          "role": {
                            "type": "string",
                            "description": "The contact's role.",
                            "example": "Agent"
                          },
                          "address_book_id": {
                            "type": "string",
                            "description": "The address book's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "address_book_name": {
                            "type": "string",
                            "description": "The address book's name.",
                            "example": "Address Book"
                          },
                          "variables": {
                            "type": "array",
                            "description": "Information about address book variables.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "variable_group_id": {
                                  "type": "string",
                                  "description": "The variable group's ID.",
                                  "example": "afececcd-0c9f-48de-9d19-0c84e8bdfeca"
                                },
                                "variable_id": {
                                  "type": "string",
                                  "description": "The variable's ID.",
                                  "example": "zeYjXoDOS_eV1QmTpj63PQ"
                                },
                                "variable_name": {
                                  "type": "string",
                                  "description": "The variable's name.",
                                  "example": "variable demo name"
                                },
                                "data_type": {
                                  "type": "string",
                                  "description": "The variable's data type.",
                                  "example": "string",
                                  "enum": [
                                    "string",
                                    "boolean"
                                  ]
                                },
                                "variable_value": {
                                  "type": "string",
                                  "description": "The variable's value.",
                                  "example": "variable value demo"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:read:admin",
              "contact_center:read:list_address_book_contacts:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.12.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_contact:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_address_book_contacts:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Address Books"
        ],
        "summary": "Create an address book contact",
        "description": "Use this API to create a new contact in an [address book](https://support.zoom.us/hc/en-us/articles/4471544949389). During an active engagement, the Zoom desktop client will display information from the address book if that customer is a contact in the address book. If the consumer is not in the address book, agents can add a new contact and choose which address book the contact belongs to. \n\n \n\n**Scopes:** `contact_center_contact:write:admin`\n\n**Granular Scopes:** `contact_center:write:address_book_contact:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "createContact",
        "parameters": [
          {
            "name": "addressBookId",
            "in": "path",
            "description": "The address book's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "email",
                  "phone_numbers"
                ],
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "description": "The contact's display name.",
                    "example": "Jill Chill"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "The contact's first name.",
                    "example": "Jill"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The contact's last name.",
                    "example": "Chill"
                  },
                  "phone_numbers": {
                    "type": "array",
                    "description": "The contact's phone numbers. You must provide this field and/or the `email` field when you create a contact.",
                    "items": {
                      "type": "string",
                      "example": "+12048002447"
                    }
                  },
                  "emails": {
                    "type": "array",
                    "description": "The contact's email addresses. You must provide this field and/or the `phone_numbers` field when you create a contact.",
                    "items": {
                      "type": "string",
                      "format": "email",
                      "example": "user@example.com"
                    }
                  },
                  "location": {
                    "type": "string",
                    "description": "The contact's location.",
                    "example": "San Jose"
                  },
                  "account_number": {
                    "type": "string",
                    "description": "The contact's account number.",
                    "example": "112233445566"
                  },
                  "company": {
                    "type": "string",
                    "description": "The contact's company.",
                    "example": "Example"
                  },
                  "role": {
                    "type": "string",
                    "description": "The contact's role.",
                    "example": "Agent"
                  },
                  "variables": {
                    "type": "array",
                    "description": "Information about address book variables.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "variable_id": {
                          "type": "string",
                          "description": "The variable's ID.",
                          "example": "zeYjXoDOS_eV1QmTpj63PQ"
                        },
                        "variable_value": {
                          "type": "string",
                          "description": "The variable's value.",
                          "example": "variable value demo"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \n Contact created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact_id": {
                      "type": "string",
                      "description": "The contact's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The contact's name.",
                      "example": "Jill Chill"
                    },
                    "first_name": {
                      "type": "string",
                      "description": "The contact's first name.",
                      "example": "Jill"
                    },
                    "last_name": {
                      "type": "string",
                      "description": "The contact's last name.",
                      "example": "Chill"
                    },
                    "phone_numbers": {
                      "type": "array",
                      "description": "The contact's phone numbers.",
                      "items": {
                        "type": "string",
                        "example": "+12048002447"
                      }
                    },
                    "emails": {
                      "type": "array",
                      "description": "The contact's email addresses.",
                      "items": {
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                      }
                    },
                    "location": {
                      "type": "string",
                      "description": "The contact's location.",
                      "example": "San Jose"
                    },
                    "account_number": {
                      "type": "string",
                      "description": "The contact's account number.",
                      "example": "112233445566"
                    },
                    "company": {
                      "type": "string",
                      "description": "The contact's company.",
                      "example": "Example"
                    },
                    "role": {
                      "type": "string",
                      "description": "The contact's role.",
                      "example": "Agent"
                    },
                    "address_book_id": {
                      "type": "string",
                      "description": "The address book's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "address_book_name": {
                      "type": "string",
                      "description": "The address book's name.",
                      "example": "Address Book"
                    },
                    "variables": {
                      "type": "array",
                      "description": "Information about address book variables.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "variable_group_id": {
                            "type": "string",
                            "description": "The variable group's ID.",
                            "example": "afececcd-0c9f-48de-9d19-0c84e8bdfeca"
                          },
                          "variable_id": {
                            "type": "string",
                            "description": "The variable's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "variable_name": {
                            "type": "string",
                            "description": "The variable's name.",
                            "example": "variable demo name"
                          },
                          "data_type": {
                            "type": "string",
                            "description": "The variable's data type.",
                            "example": "string",
                            "enum": [
                              "string",
                              "boolean"
                            ]
                          },
                          "variable_value": {
                            "type": "string",
                            "description": "The variable's value.",
                            "example": "variable value demo"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `2102` <br>\nThe \"email\" and/or \"phone_numbers\" field cannot be an empty value.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:write:admin",
              "contact_center:write:address_book_contact:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-macro-scopes": [
            "contact_center_contact:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:address_book_contact:admin"
          ]
        }
      }
    },
    "/contact_center/address_books/{addressBookId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "Address Books"
        ],
        "summary": "Get an address book contact",
        "description": "Use this API to get information about an address book's contact. \n\n \n\n**Scopes:** `contact_center_contact:read:admin`\n\n**Granular Scopes:** `contact_center:read:address_book_contact:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getContact",
        "parameters": [
          {
            "name": "addressBookId",
            "in": "path",
            "description": "The address book's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "The contact's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Contact returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact_id": {
                      "type": "string",
                      "description": "The contact's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The contact's name.",
                      "example": "Jill Chill"
                    },
                    "first_name": {
                      "type": "string",
                      "description": "The contact's first name.",
                      "example": "Jill"
                    },
                    "last_name": {
                      "type": "string",
                      "description": "The contact's last name.",
                      "example": "Chill"
                    },
                    "phone_numbers": {
                      "type": "array",
                      "description": "The contact's phone numbers.",
                      "items": {
                        "type": "string",
                        "example": "+12048002447"
                      }
                    },
                    "emails": {
                      "type": "array",
                      "description": "The contact's email addresses.",
                      "items": {
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                      }
                    },
                    "location": {
                      "type": "string",
                      "description": "The contact's location.",
                      "example": "San Jose"
                    },
                    "account_number": {
                      "type": "string",
                      "description": "The contact's account number.",
                      "example": "112233445566"
                    },
                    "company": {
                      "type": "string",
                      "description": "The contact's company.",
                      "example": "Example"
                    },
                    "role": {
                      "type": "string",
                      "description": "The contact's role.",
                      "example": "Agent"
                    },
                    "address_book_id": {
                      "type": "string",
                      "description": "The address book's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "address_book_name": {
                      "type": "string",
                      "description": "The address book's name.",
                      "example": "Address Book"
                    },
                    "variables": {
                      "type": "array",
                      "description": "Information about address book variables.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "variable_group_id": {
                            "type": "string",
                            "description": "The variable group's ID.",
                            "example": "afececcd-0c9f-48de-9d19-0c84e8bdfeca"
                          },
                          "variable_id": {
                            "type": "string",
                            "description": "The variable's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "variable_name": {
                            "type": "string",
                            "description": "The variable's name.",
                            "example": "variable demo name"
                          },
                          "data_type": {
                            "type": "string",
                            "description": "The variable's data type.",
                            "example": "string",
                            "enum": [
                              "string",
                              "boolean"
                            ]
                          },
                          "variable_value": {
                            "type": "string",
                            "description": "The variable's value.",
                            "example": "variable value demo"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nContact does not exist: $contactId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:read:admin",
              "contact_center:read:address_book_contact:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-macro-scopes": [
            "contact_center_contact:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:address_book_contact:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Address Books"
        ],
        "summary": "Delete an address book contact",
        "description": "Use this API to delete an address book's contact. \n\n \n\n**Scopes:** `contact_center_contact:write:admin`\n\n**Granular Scopes:** `contact_center:delete:address_book_contact:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "contactDelete",
        "parameters": [
          {
            "name": "addressBookId",
            "in": "path",
            "description": "The address book's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "The contact's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n Contact deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nContact does not exist: $contactId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:write:admin",
              "contact_center:delete:address_book_contact:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_contact:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:address_book_contact:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Address Books"
        ],
        "summary": "Update an address book contact",
        "description": "Use this API to update an address book's contact. \n\n \n\n**Scopes:** `contact_center_contact:write:admin`\n\n**Granular Scopes:** `contact_center:update:address_book_contact:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "updateContact",
        "parameters": [
          {
            "name": "addressBookId",
            "in": "path",
            "description": "The address book's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "The contact's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "description": "AddressBook",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "email",
                  "phone_numbers"
                ],
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "description": "The contact's display name.",
                    "example": "Jill Chill"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "The contact's first name.",
                    "example": "Jill"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The contact's last name.",
                    "example": "Chill"
                  },
                  "phone_numbers": {
                    "type": "array",
                    "description": "The contact's phone numbers. You must provide this field and/or the `email` field when you create a contact.",
                    "items": {
                      "type": "string",
                      "example": "+12048002447"
                    }
                  },
                  "emails": {
                    "type": "array",
                    "description": "The contact's email addresses. You must provide this field and/or the `phone_numbers` field when you create a contact.",
                    "items": {
                      "type": "string",
                      "format": "email",
                      "example": "user@example.com"
                    }
                  },
                  "location": {
                    "type": "string",
                    "description": "The contact's location.",
                    "example": "San Jose"
                  },
                  "account_number": {
                    "type": "string",
                    "description": "The contact's account number.",
                    "example": "112233445566"
                  },
                  "company": {
                    "type": "string",
                    "description": "The contact's company.",
                    "example": "Example"
                  },
                  "role": {
                    "type": "string",
                    "description": "The contact's role.",
                    "example": "Agent"
                  },
                  "variables": {
                    "type": "array",
                    "description": "Information about address book variables.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "variable_id": {
                          "type": "string",
                          "description": "The variable's ID.",
                          "example": "zeYjXoDOS_eV1QmTpj63PQ"
                        },
                        "variable_value": {
                          "type": "string",
                          "description": "The variable's value.",
                          "example": "variable value demo"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \n Contact updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nContact does not exist: $contactId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_contact:write:admin",
              "contact_center:update:address_book_contact:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-macro-scopes": [
            "contact_center_contact:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:address_book_contact:admin"
          ]
        }
      }
    },
    "/contact_center/system_statuses": {
      "get": {
        "tags": [
          "Agent Statuses"
        ],
        "summary": "List system statuses",
        "description": "Get a list of system statuses. Admins can create system statuses, such as **Maintenance**.  \n\n**Scopes:** `contact_center_preference:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_system_statues:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listSystemStatus",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "status_category",
            "in": "query",
            "description": "The status's category.\n\n* `agent_status` - User's system statuses.\n\n* `queue_opt_out_and_not_ready_status` - User's **Queue Opt-Out** and **Not Ready** reasons. **Not Ready** reasons are referenced by field `sub_status_name` in the Users APIs, such as [List users' profiles](https://developers.zoom.us/docs/contact-center/apis/#operation/users).",
            "required": false,
            "schema": {
              "type": "string",
              "example": "agent_status",
              "enum": [
                "agent_status",
                "queue_opt_out_and_not_ready_status"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nSystem statuses returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "statuses": {
                      "type": "array",
                      "description": "Information about the statuses.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status_id": {
                            "type": "string",
                            "description": "The status ID.",
                            "example": "1"
                          },
                          "status_name": {
                            "type": "string",
                            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline. \n* Ready. \n* Not Ready. \n* Occupied. \n* A custom user status, like **Lunch**.",
                            "example": "Lunch",
                            "enum": [
                              "Offline",
                              "Ready",
                              "Not Ready",
                              "Occupied",
                              "string"
                            ]
                          },
                          "status_type": {
                            "type": "string",
                            "description": "The status's type, used to determine default or custom status.",
                            "example": "default",
                            "enum": [
                              "default",
                              "custom"
                            ]
                          },
                          "status_category": {
                            "type": "string",
                            "description": "The status's category.\n\n* `agent_status` - User's system statuses.\n\n* `queue_opt_out_and_not_ready_status` - User's **Queue Opt-Out** and **Not Ready** reasons. **Not Ready** reasons are referenced by field `sub_status_name` in the Users APIs, such as [List users' profiles](https://developers.zoom.us/docs/contact-center/apis/#operation/users).",
                            "example": "agent_status",
                            "enum": [
                              "agent_status",
                              "queue_opt_out_and_not_ready_status"
                            ]
                          },
                          "enable": {
                            "type": "boolean",
                            "description": "Only applicable to a status with the `queue_opt_out_and_not_ready_status` category. If enabled, the agent can set the status as a sub-status for **Not Ready** or **Queue Opt Out**.",
                            "example": true
                          },
                          "status_assigned_queues": {
                            "type": "array",
                            "description": "Information about the queues that are using the 'Not Ready' or opt out of queue status.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Queue ID.",
                                  "example": "123"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "Queue name.",
                                  "example": "customer queue"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_preference:read:admin",
              "contact_center:read:list_system_statues:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.2.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_preference:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_system_statues:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Agent Statuses"
        ],
        "summary": "Create a system status",
        "description": "Create custom statuses for the `agent_status` and `queue_opt_out_and_not_ready_status` categories. \n\n \n\n**Scopes:** `contact_center_preference:write:admin`\n\n**Granular Scopes:** `contact_center:write:system_status:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createSystemStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status_name": {
                    "type": "string",
                    "description": "The status's name.",
                    "example": "Lunch"
                  },
                  "status_category": {
                    "type": "string",
                    "description": "The status's category.\n\n* `agent_status` - User's system statuses.\n\n* `queue_opt_out_and_not_ready_status` - User's **Queue Opt-Out** and **Not Ready** reasons. **Not Ready** reasons are referenced by field `sub_status_name` in the **Users** APIs, such as [List users' profiles](https://developers.zoom.us/docs/contact-center/apis/#operation/users).",
                    "example": "agent_status",
                    "enum": [
                      "agent_status",
                      "queue_opt_out_and_not_ready_status"
                    ]
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Only applicable to a status with the `queue_opt_out_and_not_ready_status` category. If enabled, the agent can set a status as a sub-status for **Not Ready** or **Queue Opt Out**.",
                    "example": true,
                    "default": true
                  },
                  "status_assigned_queues": {
                    "type": "array",
                    "description": "Queues that the 'Not Ready' or opt out of queue status will be assigned to.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Queue ID.",
                          "example": "123"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "System status successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status_id": {
                      "type": "string",
                      "description": "The status ID.",
                      "example": "1"
                    },
                    "status_name": {
                      "type": "string",
                      "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, like **Lunch**.",
                      "example": "Lunch",
                      "enum": [
                        "Offline",
                        "Ready",
                        "Not Ready",
                        "Occupied"
                      ]
                    },
                    "status_type": {
                      "type": "string",
                      "description": "The status's type, used to determine default or custom status.",
                      "example": "default",
                      "enum": [
                        "default",
                        "custom"
                      ]
                    },
                    "status_category": {
                      "type": "string",
                      "description": "The status's category.\n\n* `agent_status` - User's system statuses.\n\n* `queue_opt_out_and_not_ready_status` - User's **Queue Opt-Out** and **Not Ready** reasons. **Not Ready** reasons are referenced by field `sub_status_name` in the **Users** APIs, such as [List users' profiles](https://developers.zoom.us/docs/contact-center/apis/#operation/users).",
                      "example": "agent_status",
                      "enum": [
                        "agent_status",
                        "queue_opt_out_and_not_ready_status"
                      ]
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Only applicable to a status with the `queue_opt_out_and_not_ready_status` category. If enabled, the agent can set the status as a sub-status for **Not Ready** or **Queue Opt Out**.",
                      "example": true
                    }
                  },
                  "description": "Information about the user's status."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1105` <br>\n * Can't create more custom agent_status because there's a maximum of 15. <br>\n**Error Code:** `1106` <br>\n * Can't create more custom queue_opt_out_and_not_ready_status because there's a maximum of 15. <br>\n**Error Code:** `1107` <br>\n * Creating the status. Please wait a moment. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1104` <br>\n Status category does not exist: $status_category. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_preference:write:admin",
              "contact_center:write:system_status:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.2.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_preference:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:system_status:admin"
          ]
        }
      }
    },
    "/contact_center/system_statuses/{statusId}": {
      "get": {
        "tags": [
          "Agent Statuses"
        ],
        "summary": "Get a system status",
        "description": "Get information about a system status. \n\n \n\n**Scopes:** `contact_center_preference:read:admin`\n\n**Granular Scopes:** `contact_center:read:system_status:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getAStatus",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "The status ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nSystem status returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status_id": {
                      "type": "string",
                      "description": "The status ID.",
                      "example": "1"
                    },
                    "status_name": {
                      "type": "string",
                      "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline. \n* Ready. \n* Not Ready. \n* Occupied. \n* A custom user status, like **Lunch**.",
                      "example": "Lunch",
                      "enum": [
                        "Offline",
                        "Ready",
                        "Not Ready",
                        "Occupied"
                      ]
                    },
                    "status_type": {
                      "type": "string",
                      "description": "The status's type, used to determine default or custom status.",
                      "example": "default",
                      "enum": [
                        "default",
                        "custom"
                      ]
                    },
                    "status_category": {
                      "type": "string",
                      "description": "The status's category.\n\n* `agent_status` - User's system statuses.\n\n* `queue_opt_out_and_not_ready_status` - User's **Queue Opt-Out** and **Not Ready** reasons. **Not Ready** reasons are referenced by field `sub_status_name` in the Users APIs, such as [List users' profiles](https://developers.zoom.us/docs/contact-center/apis/#operation/users).",
                      "example": "agent_status",
                      "enum": [
                        "agent_status",
                        "queue_opt_out_and_not_ready_status"
                      ]
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Only applicable to a status with the `queue_opt_out_and_not_ready_status` category. If enabled, the agent can set the status as a sub-status for **Not Ready** or **Queue Opt Out**.",
                      "example": true
                    },
                    "status_assigned_queues": {
                      "type": "array",
                      "description": "Information about the queues that are using the 'Not Ready' or opt out of queue status.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Queue ID.",
                            "example": "123"
                          },
                          "value": {
                            "type": "string",
                            "description": "Queue name.",
                            "example": "customer queue"
                          }
                        }
                      }
                    }
                  },
                  "description": "Information about the user's status."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1101` <br>\n Status does not exist: $statusId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_preference:read:admin",
              "contact_center:read:system_status:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.2.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_preference:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:system_status:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Agent Statuses"
        ],
        "summary": "Delete a system status",
        "description": "Delete a custom status for the agent_status and queue_opt_out_and_not_ready_status categories.\n\n**Scopes:** `contact_center_preference:write:admin`\n\n**Granular Scopes:** `contact_center:delete:system_status:admin`",
        "operationId": "deleteSystemStatus",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "The status ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSystem status deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `1108` <br>\n Status is default. Only custom statuses can be modified. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1101` <br>\n Status does not exist: $statusId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_preference:write:admin",
              "contact_center:delete:system_status:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.12.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_preference:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:system_status:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Agent Statuses"
        ],
        "summary": "Update a system status",
        "description": "Update a custom status for the `agent_status` and `queue_opt_out_and_not_ready_status` categories. \n\n \n\n**Scopes:** `contact_center_preference:write:admin`\n\n**Granular Scopes:** `contact_center:update:system_status:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateSystemStatus",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "The status ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status_name": {
                    "type": "string",
                    "description": "The status's name.",
                    "example": "Lunch"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Only applicable to a status with the `queue_opt_out_and_not_ready_status` category. If enabled, the agent can set the status as a sub-status for **Not Ready** or **Queue Opt Out**.",
                    "example": true,
                    "default": true
                  },
                  "status_assigned_queues": {
                    "type": "array",
                    "description": "Queues that the 'Not Ready' or opt out of queue status will be assigned to.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Queue ID.",
                          "example": "123"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nSystem status updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `300` <br>\n Parameter `status_name` is required. <br>\n**Error Code:** `1103` <br>\n The system status already exists. <br>\n**Error Code:** `1107` <br>\n Updating status. Please wait a moment. <br>\n**Error Code:** `1108` <br>\n Status is default. Only custom statuses can be modified. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1101` <br>\n Status does not exist: $statusId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_preference:write:admin",
              "contact_center:update:system_status:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.2.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_preference:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:system_status:admin"
          ]
        }
      }
    },
    "/contact_center/outbound_campaign/contact_lists": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "List campaign contact lists",
        "description": "List campaign contact lists.\n\n**Scopes:** `contact_center_outbound_campaign_contactlist:read:admin`\n\n**Granular Scopes:** `contact_center:read:outbound_campaign_contactlist:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listCampaignContactLists",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`     Campaign contact lists are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "contact_lists": {
                      "type": "array",
                      "description": "Array of contact lists.",
                      "items": {
                        "required": [
                          "contact_list_id",
                          "contact_list_name",
                          "contacts_phones"
                        ],
                        "type": "object",
                        "properties": {
                          "contact_list_id": {
                            "type": "string",
                            "description": "The campaign contact list's ID.",
                            "example": "MN2Dtcb2T-yT5CU3clN-AA"
                          },
                          "contact_list_name": {
                            "maxLength": 100,
                            "minLength": 1,
                            "type": "string",
                            "description": "The campaign contact list's name.",
                            "example": "Contact List"
                          },
                          "contact_list_description": {
                            "maxLength": 100,
                            "type": "string",
                            "description": "The campaign contact list's description.",
                            "example": "Description"
                          },
                          "contacts_count": {
                            "maximum": 100000,
                            "type": "integer",
                            "description": "Number of contacts in the contact list.",
                            "example": 1
                          }
                        },
                        "description": "Contact lists object"
                      }
                    }
                  },
                  "description": "Contact list items"
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contactlist:read:admin",
              "contact_center:read:outbound_campaign_contactlist:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contactlist:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:outbound_campaign_contactlist:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Create a campaign contact list",
        "description": "Create a campaign contact list. Supports only contact list, NOT Do Not Contact Lists\n\n**Scopes:** `contact_center_outbound_campaign_contactlist:write:admin`\n\n**Granular Scopes:** `contact_center:write:outbound_campaign_contactlist:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createCampaignContactList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "contact_list_name"
                ],
                "type": "object",
                "properties": {
                  "contact_list_name": {
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string",
                    "description": "The name of the contact list",
                    "example": "Contact List"
                  },
                  "contact_list_description": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Description of the contact list",
                    "example": "This is a description"
                  }
                },
                "description": "Campaign contact list object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`     Campaign contact list is created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact_list_id": {
                      "type": "string",
                      "description": "ID of the created contact list",
                      "example": "rfMoVPVYS3yjWJAzdOOlWA"
                    },
                    "contact_list_name": {
                      "type": "string",
                      "description": "Name of the contact list",
                      "example": "Contact List"
                    },
                    "contact_list_description": {
                      "type": "string",
                      "description": "Description of the contact list",
                      "example": "Description"
                    },
                    "contacts_count": {
                      "type": "integer",
                      "description": "Number of contacts",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `300` <br>\n Validation failed. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contactlist:write:admin",
              "contact_center:write:outbound_campaign_contactlist:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contactlist:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:outbound_campaign_contactlist:admin"
          ]
        }
      }
    },
    "/contact_center/outbound_campaign/contact_lists/{contactListId}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get a campaign contact list",
        "description": "Get a campaign contact list.\n\n**Scopes:** `contact_center_outbound_campaign_contactlist:read:admin`\n\n**Granular Scopes:** `contact_center:read:outbound_campaign_contactlist:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getCampaignContactList",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "Contact list ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MN2Dtcb2T-yT5CU3clN-AA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`    Campaign contact list is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "contact_list_id",
                    "contact_list_name"
                  ],
                  "type": "object",
                  "properties": {
                    "contact_list_id": {
                      "type": "string",
                      "description": "The campaign contact list's ID.",
                      "example": "MN2Dtcb2T-yT5CU3clN-AA"
                    },
                    "contact_list_name": {
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string",
                      "description": "The campaign contact list's name.",
                      "example": "Contact List"
                    },
                    "contact_list_description": {
                      "maxLength": 100,
                      "type": "string",
                      "description": "The campaign contact list's description.",
                      "example": "Description"
                    },
                    "contacts_count": {
                      "maximum": 100000,
                      "type": "integer",
                      "description": "Number of contacts in the contact list.",
                      "example": 1
                    }
                  },
                  "description": "Campaign contact list object."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5001` <br>\n Contact list is not found <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contactlist:read:admin",
              "contact_center:read:outbound_campaign_contactlist:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contactlist:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:outbound_campaign_contactlist:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Campaign"
        ],
        "summary": "Remove campaign contact list",
        "description": "Delete a campaign contact list\n\n**Scopes:** `contact_center_outbound_campaign_contactlist:write:admin`\n\n**Granular Scopes:** `contact_center:delete:outbound_campaign_contactlist:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteCampaignContactList",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`     Campaign contact list is removed."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5001` <br>\n Contact list not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contactlist:write:admin",
              "contact_center:delete:outbound_campaign_contactlist:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contactlist:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:outbound_campaign_contactlist:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Campaign"
        ],
        "summary": "Update campaign contact list",
        "description": "Update a campaign contact list\n\n**Scopes:** `contact_center_outbound_campaign_contactlist:write:admin`\n\n**Granular Scopes:** `contact_center:update:outbound_campaign_contactlist:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateCampaignContactList",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "Campaign contact list Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "07UQHRzvQ02R_o-l9pBB4w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contact_list_name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "The name of the campaign contact list",
                    "example": "New Name"
                  },
                  "contact_list_description": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Description for the campaign contact list",
                    "example": "New Description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`     Campaign contact list is updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `300` <br>\n Validation failed. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5001` <br>\n Contact list not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contactlist:write:admin",
              "contact_center:update:outbound_campaign_contactlist:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contactlist:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:outbound_campaign_contactlist:admin"
          ]
        }
      }
    },
    "/contact_center/outbound_campaign/contact_lists/{contactListId}/contacts": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "List a campaign contact list's contacts",
        "description": "List contacts on a campaign contact list.\n\n**Scopes:** `contact_center_outbound_campaign_contacts:read:admin`\n\n**Granular Scopes:** `contact_center:read:outbound_campaign_contacts:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listCampaignContactListContacts",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "Campaign contact list ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "rfMoVPVYS3yjWJAzdOOlWA"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`     Campaign contacts of contact list are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "contacts": {
                      "type": "array",
                      "description": "Array of contacts.",
                      "items": {
                        "required": [
                          "contact_display_name",
                          "contact_id",
                          "contact_phones"
                        ],
                        "type": "object",
                        "properties": {
                          "contact_id": {
                            "type": "string",
                            "example": "07UQHRzvQ02R_o-l9pBB4w"
                          },
                          "contact_display_name": {
                            "maxLength": 64,
                            "type": "string",
                            "description": "The contact's display name.",
                            "example": "Jill Chill"
                          },
                          "contact_first_name": {
                            "maxLength": 64,
                            "type": "string",
                            "description": "The contact's first name.",
                            "example": "Jill"
                          },
                          "contact_last_name": {
                            "maxLength": 64,
                            "type": "string",
                            "description": "The contact's last name.",
                            "example": "Chill"
                          },
                          "contact_phones": {
                            "maxItems": 5,
                            "type": "array",
                            "items": {
                              "required": [
                                "contact_phone_number",
                                "contact_phone_type"
                              ],
                              "type": "object",
                              "properties": {
                                "contact_phone_number": {
                                  "type": "string",
                                  "description": "Phone number, in E164 format.",
                                  "example": "+12345551100"
                                },
                                "contact_phone_type": {
                                  "type": "string",
                                  "description": "The phone's type.",
                                  "example": "Main",
                                  "enum": [
                                    "Main",
                                    "Home",
                                    "Work",
                                    "Mobile",
                                    "Other"
                                  ]
                                }
                              }
                            }
                          },
                          "contact_emails": {
                            "maxItems": 4,
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Array of emails",
                            "items": {
                              "type": "string",
                              "description": "Email of the contact",
                              "format": "email",
                              "example": "test@gmail.com"
                            }
                          },
                          "contact_location": {
                            "maxLength": 50,
                            "type": "string",
                            "description": "Location of the contact",
                            "example": "Location"
                          },
                          "contact_account_number": {
                            "maxLength": 50,
                            "type": "string",
                            "description": "Account number of the contact",
                            "example": "123"
                          },
                          "contact_company": {
                            "maxLength": 50,
                            "type": "string",
                            "description": "Company of the contact",
                            "example": "zoom"
                          },
                          "contact_role": {
                            "maxLength": 50,
                            "type": "string",
                            "description": "Role of the contact",
                            "example": "developer"
                          }
                        },
                        "description": "Contact object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contacts:read:admin",
              "contact_center:read:outbound_campaign_contacts:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contacts:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:outbound_campaign_contacts:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Create campaign contact list's contact",
        "description": "Add a new contact to a campaign contact list.\n\n**Scopes:** `contact_center_outbound_campaign_contacts:write:admin`\n\n**Granular Scopes:** `contact_center:write:outbound_campaign_contacts:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createCampaignContactListContact",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "Campaign Contact List",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MN2Dtcb2T-yT5CU3clN-AA"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "contact_display_name",
                  "contact_phones"
                ],
                "type": "object",
                "properties": {
                  "contact_display_name": {
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string",
                    "description": "The contact's display name.",
                    "example": "Display Name"
                  },
                  "contact_first_name": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The contact's first name.",
                    "example": "First Name"
                  },
                  "contact_last_name": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The contact's last name.",
                    "example": "Last Name"
                  },
                  "contact_phones": {
                    "type": "array",
                    "description": "Supports up to 5 phone numbers. Only one main or primary phone number is supported.",
                    "items": {
                      "required": [
                        "contact_phone_number",
                        "contact_phone_type"
                      ],
                      "type": "object",
                      "properties": {
                        "contact_phone_number": {
                          "type": "string",
                          "description": "Phone number in E164 format.",
                          "example": "+12345551100"
                        },
                        "contact_phone_type": {
                          "type": "string",
                          "description": "The phone's type.",
                          "example": "Main",
                          "enum": [
                            "Main",
                            "Work",
                            "Home",
                            "Mobile",
                            "Other"
                          ]
                        }
                      }
                    }
                  },
                  "contact_emails": {
                    "maxItems": 4,
                    "uniqueItems": true,
                    "type": "array",
                    "description": "Supports up to 4 emails, with a maximum of 1100 characters total.",
                    "items": {
                      "type": "string",
                      "description": "Email address",
                      "example": "test@gmail.com"
                    }
                  },
                  "contact_location": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "The contact's location.",
                    "example": "Location"
                  },
                  "contact_account_number": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "The contact's account number.",
                    "example": "111"
                  },
                  "contact_company": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "The contact's company",
                    "example": "zoom"
                  },
                  "contact_role": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "The contact's role.",
                    "example": "developer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201` New contact has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "contact_display_name",
                    "contact_id",
                    "contact_phones"
                  ],
                  "type": "object",
                  "properties": {
                    "contact_id": {
                      "type": "string",
                      "description": "The contact's ID.",
                      "example": "GgAOGeRFQOqJlphf3gqhqg"
                    },
                    "contact_display_name": {
                      "maxLength": 64,
                      "minLength": 1,
                      "type": "string",
                      "description": "The contact's display name.",
                      "example": "Jill Chill"
                    },
                    "contact_first_name": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "The contact's first name.",
                      "example": "Jill"
                    },
                    "contact_last_name": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "The contact's last name.",
                      "example": "Chill"
                    },
                    "contact_phones": {
                      "maxItems": 5,
                      "minItems": 1,
                      "type": "array",
                      "description": "Contact emails",
                      "items": {
                        "required": [
                          "contact_phone_number",
                          "contact_phone_type"
                        ],
                        "type": "object",
                        "properties": {
                          "contact_phone_number": {
                            "type": "string",
                            "description": "The phone number, in E164 format.",
                            "example": "+12345551100"
                          },
                          "contact_phone_type": {
                            "type": "string",
                            "description": "Phone type",
                            "example": "Main",
                            "enum": [
                              "Main",
                              "Work",
                              "Home",
                              "Mobile",
                              "Other"
                            ]
                          }
                        }
                      }
                    },
                    "contact_emails": {
                      "maxItems": 4,
                      "uniqueItems": true,
                      "type": "array",
                      "description": "The contact's email addresses.",
                      "items": {
                        "type": "string",
                        "description": "Email address",
                        "format": "email",
                        "example": "jillchill@example.com"
                      }
                    },
                    "contact_location": {
                      "maxLength": 50,
                      "type": "string",
                      "description": "The contact's location.",
                      "example": "Location"
                    },
                    "contact_account_number": {
                      "maxLength": 50,
                      "type": "string",
                      "description": "Account number",
                      "example": "111"
                    },
                    "contact_company": {
                      "maxLength": 50,
                      "type": "string",
                      "description": "Contact company",
                      "example": "zoom"
                    },
                    "contact_role": {
                      "maxLength": 50,
                      "type": "string",
                      "description": "Contact role",
                      "example": "developer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `300` <br>\n Validation Failed. <br>\n**Error Code:** `5003` <br>\n Contact already exists. <br>\n**Error Code:** `5004` <br>\n Reached limit of contacts per contact list. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5001` <br>\n Contact list is not found <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contacts:write:admin",
              "contact_center:write:outbound_campaign_contacts:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contacts:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:outbound_campaign_contacts:admin"
          ]
        }
      }
    },
    "/contact_center/outbound_campaign/contact_lists/{contactListId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get a campaign contact list's contact",
        "description": "Get a contact on a campaign contact list.\n\n**Scopes:** `contact_center_outbound_campaign_contacts:read:admin`\n\n**Granular Scopes:** `contact_center:read:outbound_campaign_contacts:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getCampaignContactListContact",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "Campaign contact list's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MN2Dtcb2T-yT5CU3clN-AA"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Campaign contact list's contact ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "07UQHRzvQ02R_o-l9pBB4w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200` Campaign contact list contact is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "contact_display_name",
                    "contact_id",
                    "contact_phones"
                  ],
                  "type": "object",
                  "properties": {
                    "contact_id": {
                      "type": "string",
                      "description": "Campaign contact list contact Id",
                      "example": "07UQHRzvQ02R_o-l9pBB4w"
                    },
                    "contact_display_name": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Display name of the contact",
                      "example": "Display Name"
                    },
                    "contact_first_name": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "First name of the contact",
                      "example": "First Name"
                    },
                    "contact_last_name": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Last name of the contact",
                      "example": "Last Name"
                    },
                    "contact_phones": {
                      "maxItems": 5,
                      "type": "array",
                      "description": "Array of phones",
                      "items": {
                        "required": [
                          "contact_phone_number",
                          "contact_phone_type"
                        ],
                        "type": "object",
                        "properties": {
                          "contact_phone_number": {
                            "type": "string",
                            "description": "Phone number, E164 format",
                            "example": "+12345551100"
                          },
                          "contact_phone_type": {
                            "type": "string",
                            "description": "Type of the phone",
                            "example": "Main",
                            "enum": [
                              "Main",
                              "Home",
                              "Work",
                              "Mobile",
                              "Other"
                            ]
                          }
                        },
                        "description": "Phone object"
                      }
                    },
                    "contact_emails": {
                      "maxItems": 4,
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Array of emails",
                      "items": {
                        "type": "string",
                        "description": "Email of the contact",
                        "format": "email",
                        "example": "test@gmail.com"
                      }
                    },
                    "contact_location": {
                      "maxLength": 50,
                      "type": "string",
                      "description": "Location of the contact",
                      "example": "Location"
                    },
                    "contact_account_number": {
                      "maxLength": 50,
                      "type": "string",
                      "description": "Account number of the contact",
                      "example": "123"
                    },
                    "contact_company": {
                      "maxLength": 50,
                      "type": "string",
                      "description": "Company of the contact",
                      "example": "zoom"
                    },
                    "contact_role": {
                      "maxLength": 50,
                      "type": "string",
                      "description": "Role of the contact",
                      "example": "developer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5001` <br>\n Contact list not found. <br>\n**Error Code:** `5002` <br>\n Contact not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contacts:read:admin",
              "contact_center:read:outbound_campaign_contacts:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contacts:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:outbound_campaign_contacts:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Campaign"
        ],
        "summary": "Remove contact from a campaign contact list",
        "description": "Remove a contact by ID from a campaign contact list.\n\n**Scopes:** `contact_center_outbound_campaign_contacts:write:admin`\n\n**Granular Scopes:** `contact_center:delete:outbound_campaign_contacts:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteCampaigncontactListContact",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "Campaign contact list ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "rfMoVPVYS3yjWJAzdOOlWA"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Campaign contact list contact's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "07UQHRzvQ02R_o-l9pBB4w"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`     Contact is deleted."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5001` <br>\n Contact list is not found <br>\n**Error Code:** `5002` <br>\n Contact is not found <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contacts:write:admin",
              "contact_center:delete:outbound_campaign_contacts:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contacts:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:outbound_campaign_contacts:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Campaign"
        ],
        "summary": "Update contact on a campaign contact list",
        "description": "Update a contact on a campaign contact list.\n\n**Scopes:** `contact_center_outbound_campaign_contacts:write:admin`\n\n**Granular Scopes:** `contact_center:update:outbound_campaign_contacts:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateCampaignContactListContact",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "Campaign contact list",
            "required": true,
            "schema": {
              "type": "string",
              "example": "rfMoVPVYS3yjWJAzdOOlWA"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Campaign contact",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MN2Dtcb2T-yT5CU3clN-AA"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contact_display_name": {
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string",
                    "description": "The contact's display name.",
                    "example": "Jill Chill"
                  },
                  "contact_first_name": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The contact's first name.",
                    "example": "Jill"
                  },
                  "contact_last_name": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The contact's last name.",
                    "example": "Chill"
                  },
                  "contact_phones": {
                    "type": "array",
                    "description": "Supports up to 5 numbers. Only one main or primar phone number is supported.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "contact_phone_number": {
                          "type": "string",
                          "description": "Phone number, in E164 format.",
                          "example": "+12345551100"
                        },
                        "contact_phone_type": {
                          "type": "string",
                          "description": "The phone's type.",
                          "example": "Main",
                          "enum": [
                            "Main",
                            "Work",
                            "Home",
                            "Mobile",
                            "Other"
                          ]
                        }
                      }
                    }
                  },
                  "contact_emails": {
                    "maxItems": 4,
                    "uniqueItems": true,
                    "type": "array",
                    "description": "Supports up to 4 emails, a maximum of 1100 characters in total.",
                    "items": {
                      "type": "string",
                      "description": "Email address.",
                      "example": "jillchill@example.com"
                    }
                  },
                  "contact_location": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "The contact's location.",
                    "example": "Zurich"
                  },
                  "contact_account_number": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "The contact's account number.",
                    "example": "111"
                  },
                  "contact_company": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "The contact's company.",
                    "example": "Zoom"
                  },
                  "contact_role": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "The contact's role.",
                    "example": "developer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` Contact is updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `300` <br>\n Validation failed. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `5001` <br>\n Contact list not found. <br>\n**Error Code:** `5002` <br>\n Contact not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_outbound_campaign_contacts:write:admin",
              "contact_center:update:outbound_campaign_contacts:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_outbound_campaign_contacts:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:outbound_campaign_contacts:admin"
          ]
        }
      }
    },
    "/contact_center/dispositions": {
      "get": {
        "tags": [
          "Dispositions"
        ],
        "summary": "List dispositions",
        "description": "Return a list of available dispositions. \n\n \n\n**Scopes:** `contact_center_disposition:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_dispositions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listDispositions",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nDispositions returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "dispositions": {
                      "type": "array",
                      "description": "Information about the disposition.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "disposition_id": {
                            "type": "string",
                            "description": "The disposition's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_name": {
                            "type": "string",
                            "description": "The disposition's name.",
                            "example": "Inquiry"
                          },
                          "disposition_description": {
                            "type": "string",
                            "description": "The disposition's description.",
                            "example": "Inquiry dispositions."
                          },
                          "status": {
                            "type": "string",
                            "description": "The disposition's active status. \n* `inactive` - Deactivated. \n* `active` - Activated.",
                            "example": "inactive",
                            "enum": [
                              "inactive",
                              "active"
                            ]
                          },
                          "queue_count": {
                            "type": "integer",
                            "description": "The number of queues associated with the disposition.",
                            "example": 0
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the disposition was last modified.",
                            "format": "date-time",
                            "example": "2021-12-03T05:07:46Z"
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of the user who last modified the disposition.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "disposition_type": {
                            "type": "string",
                            "description": "The disposition type.",
                            "example": "single",
                            "enum": [
                              "single",
                              "multi_level"
                            ]
                          }
                        },
                        "description": "Information about the disposition."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:read:admin",
              "contact_center:read:list_dispositions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.1.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_disposition:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_dispositions:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Create a disposition",
        "description": "Create a new [disposition](https://support.zoom.us/hc/en-us/articles/4470153057549-Managing-dispositions). Dispositions let agents assign an outcome or topic to each engagement. After creating dispositions, you can add them to queues. \n\n \n\n**Scopes:** `contact_center_disposition:write:admin`\n\n**Granular Scopes:** `contact_center:write:disposition:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createDisposition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "disposition_name"
                ],
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The disposition's active status. \n* `inactive` - Deactivated. \n* `active` - Activated.",
                    "example": "inactive",
                    "default": "inactive",
                    "enum": [
                      "inactive",
                      "active"
                    ]
                  },
                  "disposition_name": {
                    "type": "string",
                    "description": "The disposition's name.",
                    "example": "Inquiry"
                  },
                  "disposition_description": {
                    "type": "string",
                    "description": "The disposition's description.",
                    "example": "Inquiry dispositions."
                  },
                  "disposition_type": {
                    "type": "string",
                    "description": "The disposition's type.",
                    "example": "multi_level",
                    "default": "single",
                    "enum": [
                      "single",
                      "multi_level"
                    ]
                  },
                  "sub_dispositions": {
                    "type": "array",
                    "description": "For `single` dispositions, this field can be ignored. For `multi_level` dispositions, there must be at least one subdisposition. There can be up to 500, and each parent node can have up to 20 child nodes. Child nodes can only have up to 4 levels.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "sub_disposition_name": {
                          "type": "string",
                          "description": "The subdisposition's name.",
                          "example": "Subdisposition A"
                        },
                        "current_index": {
                          "maximum": 500,
                          "minimum": 1,
                          "type": "number",
                          "description": "The subdisposition's unique identifier.",
                          "example": 1
                        },
                        "parent_index": {
                          "maximum": 499,
                          "type": "number",
                          "description": "The index of the parent node that the current node belongs to. \nIf it is `0`, it means that the current node belongs to the root node.\nIf the parent index does not exist, the node will be discarded.",
                          "example": 0
                        }
                      }
                    }
                  }
                },
                "description": "Information about the new disposition."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nDisposition created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "disposition_id": {
                      "type": "string",
                      "description": "The disposition's ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "disposition_name": {
                      "type": "string",
                      "description": "The disposition's name.",
                      "example": "Inquiry"
                    },
                    "disposition_description": {
                      "type": "string",
                      "description": "The disposition's description.",
                      "example": "Inquiry dispositions."
                    },
                    "status": {
                      "type": "string",
                      "description": "The disposition's active status. \n* `inactive` - Deactivated. \n* `active` - Activated.",
                      "example": "inactive",
                      "enum": [
                        "inactive",
                        "active"
                      ]
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time when the disposition was last modified.",
                      "format": "date-time",
                      "example": "2021-12-03T05:07:46Z"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the disposition.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "disposition_type": {
                      "type": "string",
                      "description": "The disposition's type.",
                      "example": "multi_level",
                      "enum": [
                        "single",
                        "multi_level"
                      ]
                    }
                  },
                  "description": "Information about the disposition."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `2402` <br>\n That disposition name already exists. Use a different name. <br>\n**Error Code:** `2504` <br>\n Sub dispositions total size should be less than or equal to 500. <br>\n**Error Code:** `2507` <br>\n Multi_level disposition no sub dispositions. <br>\n**Error Code:** `2508` <br>\n Duplicate sub disposition name on the same tier. <br>\n**Error Code:** `2509` <br>\n Sub disposition tier size should be more than 0 and less than 5. <br>\n**Error Code:** `2511` <br>\n Invalid disposition type. The type value must be \"single\" or \"multi_level\". <br>\n**Error Code:** `2512` <br>\n The number of sub dispositions on the same tier should less than or equal to 20. <br>\n**Error Code:** `2601` <br>\n Invalid status. The status value must be \"inactive\" or \"active\". <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:write:admin",
              "contact_center:write:disposition:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.1.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_disposition:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:disposition:admin"
          ]
        }
      }
    },
    "/contact_center/dispositions/sets": {
      "get": {
        "tags": [
          "Dispositions"
        ],
        "summary": "List disposition sets",
        "description": "Return a list of available disposition sets. You can use sets to organize dispositions into groups. \n\n \n\n**Scopes:** `contact_center_disposition:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_disposition_sets:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listSets",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nDisposition sets returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 30
                    },
                    "disposition_sets": {
                      "type": "array",
                      "description": "Information about the disposition set.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "disposition_set_id": {
                            "type": "string",
                            "description": "The set's ID.",
                            "example": "saaHWgVMGQU69soco456oNA"
                          },
                          "disposition_set_name": {
                            "type": "string",
                            "description": "The set's name.",
                            "example": "Lead created"
                          },
                          "disposition_set_description": {
                            "type": "string",
                            "description": "The set's description.",
                            "example": "New leads generated."
                          },
                          "status": {
                            "type": "string",
                            "description": "The set's active status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                            "example": "inactive",
                            "enum": [
                              "inactive",
                              "active"
                            ]
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the set was last modified.",
                            "format": "date-time",
                            "example": "2021-12-03T05:07:46Z"
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of the user who last modified the set.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "dispositions_count": {
                            "type": "integer",
                            "description": "The number of dispositions associated with the disposition set.",
                            "example": 0
                          },
                          "queues_count": {
                            "type": "integer",
                            "description": "The number of queues associated with the disposition sets.",
                            "example": 0
                          }
                        },
                        "description": "Information about the disposition set."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:read:admin",
              "contact_center:read:list_disposition_sets:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_disposition:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_disposition_sets:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Create a disposition set",
        "description": "Create a new disposition set. \n\n \n\n**Scopes:** `contact_center_disposition:write:admin`\n\n**Granular Scopes:** `contact_center:write:disposition_set:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "createSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "disposition_set_name"
                ],
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The set's active status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                    "example": "inactive",
                    "default": "inactive",
                    "enum": [
                      "inactive",
                      "active"
                    ]
                  },
                  "disposition_set_name": {
                    "type": "string",
                    "description": "The set's name.",
                    "example": "Lead created"
                  },
                  "disposition_set_description": {
                    "type": "string",
                    "description": "The set's description.",
                    "example": "New leads generated."
                  },
                  "disposition_ids": {
                    "maxItems": 50,
                    "type": "array",
                    "description": "Information about the set's assigned dispositions.",
                    "items": {
                      "type": "string",
                      "description": "The disposition's ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    }
                  }
                },
                "description": "Information about the created disposition set."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nDisposition created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "disposition_set_id": {
                      "type": "string",
                      "description": "The set's ID.",
                      "example": "saaHWgVMGQU69soco456oNA"
                    },
                    "disposition_set_name": {
                      "type": "string",
                      "description": "The set's name.",
                      "example": "Lead created"
                    },
                    "disposition_set_description": {
                      "type": "string",
                      "description": "The set's description.",
                      "example": "New leads generated."
                    },
                    "status": {
                      "type": "string",
                      "description": "The set's active status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                      "example": "inactive",
                      "enum": [
                        "inactive",
                        "active"
                      ]
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time when the set was last modified.",
                      "format": "date-time",
                      "example": "2021-12-03T05:07:46Z"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the set.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "dispositions": {
                      "type": "array",
                      "description": "Information about the set's assigned dispositions.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "disposition_id": {
                            "type": "string",
                            "description": "The disposition's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_name": {
                            "type": "string",
                            "description": "The disposition's name.",
                            "example": "Inquiry"
                          }
                        },
                        "description": "Information about the disposition set."
                      }
                    }
                  },
                  "description": "Information about the disposition set."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `2502` <br>\nThat set name already exists. Use a different name.\n\n**Error Code:** `2601` <br>\nInvalid status. The status value must be \"inactive\" or \"active\".\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:write:admin",
              "contact_center:write:disposition_set:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_disposition:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:disposition_set:admin"
          ]
        }
      }
    },
    "/contact_center/dispositions/sets/{dispositionSetId}": {
      "get": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Get a disposition set",
        "description": "Retrieve information about a disposition set. \n\n \n\n**Scopes:** `contact_center_disposition:read:admin`\n\n**Granular Scopes:** `contact_center:read:disposition_set:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getSet",
        "parameters": [
          {
            "name": "dispositionSetId",
            "in": "path",
            "description": "The set's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \nSet returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "disposition_set_id": {
                      "type": "string",
                      "description": "The set's ID.",
                      "example": "saaHWgVMGQU69soco456oNA"
                    },
                    "disposition_set_name": {
                      "type": "string",
                      "description": "The set's name.",
                      "example": "Lead created"
                    },
                    "disposition_set_description": {
                      "type": "string",
                      "description": "The set's description.",
                      "example": "New leads generated."
                    },
                    "status": {
                      "type": "string",
                      "description": "The set's active status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                      "example": "inactive",
                      "enum": [
                        "inactive",
                        "active"
                      ]
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time when the set was last modified.",
                      "format": "date-time",
                      "example": "2021-12-03T05:07:46Z"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the set.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "dispositions": {
                      "type": "array",
                      "description": "Information about the set's assigned dispositions.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "disposition_id": {
                            "type": "string",
                            "description": "The disposition's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_name": {
                            "type": "string",
                            "description": "The disposition's name.",
                            "example": "Inquiry"
                          }
                        },
                        "description": "Information about the disposition set."
                      }
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the set's assigned queue.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's ID.",
                            "example": "d95avl1eRJ-H162PZUJ-qg",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "d95avl1eRJ-H162PZUJ-qg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "Sales"
                          }
                        },
                        "description": "Information about the queue."
                      }
                    }
                  },
                  "description": "Information about the disposition set."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2501` <br>\n Set does not exist: $setId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:read:admin",
              "contact_center:read:disposition_set:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_disposition:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:disposition_set:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Delete a disposition set",
        "description": "Delete a disposition set. \n\n \n\n**Scopes:** `contact_center_disposition:write:admin`\n\n**Granular Scopes:** `contact_center:delete:disposition_set:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteSet",
        "parameters": [
          {
            "name": "dispositionSetId",
            "in": "path",
            "description": "The set's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204 `  \n \nSet deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `2501` <br>\nSet does not exist: $setId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:write:admin",
              "contact_center:delete:disposition_set:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_disposition:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:disposition_set:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Update a disposition set",
        "description": "Update an existing disposition set. \n\n \n\n**Scopes:** `contact_center_disposition:write:admin`\n\n**Granular Scopes:** `contact_center:update:disposition_set:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "updateSet",
        "parameters": [
          {
            "name": "dispositionSetId",
            "in": "path",
            "description": "The set's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "disposition_set_name": {
                    "type": "string",
                    "description": "The set's name.",
                    "example": "Lead created"
                  },
                  "disposition_set_description": {
                    "type": "string",
                    "description": "The set's description.",
                    "example": "New leads generated."
                  },
                  "status": {
                    "type": "string",
                    "description": "The set's active status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                    "example": "inactive",
                    "enum": [
                      "inactive",
                      "active"
                    ]
                  },
                  "disposition_ids": {
                    "maxItems": 50,
                    "type": "array",
                    "description": "A list of disposition IDs to add to the set.",
                    "items": {
                      "type": "string",
                      "description": "The disposition's ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nSet updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `2502` <br>\nThat set name already exists. Use a different name.\n\n**Error Code:** `2601` <br>\nInvalid status. The status value must be \"inactive\" or \"active\".\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `2501` <br>\nSet does not exist: $setId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:write:admin",
              "contact_center:update:disposition_set:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_disposition:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:disposition_set:admin"
          ]
        }
      }
    },
    "/contact_center/dispositions/{dispositionId}": {
      "get": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Get a disposition",
        "description": "Retrieve information about a disposition. \n\n \n\n**Scopes:** `contact_center_disposition:read:admin`\n\n**Granular Scopes:** `contact_center:read:disposition:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getDisposition",
        "parameters": [
          {
            "name": "dispositionId",
            "in": "path",
            "description": "The disposition's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \nDisposition returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "disposition_id": {
                      "type": "string",
                      "description": "The disposition's ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "disposition_name": {
                      "type": "string",
                      "description": "The disposition's name.",
                      "example": "Inquiry"
                    },
                    "disposition_description": {
                      "type": "string",
                      "description": "The disposition's description.",
                      "example": "Inquiry dispositions."
                    },
                    "status": {
                      "type": "string",
                      "description": "The disposition's active status. \n* `inactive` - Deactivated. \n* `active` - Activated.",
                      "example": "inactive",
                      "enum": [
                        "inactive",
                        "active"
                      ]
                    },
                    "queue_count": {
                      "type": "integer",
                      "description": "The number of queues associated with the disposition.",
                      "example": 0
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time when the disposition was last modified.",
                      "format": "date-time",
                      "example": "2021-12-03T05:07:46Z"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the disposition.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "disposition_type": {
                      "type": "string",
                      "description": "The disposition's type.",
                      "example": "multi_level",
                      "enum": [
                        "single",
                        "multi_level"
                      ]
                    },
                    "sub_dispositions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "sub_disposition_id": {
                            "type": "string",
                            "description": "The sub disposition's ID.",
                            "example": ""
                          },
                          "sub_disposition_name": {
                            "type": "string",
                            "description": "The sub disposition's name.",
                            "example": "Sub Disposition A"
                          },
                          "current_index": {
                            "type": "number",
                            "description": "The sub disposition's unique identifier.",
                            "example": 1
                          },
                          "parent_index": {
                            "type": "number",
                            "description": "The index of the parent node that the current sub disposition belongs to. `parent_index` - `0` means that the parent node of the current node is the root node.",
                            "example": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Information about the disposition."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `2401` <br>\n Disposition does not exist: $dispositionId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:read:admin",
              "contact_center:read:disposition:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.1.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_disposition:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:disposition:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Delete a disposition",
        "description": "Delete an existing disposition. \n\n \n\n**Scopes:** `contact_center_disposition:write:admin`\n\n**Granular Scopes:** `contact_center:delete:disposition:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteDisposition",
        "parameters": [
          {
            "name": "dispositionId",
            "in": "path",
            "description": "The disposition's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204 `  \n \nDisposition deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `2401` <br>\nDisposition does not exist: $dispositionId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:write:admin",
              "contact_center:delete:disposition:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_disposition:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:disposition:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Dispositions"
        ],
        "summary": "Update a disposition",
        "description": "Update an existing disposition. \n\n \n\n**Scopes:** `contact_center_disposition:write:admin`\n\n**Granular Scopes:** `contact_center:update:disposition:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateDisposition",
        "parameters": [
          {
            "name": "dispositionId",
            "in": "path",
            "description": "The disposition's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "disposition_name": {
                    "type": "string",
                    "description": "The disposition's name.",
                    "example": "Inquiry"
                  },
                  "status": {
                    "type": "string",
                    "description": "The disposition's active status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                    "example": "inactive",
                    "enum": [
                      "inactive",
                      "active"
                    ]
                  },
                  "disposition_description": {
                    "type": "string",
                    "description": "The disposition's description.",
                    "example": "Inquiry dispositions."
                  },
                  "disposition_type": {
                    "type": "string",
                    "description": "The disposition's type.",
                    "example": "multi_level",
                    "default": "single",
                    "enum": [
                      "single",
                      "multi_level"
                    ]
                  },
                  "sub_dispositions": {
                    "type": "array",
                    "description": "For `single` dispositions, this field can be ignored. For `multi_level` dispositions, there must be at least one subdispositions, there can be up to 500, and each parent node can have up to 20 child nodes. At the same time, child nodes can only have up to 4 levels.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "sub_disposition_id": {
                          "type": "string",
                          "description": "The subdisposition's ID.",
                          "example": "HDLHFK_gdhgfajhsedfhg"
                        },
                        "sub_disposition_name": {
                          "type": "string",
                          "description": "The subdisposition's name.",
                          "example": "Subdisposition A"
                        },
                        "current_index": {
                          "maximum": 500,
                          "minimum": 1,
                          "type": "number",
                          "description": "The subdisposition's unique identifier.",
                          "example": 1
                        },
                        "parent_index": {
                          "maximum": 499,
                          "type": "number",
                          "description": "The index of the parent node to which the current node belongs. \nIf it is `0`, it means that the current node belongs to the root node.\nIf the parent index does not exist, the node will be discarded.",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nDisposition updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `2402` <br>\n That disposition name already exists. Use a different name. <br>\n**Error Code:** `2504` <br>\n The subdisposition's total size should be less than or equal to 500. <br>\n**Error Code:** `2507` <br>\n `Multi_level` disposition no subdispositions. <br>\n**Error Code:** `2508` <br>\n Duplicate subdisposition name on the same tier. <br>\n**Error Code:** `2509` <br>\n Subdisposition tier size should be more than 0 and less than 5. <br>\n**Error Code:** `2510` <br>\n Can not update \"multi_level\" to \"single\". <br>\n**Error Code:** `2511` <br>\n Invalid disposition type. The type value must be \"single\" or \"multi_level\". <br>\n**Error Code:** `2512` <br>\n The number of sub dispositions on the same tier should less than or equal to 20. <br>\n**Error Code:** `2601` <br>\n Invalid status. The status value must be \"inactive\" or \"active\". <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2401` <br>\n Disposition does not exist: $dispositionId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_disposition:write:admin",
              "contact_center:update:disposition:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.3.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_disposition:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:disposition:admin"
          ]
        }
      }
    },
    "/contact_center/engagements": {
      "get": {
        "tags": [
          "Engagements"
        ],
        "summary": "List engagements",
        "description": "Returns a list of engagements.\n\n**Scopes:** `contact_center_report:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_engagements:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listEngagements",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "example": 10,
              "default": 10
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "The call's timezone. The default is **UTC**.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "America/Los_Angeles"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date, in `yyyy-mm-dd` or `yyyy-MM-dd'T'HH:mm:ss'Z'` format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameter is specified. The end time and date in `yyyy-mm-dd` or `yyyy-MM-dd'T'HH:mm:ss'Z'` format, the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "queue_id",
            "in": "query",
            "description": "The queue's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The agent's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ukAAkZKfROKMSw1bj_RDFQ"
            }
          },
          {
            "name": "consumer_number",
            "in": "query",
            "description": "The customer's phone number.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "+12059300920"
            }
          },
          {
            "name": "channel_types",
            "in": "query",
            "description": "The channel's type. \n* voice \n* SMS \n* chat \n* video \n* kiosk \n* in_app_chat \n* in_app_video",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "voice",
                "enum": [
                  "voice",
                  "sms",
                  "chat",
                  "video",
                  "kiosk",
                  "in_app_chat",
                  "in_app_video"
                ]
              }
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The task's channel. \n* `voice` \n* `video` \n* `messaging` \n* `email` \n\nIt provides only a single channel. \n\nIf channel is used as an input parameter, the deprecated parameter `channel_types` is not processed.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "messaging",
              "enum": [
                "voice",
                "video",
                "messaging",
                "email"
              ]
            }
          },
          {
            "name": "channel_sources",
            "in": "query",
            "description": "The channel's source. \n* `in_app_video` - Only applies to video channel. \n* `kiosk_video` - Only applies to video channel. \n* `web_video` - Only applies to video channel. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel. \n* `facebook_messenger` - Only applies to messaging channel.\n* `whatsapp` - Only applies to messaging channel.\n* `email_address` - Only applies to email channel.\n\nIt provides `multiple channel_sources`.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "web_chat,in_app_chat",
                "enum": [
                  "in_app_video",
                  "kiosk_video",
                  "web_video",
                  "web_chat",
                  "in_app_chat",
                  "sms",
                  "facebook_messenger",
                  "whatsapp",
                  "email_address"
                ]
              }
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "The engagement's direction.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "inbound",
              "enum": [
                "inbound",
                "outbound"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nEngagements returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 100,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 10
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The call's [timezone ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). The default is **UTC**.",
                      "example": "America/Los_Angeles"
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
                      "format": "date-time",
                      "example": "2021-12-10T00:00:00Z"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in `yyyy-MM-dd'T'HH:mm:ss'Z'` format, the same format as the `from` parameter.",
                      "format": "date-time",
                      "example": "2021-12-10T00:15:00Z"
                    },
                    "engagements": {
                      "type": "array",
                      "description": "The information about the engagement.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start_time": {
                            "type": "string",
                            "description": "The date and time when the engagement started, in ISO 8601 format, either `yyyy-MM-dd'T'HH:mm:ss'Z'` or `yyyy-MM-dd'T'HH:mm:ss'TZD'`. `start_time` will be the time according to the timezone indicated by the user. If no timezone is provided, `start_time` will be in UTC.",
                            "format": "date-time",
                            "example": "2021-12-03T13:07:46Z"
                          },
                          "duration": {
                            "type": "integer",
                            "description": "The engagement's duration, in seconds.",
                            "format": "int64",
                            "example": 3600
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "direction": {
                            "type": "string",
                            "description": "The engagement's direction. \n* `inbound`\n* `outbound`",
                            "example": "inbound"
                          },
                          "channel_types": {
                            "type": "array",
                            "description": "The channel's type. \n* voice \n* SMS \n* chat \n* video \n* kiosk \n* in_app_chat \n* in_app_video",
                            "deprecated": true,
                            "items": {
                              "type": "string",
                              "example": "voice",
                              "enum": [
                                "voice",
                                "sms",
                                "chat",
                                "video",
                                "kiosk",
                                "in_app_chat",
                                "in_app_video"
                              ]
                            }
                          },
                          "channels": {
                            "type": "array",
                            "description": "The task's channels",
                            "items": {
                              "type": "object",
                              "properties": {
                                "channel": {
                                  "type": "string",
                                  "description": "The task's channel. \n* `voice` \n* `video` \n* `messaging` \n* `email`",
                                  "example": "messaging",
                                  "enum": [
                                    "voice",
                                    "video",
                                    "messaging",
                                    "email"
                                  ]
                                },
                                "channel_source": {
                                  "type": "string",
                                  "description": "The channel's source. \n* `in_app_video` - Only applies to video channel. \n* `kiosk_video` - Only applies to video channel. \n* `web_video` - Only applies to video channel. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel.\n* `facebook_messenger` - Only applies to messaging channel.\n* `whatsapp` - Only applies to messaging channel.\n* `email_address` - Only applies to email channel.",
                                  "example": "in_app_chat",
                                  "enum": [
                                    "in_app_video",
                                    "kiosk_video",
                                    "web_video",
                                    "web_chat",
                                    "in_app_chat",
                                    "sms",
                                    "facebook_messenger",
                                    "whatsapp",
                                    "email_address"
                                  ]
                                }
                              }
                            }
                          },
                          "consumers": {
                            "type": "array",
                            "description": "Information about the consumers.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "consumer_id": {
                                  "type": "string",
                                  "description": "The consumer's ID.",
                                  "example": "zeYjXoDOS_eV1QmTpj63PQ"
                                },
                                "consumer_display_name": {
                                  "type": "string",
                                  "description": "The consumer's name.",
                                  "example": "Jill"
                                },
                                "consumer_number": {
                                  "type": "string",
                                  "description": "The consumer's phone number.",
                                  "example": "+12058945728"
                                }
                              }
                            }
                          },
                          "dispositions": {
                            "type": "array",
                            "description": "Information about the dispositions.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "disposition_id": {
                                  "type": "string",
                                  "description": "The disposition's ID.",
                                  "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                                },
                                "disposition_name": {
                                  "type": "string",
                                  "description": "The disposition's name.",
                                  "example": "Inquiry"
                                }
                              }
                            }
                          },
                          "notes": {
                            "type": "array",
                            "description": "Information about the notes.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "user_id": {
                                  "type": "string",
                                  "description": "The agent's ID.",
                                  "example": "ukAAkZKfROKMSw1bj_RDFQ"
                                },
                                "note_id": {
                                  "type": "string",
                                  "description": "The note's ID.",
                                  "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                                },
                                "note": {
                                  "type": "string",
                                  "description": "The note's content.",
                                  "example": "This is the content of the note."
                                },
                                "last_modified_time": {
                                  "type": "string",
                                  "description": "The date and time when this note was last modified, in ISO 8601 format, either `yyyy-MM-dd'T'HH:mm:ss'Z'` or `yyyy-MM-dd'T'HH:mm:ss'TZD'`. `last_modified_time` will be the time according to the timezone indicated by the user. If no timezone is provided, `last_modified_time` will be in UTC.",
                                  "format": "date-time",
                                  "example": "2022-03-26T14:44:14Z"
                                }
                              }
                            }
                          },
                          "transcript_url": {
                            "type": "string",
                            "description": "The URL to download the messaging transcript, if the transcript text file exists. This field is only used for Messaging engagements. For voice and video engagement recordings, see `List engagement recordings` API. \\r\\nFor security purposes, you **must** provide an OAuth access token in the authorization header to download the transcript file using this URL. Example:\\r\\n```curl --request GET \\r\\n  --url {transcript_url} \\r\\n  --header 'authorization: Bearer {access_token}' \\r\\n  --header 'content-type: application/json'\\r\\n```",
                            "example": "https://api.zoom.us/v2/contact_center/engagements/transcripts/download/W_VATTk_Q5aW6z5rZtBxAQ"
                          }
                        },
                        "description": "The information about the engagement."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n**Error Code:** `1001` <br>\n User does not exist: $userId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_report:read:admin",
              "contact_center:read:list_engagements:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_report:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_engagements:admin"
          ]
        }
      }
    },
    "/contact_center/engagements/{engagementId}": {
      "get": {
        "tags": [
          "Engagements"
        ],
        "summary": "Get an engagement",
        "description": "Retrieve information about an engagement.\n\n**Scopes:** `contact_center_report:read:admin`\n\n**Granular Scopes:** `contact_center:read:engagement:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getEngagement",
        "parameters": [
          {
            "name": "engagementId",
            "in": "path",
            "description": "The engagement's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3XilEfOvQEKRIWMWhX1jDg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \nEngagement information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "start_time": {
                      "type": "string",
                      "description": "The date and time when the engagement started.",
                      "format": "date-time",
                      "example": "2021-12-03T13:07:46Z"
                    },
                    "duration": {
                      "type": "integer",
                      "description": "The engagement's duration, in seconds.",
                      "format": "int64",
                      "example": 3600
                    },
                    "engagement_id": {
                      "type": "string",
                      "description": "The engagement's ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "channel_types": {
                      "type": "array",
                      "description": "The channel's type. \n* voice \n* SMS \n* chat \n* video \n* kiosk \n* in_app_chat \n* in_app_video",
                      "example": [
                        "voice"
                      ],
                      "deprecated": true,
                      "items": {
                        "type": "string",
                        "example": "voice",
                        "enum": [
                          "voice",
                          "sms",
                          "chat",
                          "video",
                          "kiosk",
                          "in_app_chat",
                          "in_app_video"
                        ]
                      }
                    },
                    "channels": {
                      "type": "array",
                      "description": "The task's channels.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "channel": {
                            "type": "string",
                            "description": "The task's channel. \n* `voice` \n* `video` \n* `messaging` \n* `email`",
                            "example": "video",
                            "enum": [
                              "voice",
                              "video",
                              "messaging",
                              "email"
                            ]
                          },
                          "channel_source": {
                            "type": "string",
                            "description": "The channel's source. \n* `in_app_video` - Only applies to video channel. \n* `kiosk_video` - Only applies to video channel. \n* `web_video` - Only applies to video channel. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel.\n* `facebook_messenger` - Only applies to messaging channel.\n* `whatsapp` - Only applies to messaging channel.\n* `email_address` - Only applies to email channel.",
                            "example": "in_app_video",
                            "enum": [
                              "in_app_video",
                              "kiosk_video",
                              "web_video",
                              "web_chat",
                              "in_app_chat",
                              "sms",
                              "facebook_messenger",
                              "whatsapp",
                              "email_address"
                            ]
                          }
                        }
                      }
                    },
                    "consumers": {
                      "type": "array",
                      "description": "Information about the customers.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "consumer_id": {
                            "type": "string",
                            "description": "The customer's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "consumer_display_name": {
                            "type": "string",
                            "description": "The customer's name.",
                            "example": "Jill"
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The customer's phone number.",
                            "example": "+12058945728"
                          }
                        }
                      }
                    },
                    "direction": {
                      "type": "string",
                      "description": "The session's direction. `inbound` | `outbound`.",
                      "example": "inbound",
                      "enum": [
                        "inbound",
                        "outbound"
                      ]
                    },
                    "flows": {
                      "type": "array",
                      "description": "Information about the engagement's flows.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "description": "The flow's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The flow's name.",
                            "example": "Demo"
                          },
                          "flow_version": {
                            "type": "string",
                            "description": "The flow's version.",
                            "example": "5"
                          }
                        },
                        "description": "Information about the flow."
                      }
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the engagement's queues.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's ID.",
                            "example": "d95avl1eRJ-H162PZUJ-qg",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "d95avl1eRJ-H162PZUJ-qg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "agentQueue"
                          }
                        },
                        "description": "Information about the queue."
                      }
                    },
                    "agents": {
                      "type": "array",
                      "description": "Information about the engagement's agents.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The agent's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The agent's name.",
                            "example": "Jilly"
                          }
                        },
                        "description": "Information about the queue."
                      }
                    },
                    "queue_wait_type": {
                      "type": "string",
                      "description": "The queue's wait type.",
                      "example": "live_waiting",
                      "enum": [
                        "live_waiting",
                        "callback"
                      ]
                    },
                    "flow_duration": {
                      "type": "integer",
                      "description": "The engagement's flow duration, in seconds.",
                      "format": "int64",
                      "example": 10
                    },
                    "waiting_duration": {
                      "type": "integer",
                      "description": "The engagement's waiting duration, in seconds.",
                      "format": "int64",
                      "example": 10
                    },
                    "handling_duration": {
                      "type": "integer",
                      "description": "The handling duration, in seconds. This setting applies to voice channels.",
                      "format": "int64",
                      "example": 0
                    },
                    "wrap_up_duration": {
                      "type": "integer",
                      "description": "The engagement's wrap-up duration, in seconds.",
                      "format": "int64",
                      "example": 10,
                      "deprecated": true
                    },
                    "voice_mail": {
                      "type": "integer",
                      "description": "The voicemail count.",
                      "format": "int32",
                      "example": 10
                    },
                    "dispositions": {
                      "type": "array",
                      "description": "Information about the dispositions.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "disposition_id": {
                            "type": "string",
                            "description": "The disposition's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_name": {
                            "type": "string",
                            "description": "The disposition's name.",
                            "example": "Inquiry"
                          }
                        }
                      }
                    },
                    "notes": {
                      "type": "array",
                      "description": "Information about the notes.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The agent's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "note_id": {
                            "type": "string",
                            "description": "The note's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "note": {
                            "type": "string",
                            "description": "The note's content.",
                            "example": "This is the content of the note."
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when this note was last modified, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss&rsquo;TZD&rsquo;). \n\n`last_modified_time` will be the time according to the timezone indicated by the user. If no timezone is provided, `last_modified_time `will be in UTC.",
                            "format": "date-time",
                            "example": "2022-03-26T14:44:14Z"
                          }
                        }
                      }
                    },
                    "events": {
                      "type": "array",
                      "description": "Information about the events.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start_time": {
                            "type": "string",
                            "description": "The date and time when the event started.",
                            "format": "date-time",
                            "example": "2021-12-03T13:07:46Z"
                          },
                          "duration": {
                            "type": "integer",
                            "description": "The event's duration.",
                            "format": "int64",
                            "example": 3600
                          },
                          "channel_type": {
                            "type": "string",
                            "description": "The channel's type. \n* voice \n* SMS \n* chat \n* video \n* kiosk \n* in_app_chat \n* in_app_video",
                            "example": "voice",
                            "deprecated": true,
                            "enum": [
                              "voice",
                              "sms",
                              "chat",
                              "video",
                              "in_app_chat",
                              "kiosk",
                              "in_app_chat",
                              "in_app_video"
                            ]
                          },
                          "channel": {
                            "type": "string",
                            "description": "The task's channel. \n* `voice` \n* `video` \n* `messaging` \n* `email`",
                            "example": "video",
                            "enum": [
                              "voice",
                              "video",
                              "messaging",
                              "email"
                            ]
                          },
                          "channel_source": {
                            "type": "string",
                            "description": "The channel's source. \n* `in_app_video` - Only applies to video channel. \n* `kiosk_video` - Only applies to video channel. \n* `web_video` - Only applies to video channel. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel. \n* `email_address` - Only applies to email channel.",
                            "example": "in_app_video",
                            "enum": [
                              "in_app_video",
                              "kiosk_video",
                              "web_video",
                              "web_chat",
                              "in_app_chat",
                              "sms",
                              "email_address"
                            ]
                          },
                          "event_type": {
                            "type": "string",
                            "description": "The event's type.",
                            "example": "Agent Ringing"
                          },
                          "direction": {
                            "type": "string",
                            "description": "The session's direction. `inbound` | `outbound`.",
                            "example": "inbound",
                            "enum": [
                              "inbound",
                              "outbound"
                            ]
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The flow's ID.",
                            "example": "zwKiV80hQ7CwRg9BEm0Bvw"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The flow's name.",
                            "example": "Demo"
                          },
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's ID.",
                            "example": "d95avl1eRJ-H162PZUJ-qg",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "d95avl1eRJ-H162PZUJ-qg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "Sales"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The agent's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "user_display_name": {
                            "type": "string",
                            "description": "The agent's name.",
                            "example": "Jilly"
                          },
                          "accept_type": {
                            "type": "string",
                            "description": "The router's accept type. `manual` | `auto`.",
                            "example": "manual",
                            "enum": [
                              "manual",
                              "auto"
                            ]
                          },
                          "transfer_to_flow_id": {
                            "type": "string",
                            "description": "The target flow's ID.",
                            "example": "zwKiV80hQ7CwRg9BEm0Bvw"
                          },
                          "transfer_to_flow_name": {
                            "type": "string",
                            "description": "The target flow's name.",
                            "example": "Demo"
                          },
                          "transfer_to_queue_id": {
                            "type": "string",
                            "description": "The target queue's ID.",
                            "example": "d95avl1eRJ-H162PZUJ-qg",
                            "deprecated": true
                          },
                          "transfer_to_cc_queue_id": {
                            "type": "string",
                            "description": "The target queue's ID.",
                            "example": "d95avl1eRJ-H162PZUJ-qg"
                          },
                          "transfer_to_queue_name": {
                            "type": "string",
                            "description": "The target flow's ID.",
                            "example": "Sales"
                          },
                          "transfer_to_user_id": {
                            "type": "string",
                            "description": "The target agent's ID.",
                            "example": "zwKiV80hQ7CwRg9BEm0Bvw"
                          },
                          "transfer_to_user_display_name": {
                            "type": "string",
                            "description": "The target agent's name.",
                            "example": "Jilly"
                          },
                          "transfer_to_number": {
                            "type": "string",
                            "description": "The transfer's number.",
                            "example": "+12059300920"
                          },
                          "transfer_type": {
                            "type": "string",
                            "description": "The transfer's type.",
                            "example": "cold",
                            "enum": [
                              "cold",
                              "warm"
                            ]
                          },
                          "upgraded_to_channel_type": {
                            "type": "string",
                            "description": "The target upgraded channel's type.",
                            "example": "video",
                            "enum": [
                              "video"
                            ]
                          },
                          "crm_type": {
                            "type": "string",
                            "description": "The CRM's type.",
                            "example": "salesforce"
                          },
                          "crm_call_status": {
                            "type": "string",
                            "description": "The CRM's call status.",
                            "example": "ringing",
                            "enum": [
                              "ringing",
                              "answer",
                              "hangup",
                              "miss"
                            ]
                          },
                          "supervisor_id": {
                            "type": "string",
                            "description": "The supervisor's ID.",
                            "example": "kRQpbWO5TV6E7wxEYOKFWw"
                          },
                          "supervisor_display_name": {
                            "type": "string",
                            "description": "The supervisor's name.",
                            "example": "Jilly"
                          },
                          "consumer_id": {
                            "type": "string",
                            "description": "The consumer's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "consumer_display_name": {
                            "type": "string",
                            "description": "The customer's name.",
                            "example": "Jill"
                          },
                          "inbox_id": {
                            "type": "string",
                            "description": "The inbox's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "inbox_name": {
                            "type": "string",
                            "description": "The inbox's name.",
                            "example": "example"
                          },
                          "conference_type": {
                            "type": "string",
                            "description": "The conference's type.",
                            "example": "cold",
                            "enum": [
                              "cold",
                              "warm"
                            ]
                          },
                          "invitee_type": {
                            "type": "string",
                            "description": "The conference invitee's type.",
                            "example": "PSTN number",
                            "enum": [
                              "Agent",
                              "Queue",
                              "PSTN number"
                            ]
                          },
                          "invitee": {
                            "type": "string",
                            "description": "The conference's invitee.",
                            "example": "+14244108479"
                          },
                          "skills": {
                            "type": "array",
                            "description": "Information about the skills.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "skill_category_id": {
                                  "type": "string",
                                  "description": "The skill category's ID.",
                                  "example": "Mu_IEZZHQZGMY9avK74kwA"
                                },
                                "skill_category_name": {
                                  "type": "string",
                                  "description": "The skill category's name.",
                                  "example": "Languages"
                                },
                                "skill_id": {
                                  "type": "string",
                                  "description": "The skill's ID.",
                                  "example": "saaHWgVMGQU69soco456oNA"
                                },
                                "skill_name": {
                                  "type": "string",
                                  "description": "The skill's name.",
                                  "example": "French"
                                },
                                "skill_proficiency_level": {
                                  "type": "integer",
                                  "description": "The skill's proficiency level. Only proficiency-based skill will have proficiency level.",
                                  "format": "int32",
                                  "example": 3
                                }
                              },
                              "description": "Information about the skill."
                            }
                          },
                          "email_reply_to": {
                            "type": "array",
                            "description": "Recipient's information when replying to an email.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "email_address": {
                                  "type": "string",
                                  "description": "Email address",
                                  "example": "jill.chill@example.com"
                                },
                                "email_name": {
                                  "type": "string",
                                  "description": "Email name",
                                  "example": "Jill Chill"
                                }
                              },
                              "description": "Recipient's information when replying to an email."
                            }
                          },
                          "email_reply_cc": {
                            "type": "array",
                            "description": "CC recipients' information when replying to emails.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "email_address": {
                                  "type": "string",
                                  "description": "Email address",
                                  "example": "jill.chill@example.com"
                                },
                                "email_name": {
                                  "type": "string",
                                  "description": "Email name",
                                  "example": "Jill Chill"
                                }
                              },
                              "description": "CC recipients' information when replying to emails."
                            }
                          },
                          "email_reply_bcc": {
                            "type": "array",
                            "description": "BCC recipients' information when replying to an email.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "email_address": {
                                  "type": "string",
                                  "description": "Email address",
                                  "example": "jill.chill@example.com"
                                },
                                "email_name": {
                                  "type": "string",
                                  "description": "Email name",
                                  "example": "Jill Chill"
                                }
                              },
                              "description": "BCC recipients' information when replying to an email."
                            }
                          }
                        }
                      }
                    },
                    "transcript_url": {
                      "type": "string",
                      "description": "The URL to download the messaging transcript, if the transcript text file exists. This field is only used for messaging engagements. For voice and video engagement recordings, see the `List engagement recordings` API. \n\nFor security purposes, you **must** provide an OAuth access token in the authorization header to download the transcript file using this URL. \n\n**Example**:\\r\\n```curl --request GET \\r\\n  --url {transcript_url} \\r\\n  --header 'authorization: Bearer {access_token}' \\r\\n  --header 'content-type: application/json'\\r\\n```",
                      "example": "https://api.zoom.us/v2/contact_center/engagements/transcripts/download/W_VATTk_Q5aW6z5rZtBxAQ"
                    }
                  },
                  "description": "Information about the engagement."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2901` <br>\n Engagement does not exist: $engagementId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_report:read:admin",
              "contact_center:read:engagement:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_report:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:engagement:admin"
          ]
        }
      }
    },
    "/contact_center/engagements/{engagementId}/recording/{command}": {
      "put": {
        "tags": [
          "Engagements"
        ],
        "summary": "Control an engagement's recording",
        "description": "Controls the recording state for an engagement.\n\nThis request is only valid for video and voice engagements. Calling this API for other channel types is invalid.\n\nAcceptance of a request and response of `HTTP 204 No Content` only ensures there were no validation errors with the request.\n\n**Scopes:** `contact_center_engagement:write:admin`\n\n**Granular Scopes:** `contact_center:update:engagement_recording_control:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "engagementRecordingControl",
        "parameters": [
          {
            "name": "engagementId",
            "in": "path",
            "description": "The engagement event's unique ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          },
          {
            "name": "command",
            "in": "path",
            "description": "The command for the recording control.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "pause",
              "enum": [
                "pause",
                "resume"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status:** `204` **No Content** Request accepted for processing with no validation errors. This does not imply successful execution of the command."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `2814` <br>\n Cannot use this recording control command with this engagement's channel type. <br>\n**Error Code:** `2815` <br>\n The engagement is not assigned to an agent. It is not being recorded. <br>\n**Error Code:** `2818` <br>\n Cannot change recording state from {current_state} to {command_state}. <br>\n**Error Code:** `2819` <br>\n Recording is stopped. <br>\n**Error Code:** `2808` <br>\n Recording is in progress. There is no need to open it again. <br>\n**Error Code:** `2809` <br>\n Start recording first. Cannot be converted to {state}. <br>\n**Error Code:** `2810` <br>\n No need to repeat the operation, the current state is already {state}. <br>\n**Error Code:** `2812` <br>\n The recording control's current state is {current_state}, and it cannot be converted to {command_state}. <br>\n**Error Code:** `300` <br>\n Invalid request. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `20006` <br>\n Account not found. <br>\n**Error Code:** `2816` <br>\n The system could not find the session for the engagement. <br>\n**Error Code:** `2817` <br>\n There is no recording for this engagement. <br>\n**Error Code:** `2901` <br>\n Engagement does not exist: {0}. <br>\n**Error Code:** `2906` <br>\n There are not any agents on the call. <br>\n"
          },
          "409": {
            "description": "**HTTP Status Code:** `409` <br>\n Conflict  \n\n **Error Code:** `2907` <br>\n There was a problem processing the recording control request. <br>\n**Error Code:** `2908` <br>\n The operation was partially completed. Try again. <br>\n**Error Code:** `2909` <br>\n There was a problem processing the recording control request. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_engagement:write:admin",
              "contact_center:update:engagement_recording_control:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_engagement:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:engagement_recording_control:admin"
          ]
        }
      }
    },
    "/contact_center/engagements/{engagementId}/recordings/status": {
      "get": {
        "tags": [
          "Engagements"
        ],
        "summary": "Poll an engagement recording's status",
        "description": "Polls a video or voice engagement's recordings' status.\n\n**Scopes:** `contact_center_engagement:read:admin`\n\n**Granular Scopes:** `contact_center:read:engagement_recording_status:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "EngagementRecordingStatus",
        "parameters": [
          {
            "name": "engagementId",
            "in": "path",
            "description": "The engagement ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status:** `200` **OK**",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statuses": {
                      "type": "array",
                      "description": "The list of statuses.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "The recording status.\n\nIf the recording status change failed, it does not explicitly show in this API response.\n\nIf the recording status does not change within 5 seconds of an expected change, assume that the recording status did not successfully transition to the expected status. If used with the recording control API, the control API request can be re-attempted.",
                            "example": "pause",
                            "enum": [
                              "pause",
                              "resume",
                              "start",
                              "stop"
                            ]
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the recording was last modified.",
                            "example": "2023-01-01T00:00:00Z"
                          }
                        },
                        "description": " The recording status."
                      }
                    },
                    "engagement_id": {
                      "type": "string",
                      "description": "The engagement's ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "channel": {
                      "type": "string",
                      "description": "The recording's channel type. \n* `voice` - Voice recording. * `video` - Video recording.",
                      "example": "video",
                      "enum": [
                        "voice",
                        "video"
                      ]
                    },
                    "channel_source": {
                      "type": "string",
                      "description": "The channel's source. \n* `in_app_chat` - Only applies to messaging channel. * `web_chat` - Only applies to messaging channel. * `sms` - Only applies to messaging channel.",
                      "example": "live_video",
                      "enum": [
                        "in_app_video",
                        "kiosk_video",
                        "web_video"
                      ]
                    }
                  },
                  "description": "root"
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `2814` <br>\n The engagement's channel type is invalid for this recording control command. <br>\n**Error Code:** `2815` <br>\n The engagement is not assigned to an agent. It is not being recorded. <br>\n**Error Code:** `300` <br>\n Invalid request. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2901` <br>\n Engagement does not exist: {0}. <br>\n**Error Code:** `20006` <br>\n Account not found. <br>\n**Error Code:** `2817` <br>\n There is no recording for this engagement. <br>\n**Error Code:** `2906` <br>\n There are not any agents on the call. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_engagement:read:admin",
              "contact_center:read:engagement_recording_status:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_engagement:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:engagement_recording_status:admin"
          ]
        }
      }
    },
    "/contact_center/flows": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "List flows",
        "description": "Return a list of flows. \n\n \n\n**Scopes:** `contact_center_flow:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_flows:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listFlows",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Use the status to filter the result.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "published",
              "enum": [
                "draft",
                "published",
                "archived"
              ]
            }
          },
          {
            "name": "channel_type",
            "in": "query",
            "description": "Use the channel type to filter the result.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "chat",
                "sms",
                "video",
                "in_app_chat"
              ]
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Use the channel to filter the result.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "messaging",
              "enum": [
                "voice",
                "video",
                "messaging",
                "email"
              ]
            }
          },
          {
            "name": "channel_source",
            "in": "query",
            "description": "Use the channel source to filter the result.  \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel.  \n* `sms` - Only applies to messaging channel.\n* `facebook_messenger` - Only applies to messaging channel.\n* `whatsapp` - Only applies to messaging channel.\n* `email_address` - Only applies to email channel.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "web_chat",
              "enum": [
                "web_chat",
                "in_app_chat",
                "sms",
                "facebook_messenger",
                "whatsapp",
                "email_address"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Flow list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "flows": {
                      "type": "array",
                      "description": "Information about the flows.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "description": "The flow's ID.",
                            "example": "zwKiV80hQ7CwRg9BEm0Bvw"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The flow's name.",
                            "example": "Video Test"
                          },
                          "flow_description": {
                            "type": "string",
                            "description": "The flow's description.",
                            "example": "A testing flow."
                          },
                          "channel_type": {
                            "type": "string",
                            "description": "The flow's channel type.",
                            "example": "voice",
                            "deprecated": true,
                            "enum": [
                              "voice",
                              "chat",
                              "sms",
                              "video",
                              "in_app_chat"
                            ]
                          },
                          "channel": {
                            "type": "string",
                            "description": "The flow's channel.",
                            "example": "messaging",
                            "enum": [
                              "voice",
                              "video",
                              "messaging",
                              "email"
                            ]
                          },
                          "channel_source": {
                            "type": "string",
                            "description": "The channel's source. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel.\n* `facebook_messenger` - Only applies to messaging channel.\n* `whatsapp` - Only applies to messaging channel.\n* `email_address` - Only applies to email channel.",
                            "example": "web_chat",
                            "enum": [
                              "web_chat",
                              "in_app_chat",
                              "sms",
                              "facebook_messenger",
                              "whatsapp",
                              "email_address"
                            ]
                          },
                          "status": {
                            "type": "string",
                            "description": "This flow's status.",
                            "example": "published",
                            "enum": [
                              "draft",
                              "published",
                              "archived",
                              "debugging"
                            ]
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The parent ID of the user who modified the flow.",
                            "example": "jdhgdhghk376453hjdf"
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when this flow was last modified. ",
                            "example": "2022-08-05T01:55:52Z"
                          },
                          "entry_points": {
                            "type": "array",
                            "description": "The flow's entry points.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "entry_id": {
                                  "type": "string",
                                  "description": "The flow's entry point ID.",
                                  "example": "x_h7uCj3TtScXWOBnQnKrw"
                                },
                                "entry_name": {
                                  "type": "string",
                                  "description": "The flow's entry point name, applicable to Video, Web Chat and In-App Chat.",
                                  "example": "Test video"
                                },
                                "entry_number": {
                                  "type": "string",
                                  "description": "The flow's entry point number, applicable to voice and SMS.",
                                  "example": "+16052052430"
                                },
                                "entry_language": {
                                  "type": "string",
                                  "description": "The flow's entry point engagement language.",
                                  "example": "en-US"
                                },
                                "email_address": {
                                  "type": "string",
                                  "description": "The flow's entry point email address, applicable to email.",
                                  "example": "xxxx@zoom.us"
                                }
                              }
                            }
                          },
                          "flow_versions": {
                            "type": "array",
                            "description": "The flow's versions.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "flow_version_id": {
                                  "type": "string",
                                  "description": "The flow's studio version ID.",
                                  "example": "EWg5URJZRXKwfbLJpeJWyA"
                                },
                                "flow_version_description": {
                                  "type": "string",
                                  "description": "The flow's version description.",
                                  "example": "Version 1"
                                },
                                "flow_version_status": {
                                  "type": "string",
                                  "description": "The flow version's status.",
                                  "example": "draft",
                                  "enum": [
                                    "draft",
                                    "published",
                                    "archived",
                                    "debugging"
                                  ]
                                },
                                "flow_version": {
                                  "type": "integer",
                                  "description": "The flow's version.",
                                  "example": 2
                                },
                                "flow_version_modified_by": {
                                  "type": "string",
                                  "description": "The parent ID of the user who modified the flow version.",
                                  "example": "jdhgdhghk376453hjdf"
                                },
                                "flow_version_last_modified_time": {
                                  "type": "string",
                                  "description": "The date and time when this flow version was last modified. ",
                                  "example": "2022-08-05T01:55:52Z"
                                }
                              },
                              "description": "The flow versions' detailed information."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_flow:read:admin",
              "contact_center:read:list_flows:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_flow:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_flows:admin"
          ]
        }
      }
    },
    "/contact_center/flows/{flowId}": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Get a flow",
        "description": "Get information about a flow. \n\n \n\n**Scopes:** `contact_center_flow:read:admin`\n\n**Granular Scopes:** `contact_center:read:flow:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getAFlow",
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "The flow's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "F2aM1AQuSXyWerbDqswFJQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nFlow returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "flow_id": {
                      "type": "string",
                      "description": "The flow's ID.",
                      "example": "zwKiV80hQ7CwRg9BEm0Bvw"
                    },
                    "flow_name": {
                      "type": "string",
                      "description": "The flow's name.",
                      "example": "Video Test"
                    },
                    "flow_description": {
                      "type": "string",
                      "description": "The flow's description.",
                      "example": "A testing flow."
                    },
                    "channel_type": {
                      "type": "string",
                      "description": "The flow's channel type.",
                      "example": "voice",
                      "deprecated": true,
                      "enum": [
                        "voice",
                        "chat",
                        "sms",
                        "video",
                        "in_app_chat"
                      ]
                    },
                    "channel": {
                      "type": "string",
                      "description": "The flow's channel.",
                      "example": "messaging",
                      "enum": [
                        "voice",
                        "video",
                        "messaging",
                        "email"
                      ]
                    },
                    "channel_source": {
                      "type": "string",
                      "description": "The channel's source. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel.\n* `facebook_messenger` - Only applies to messaging channel.\n* `whatsapp` - Only applies to messaging channel. \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel.\n* `facebook_messenger` - Only applies to messaging channel.\n* `email_address` - Only applies to email channel.",
                      "example": "web_chat",
                      "enum": [
                        "web_chat",
                        "in_app_chat",
                        "sms",
                        "facebook_messenger",
                        "whatsapp",
                        "email_address"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "description": "This flow's status.",
                      "example": "published",
                      "enum": [
                        "draft",
                        "published",
                        "archived",
                        "debugging"
                      ]
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The parent ID of the user who modified the flow.",
                      "example": "jdhgdhghk376453hjdf"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time when this flow was last modified. ",
                      "example": "2022-08-05T01:55:52Z"
                    },
                    "entry_points": {
                      "type": "array",
                      "description": "The flow's entry points.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entry_id": {
                            "type": "string",
                            "description": "The flow's entry point ID.",
                            "example": "x_h7uCj3TtScXWOBnQnKrw"
                          },
                          "entry_name": {
                            "type": "string",
                            "description": "The flow's entry point name, applicable to Video, Web Chat and In-App Chat.",
                            "example": "Test video"
                          },
                          "entry_number": {
                            "type": "string",
                            "description": "The flow's entry point number, applicable to voice and SMS.",
                            "example": "+16052052430"
                          },
                          "entry_language": {
                            "type": "string",
                            "description": "The flow's entry point engagement language.",
                            "example": "en-US"
                          },
                          "email_address": {
                            "type": "string",
                            "description": "The flow's entry point email address. Applicable to email.",
                            "example": "xxxx@zoom.us"
                          }
                        }
                      }
                    },
                    "flow_versions": {
                      "type": "array",
                      "description": "The flow's versions.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "flow_version_id": {
                            "type": "string",
                            "description": "The flow's studio version ID.",
                            "example": "EWg5URJZRXKwfbLJpeJWyA"
                          },
                          "flow_version_description": {
                            "type": "string",
                            "description": "The flow's version description.",
                            "example": "Version 1"
                          },
                          "flow_version_status": {
                            "type": "string",
                            "description": "The flow version's status.",
                            "example": "draft",
                            "enum": [
                              "draft",
                              "published",
                              "archived",
                              "debugging"
                            ]
                          },
                          "flow_version": {
                            "type": "integer",
                            "description": "The flow's version.",
                            "example": 2
                          },
                          "flow_version_modified_by": {
                            "type": "string",
                            "description": "The parent ID of the user who modified the flow version.",
                            "example": "jdhgdhghk376453hjdf"
                          },
                          "flow_version_last_modified_time": {
                            "type": "string",
                            "description": "The date and time when this flow version was last modified. ",
                            "example": "2022-08-05T01:55:52Z"
                          }
                        },
                        "description": "The flow versions' detailed information."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `3201` <br>\n Flow does not exist: $flowId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_flow:read:admin",
              "contact_center:read:flow:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_flow:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:flow:admin"
          ]
        }
      }
    },
    "/contact_center/inboxes": {
      "get": {
        "tags": [
          "Inboxes"
        ],
        "summary": "List inboxes",
        "description": "Return a list of inboxes. \n\n \n\n**Scopes:** `contact_center_inbox:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_inboxes:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listInbox",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nInbox list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "inboxes": {
                      "type": "array",
                      "description": "Information about the notes.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "inbox_id": {
                            "type": "string",
                            "description": "The inbox's unique ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "inbox_name": {
                            "type": "string",
                            "description": "The inbox's name.",
                            "example": "example"
                          },
                          "inbox_type": {
                            "type": "string",
                            "description": "The inbox type.\n* voicemail",
                            "example": "voicemail",
                            "enum": [
                              "voicemail"
                            ]
                          },
                          "access_user_count": {
                            "type": "integer",
                            "description": "The inbox access user count.",
                            "example": 5
                          },
                          "access_queue_count": {
                            "type": "integer",
                            "description": "The inbox access queue count.",
                            "example": 5
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The inbox's last modification time.",
                            "format": "date-time",
                            "example": "2022-05-23T14:15:57Z"
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of last user to modify the inbox.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          }
                        },
                        "description": "Information about the inbox."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:read:admin",
              "contact_center:read:list_inboxes:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_inbox:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_inboxes:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Create an inbox",
        "description": "Create a new inbox. \n\n \n\n**Scopes:** `contact_center_inbox:write:admin`\n\n**Granular Scopes:** `contact_center:write:inbox:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "inboxCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inbox_name": {
                    "type": "string",
                    "description": "The inbox's name.",
                    "example": "example"
                  },
                  "inbox_description": {
                    "type": "string",
                    "description": "The inbox's description.",
                    "example": "This is a inbox."
                  },
                  "inbox_type": {
                    "type": "string",
                    "description": "The inbox type.\n* voicemail",
                    "example": "voicemail",
                    "enum": [
                      "voicemail"
                    ]
                  },
                  "inbox_content_storage_location": {
                    "type": "string",
                    "description": "The inbox content's physical storage location, using a two-letter country code. \n\n US: `United States`\n\nAU: `Australia`\n\n\nBR: `Brazil`\n\nCA: `Canada`\n\nDE: `Germany`\n\nJP: `Japan`\n\nSG: `Singapore`",
                    "example": "US",
                    "enum": [
                      "US",
                      "AU",
                      "BR",
                      "CA",
                      "DE",
                      "JP",
                      "SG"
                    ]
                  },
                  "voicemail": {
                    "type": "object",
                    "properties": {
                      "soft_delete": {
                        "type": "boolean",
                        "description": "Enable soft deletion for the inbox.",
                        "example": true
                      },
                      "soft_delete_days_limit": {
                        "type": "integer",
                        "description": "When a voicemail is deleted, it is initially soft-deleted and can be restored within the admin-specified timeframe, which is up to 30 days. After that time, the voicemail is permanently deleted.",
                        "example": 20
                      },
                      "voicemail_time_limit": {
                        "type": "integer",
                        "description": "The voicemail time limit in minutes.",
                        "example": 5
                      },
                      "delete_voicemail_days_limit": {
                        "type": "integer",
                        "description": "Delete voicemail after a specified number of days.",
                        "example": 30
                      },
                      "voicemail_transcription": {
                        "type": "boolean",
                        "description": "The voicemail enable transcription.",
                        "example": false
                      },
                      "voicemail_notification_by_email": {
                        "type": "object",
                        "properties": {
                          "enable": {
                            "type": "boolean",
                            "description": "Enable voicemail notification by email.",
                            "example": false
                          },
                          "include_voicemail_file": {
                            "type": "boolean",
                            "description": "Whether to include voicemail file.",
                            "example": false
                          },
                          "include_voicemail_transcription": {
                            "type": "boolean",
                            "description": "Whether to include voicemail transcription.",
                            "example": false
                          },
                          "forward_voicemail_to_emails": {
                            "type": "boolean",
                            "description": "Enable forward voicemail to emails.",
                            "example": false
                          },
                          "emails": {
                            "type": "array",
                            "description": "Forward voicemail to an email list.",
                            "items": {
                              "type": "string",
                              "example": "jchill@example.com"
                            }
                          }
                        },
                        "description": "The voicemail notification by email."
                      }
                    },
                    "description": "The voicemail settings."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nInbox created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "inbox_id": {
                      "type": "string",
                      "description": "The inbox's unique ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "inbox_name": {
                      "type": "string",
                      "description": "The inbox's name.",
                      "example": "example"
                    },
                    "inbox_description": {
                      "type": "string",
                      "description": "The inbox's description.",
                      "example": "This is a inbox."
                    },
                    "inbox_type": {
                      "type": "string",
                      "description": "The inbox type.\n* voicemail",
                      "example": "voicemail",
                      "enum": [
                        "voicemail"
                      ]
                    },
                    "inbox_content_storage_location": {
                      "type": "string",
                      "description": "The inbox content's physical storage location, using a two-letter country code. \n\n US: `United States`\n\nAU: `Australia`\n\n\nBR: `Brazil`\n\nCA: `Canada`\n\nDE: `Germany`\n\nJP: `Japan`\n\nSG: `Singapore`",
                      "example": "US",
                      "enum": [
                        "US",
                        "AU",
                        "BR",
                        "CA",
                        "DE",
                        "JP",
                        "SG"
                      ]
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The inbox's last modification time.",
                      "format": "date-time",
                      "example": "2022-05-23T14:15:57Z"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of last user to modify the inbox.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "voicemail": {
                      "type": "object",
                      "properties": {
                        "soft_delete": {
                          "type": "boolean",
                          "description": "Enable soft deletion for the inbox.",
                          "example": true
                        },
                        "soft_delete_days_limit": {
                          "type": "integer",
                          "description": "When a voicemail is deleted, it is initially soft-deleted and can be restored within the admin-specified timeframe, which is up to 30 days. After that time, the voicemail is permanently deleted.",
                          "example": 20
                        },
                        "voicemail_time_limit": {
                          "type": "integer",
                          "description": "The voicemail time limit in minutes.",
                          "example": 5
                        },
                        "delete_voicemail_days_limit": {
                          "type": "integer",
                          "description": "Delete voicemail after a specified number of days.",
                          "example": 30
                        },
                        "voicemail_transcription": {
                          "type": "boolean",
                          "description": "Enable voicemail transcription.",
                          "example": false
                        },
                        "voicemail_notification_by_email": {
                          "type": "object",
                          "properties": {
                            "enable": {
                              "type": "boolean",
                              "description": "The voicemail enable notification by email.",
                              "example": false
                            },
                            "include_voicemail_file": {
                              "type": "boolean",
                              "description": "Whether to include voicemail file.",
                              "example": false
                            },
                            "include_voicemail_transcription": {
                              "type": "boolean",
                              "description": "Whether to include voicemail transcription.",
                              "example": false
                            },
                            "forward_voicemail_to_emails": {
                              "type": "boolean",
                              "description": "Enable forwarding voicemail to emails.",
                              "example": false
                            },
                            "emails": {
                              "type": "array",
                              "description": "Forward voicemail to an email list.",
                              "items": {
                                "type": "string",
                                "example": "jchill@example.com"
                              }
                            }
                          },
                          "description": "The voicemail notification by email."
                        }
                      },
                      "description": "The voicemail settings."
                    }
                  },
                  "description": "Information about the inbox."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:write:admin",
              "contact_center:write:inbox:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_inbox:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:inbox:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Delete inboxes",
        "description": "Delete one or more inboxes. \n\n \n\n**Scopes:** `contact_center_inbox:write:admin`\n\n**Granular Scopes:** `contact_center:delete:inbox:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "inboxesDelete",
        "parameters": [
          {
            "name": "inbox_ids",
            "in": "query",
            "description": "List all inboxes to delete.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "W_VATTk_Q5aW6z5rZtBxAQ"
              }
            }
          },
          {
            "name": "delete_all_messages_and_inboxes",
            "in": "query",
            "description": "Delete all inboxes and messages provided.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "move_to_inbox_id",
            "in": "query",
            "description": "The ID of the inbox where messages from deleted inbox(es) will be moved.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "w3v6brV3T-6MK1if1nw8PA"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nInboxes deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3001` <br>\nInbox does not exist: $inboxId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:write:admin",
              "contact_center:delete:inbox:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_inbox:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:inbox:admin"
          ]
        }
      }
    },
    "/contact_center/inboxes/messages": {
      "get": {
        "tags": [
          "Inboxes"
        ],
        "summary": "List an account's inbox messages",
        "description": "Return all messages in an inbox. \n\n \n\n**Scopes:** `contact_center_inbox:read:admin`\n\n**Granular Scopes:** `contact_center:read:inbox_messages:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listInboxesMessages",
        "parameters": [
          {
            "name": "queue_ids",
            "in": "query",
            "description": "The queue's IDs. The maximum value is 10 ",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "ghyetrjj_2342353rsgfkdjfl"
              }
            }
          },
          {
            "name": "cc_queue_ids",
            "in": "query",
            "description": "The Contact Center queue's IDs. The maximum value is 10.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "ghyetrjj_2342353rsgfkdjfl"
              }
            }
          },
          {
            "name": "inbox_id",
            "in": "query",
            "description": "The inbox's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          },
          {
            "name": "flow_id",
            "in": "query",
            "description": "The flow's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ghyetrjj_2342353rsgfkdjfl"
            }
          },
          {
            "name": "minimum_duration",
            "in": "query",
            "description": "The minimum duration.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "name": "maximum_duration",
            "in": "query",
            "description": "The maximum duration.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 50
            }
          },
          {
            "name": "message_type",
            "in": "query",
            "description": "The inbox message's type.\n* voicemail",
            "required": false,
            "schema": {
              "type": "string",
              "example": "voicemail",
              "enum": [
                "voicemail"
              ]
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month maximum, as the response only includes one month's worth of data at once. If unspecified, this parameter returns data from the past 30 days.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-05-01"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when specifying the `from` parameter. The end time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-05-31"
            }
          },
          {
            "name": "engagement_id",
            "in": "query",
            "description": "Filter inbox messages by engagement ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1234"
            }
          },
          {
            "name": "consumer_number",
            "in": "query",
            "description": "Filter inbox messages by consumer number.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1234"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter inbox messages by status.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "normal",
              "enum": [
                "normal",
                "deleted"
              ]
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nInbox messages returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "messages": {
                      "type": "array",
                      "description": "Information about the inbox message.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message_id": {
                            "type": "string",
                            "description": "The inbox message's ID.",
                            "example": "4Q0ILNMfTA2nJolNxhg0Rw"
                          },
                          "inbox_id": {
                            "type": "string",
                            "description": "The inbox's unique ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "inbox_name": {
                            "type": "string",
                            "description": "The inbox's name.",
                            "example": "example"
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement's ID.",
                            "example": "xRk0eHNNTGygFDPrWqR9FA"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "The inbox message's creation time.",
                            "format": "date-time",
                            "example": "2022-05-23T14:15:57Z"
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The flow's ID.",
                            "example": "1wGgU3HQR8u1wWjPFNXOyA"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The flow's name.",
                            "example": "inbox_message_flow"
                          },
                          "queue_id": {
                            "type": "string",
                            "description": "The queue ID of the inbox message routed by the queue.",
                            "example": "ZWQ84A20CBBA11AFA5BC55079D5A12A28D7",
                            "deprecated": true
                          },
                          "cci_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue ID of the inbox message routed by the queue.",
                            "example": "LB937Z8oQP2mJxeNj3GxJQ"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue name of the inbox message routed by the queue.",
                            "example": "inbox_message_queue"
                          },
                          "message_type": {
                            "type": "string",
                            "description": "The inbox message's type.\n* voicemail",
                            "example": "voicemail",
                            "enum": [
                              "voicemail"
                            ]
                          },
                          "download_url": {
                            "type": "string",
                            "description": "The URL to download the inbox message. For security purposes, you **must** provide an OAuth access token in the authorization header to download the inbox message file using this URL. Example:\n```curl --request GET \n  --url {download_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/inbox/message/download/4Q0ILNMfTA2nJolNxhg0Rw?type=voicemail"
                          },
                          "playback_url": {
                            "type": "string",
                            "description": "The URL to playback the inbox message. For security purposes, you  **must** provide an OAuth access token in the authorization header to playback the inbox message file using this URL. Example:\n```curl --request GET \n  --url {playback_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/inbox/message/playback/4Q0ILNMfTA2nJolNxhg0Rw?type=voicemail"
                          },
                          "transcript_url": {
                            "type": "string",
                            "description": "The URL to download the inbox message transcript. For security purposes, you **must** provide an OAuth access token in the authorization header to download the recording transcript file using this URL. Example:\n```curl --request GET \n  --url {transcript_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/inbox/message/transcripts/download/4Q0ILNMfTA2nJolNxhg0Rw"
                          },
                          "message_duration": {
                            "type": "integer",
                            "description": "The inbox message's duration in seconds.",
                            "example": 150
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The consumer's phone number.",
                            "example": "+12058945728"
                          },
                          "consumer_id": {
                            "type": "string",
                            "description": "The consumer's ID.",
                            "example": "fsdfere78fserhgfyjb"
                          },
                          "consumer_display_name": {
                            "type": "string",
                            "description": "The consumer's name.",
                            "example": "Jill"
                          },
                          "status": {
                            "type": "string",
                            "description": "The inbox message soft delete flag. \n* normal \n* deleted",
                            "example": "normal",
                            "enum": [
                              "normal",
                              "deleted"
                            ]
                          }
                        },
                        "description": "Information about the inbox message."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:read:admin",
              "contact_center:read:inbox_messages:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_inbox:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:inbox_messages:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Delete inbox messages",
        "description": "Delete messages. \n\n \n\n**Scopes:** `contact_center_inbox:write:admin`\n\n**Granular Scopes:** `contact_center:delete:inbox_messages:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "inboxesMessagesDelete",
        "parameters": [
          {
            "name": "delete_all_messages",
            "in": "query",
            "description": "Whether or not to delete all inbox messages.\n\n `true` - Delete all inbox messages related to the filtered queues or flows. \n\n `false` - No inbox message is deleted.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "queue_ids",
            "in": "query",
            "description": "The queue's IDs. The maximum value is 10.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "ghyetrjj_2342353rsgfkdjfl"
              }
            }
          },
          {
            "name": "cc_queue_ids",
            "in": "query",
            "description": "The Contact Center queue's IDs. The maximum value is 10.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "ghyetrjj_2342353rsgfkdjfl"
              }
            }
          },
          {
            "name": "flow_ids",
            "in": "query",
            "description": "List of flow's IDs, up to 10 separate IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "ghyetrjj_2342353rsgfkdjfl"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nInbox messages deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:write:admin",
              "contact_center:delete:inbox_messages:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_inbox:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:inbox_messages:admin"
          ]
        }
      }
    },
    "/contact_center/inboxes/{inboxId}": {
      "get": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Get an inbox",
        "description": "Retrieve an inbox. \n\n \n\n**Scopes:** `contact_center_inbox:read:admin`\n\n**Granular Scopes:** `contact_center:read:inbox:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getInbox",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nInbox returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "inbox_id": {
                      "type": "string",
                      "description": "The inbox's unique ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "inbox_name": {
                      "type": "string",
                      "description": "The inbox's name.",
                      "example": "example"
                    },
                    "inbox_description": {
                      "type": "string",
                      "description": "The inbox's description.",
                      "example": "This is a inbox."
                    },
                    "inbox_type": {
                      "type": "string",
                      "description": "The inbox type.\n* voicemail",
                      "example": "voicemail",
                      "enum": [
                        "voicemail"
                      ]
                    },
                    "inbox_content_storage_location": {
                      "type": "string",
                      "description": "The inbox content's physical storage location, using a two-letter country code. \n\n US: `United States`\n\nAU: `Australia`\n\n\nBR: `Brazil`\n\nCA: `Canada`\n\nDE: `Germany`\n\nJP: `Japan`\n\nSG: `Singapore`",
                      "example": "US",
                      "enum": [
                        "US",
                        "AU",
                        "BR",
                        "CA",
                        "DE",
                        "JP",
                        "SG"
                      ]
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The inbox's last modification time.",
                      "format": "date-time",
                      "example": "2022-05-23T14:15:57Z"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of last user to modify the inbox.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "voicemail": {
                      "type": "object",
                      "properties": {
                        "soft_delete": {
                          "type": "boolean",
                          "description": "Enable soft deletion for the inbox.",
                          "example": true
                        },
                        "soft_delete_days_limit": {
                          "type": "integer",
                          "description": "When a voicemail is deleted, it is initially soft-deleted and can be restored within the admin-specified timeframe, which is up to 30 days. After that time, the voicemail is permanently deleted.",
                          "example": 20
                        },
                        "voicemail_time_limit": {
                          "type": "integer",
                          "description": "The voicemail time limit in minutes.",
                          "example": 5
                        },
                        "delete_voicemail_days_limit": {
                          "type": "integer",
                          "description": "Delete voicemail after a specified number of days.",
                          "example": 30
                        },
                        "voicemail_transcription": {
                          "type": "boolean",
                          "description": "Enable voicemail transcription.",
                          "example": false
                        },
                        "voicemail_notification_by_email": {
                          "type": "object",
                          "properties": {
                            "enable": {
                              "type": "boolean",
                              "description": "The voicemail enable notification by email.",
                              "example": false
                            },
                            "include_voicemail_file": {
                              "type": "boolean",
                              "description": "Whether to include voicemail file.",
                              "example": false
                            },
                            "include_voicemail_transcription": {
                              "type": "boolean",
                              "description": "Whether to include voicemail transcription.",
                              "example": false
                            },
                            "forward_voicemail_to_emails": {
                              "type": "boolean",
                              "description": "Enable forwarding voicemail to emails.",
                              "example": false
                            },
                            "emails": {
                              "type": "array",
                              "description": "Forward voicemail to email list.",
                              "items": {
                                "type": "string",
                                "example": "jchill@example.com"
                              }
                            }
                          },
                          "description": "The voicemail notification by email."
                        }
                      },
                      "description": "The voicemail settings."
                    }
                  },
                  "description": "Information about the inbox."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3001` <br>\nInbox does not exist: $inboxId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:read:admin",
              "contact_center:read:inbox:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_inbox:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:inbox:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Update an inbox",
        "description": "Update an inbox. \n\n \n\n**Scopes:** `contact_center_inbox:write:admin`\n\n**Granular Scopes:** `contact_center:update:inbox:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "inboxUpdate",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inbox_name": {
                    "type": "string",
                    "description": "The inbox's name.",
                    "example": "example"
                  },
                  "inbox_description": {
                    "type": "string",
                    "description": "The inbox's description.",
                    "example": "This is a inbox."
                  },
                  "inbox_content_storage_location": {
                    "type": "string",
                    "description": "The inbox content's physical storage location, using a two-letter country code. \n\n US: `United States`\n\nAU: `Australia`\n\n\nBR: `Brazil`\n\nCA: `Canada`\n\nDE: `Germany`\n\nJP: `Japan`\n\nSG: `Singapore`",
                    "example": "US",
                    "enum": [
                      "US",
                      "AU",
                      "BR",
                      "CA",
                      "DE",
                      "JP",
                      "SG"
                    ]
                  },
                  "voicemail": {
                    "type": "object",
                    "properties": {
                      "soft_delete": {
                        "type": "boolean",
                        "description": "Enable soft deletion for the inbox.",
                        "example": true
                      },
                      "soft_delete_days_limit": {
                        "type": "integer",
                        "description": "When a voicemail is deleted, it is initially soft-deleted and can be restored within the admin-specified timeframe, which is up to 30 days. After that time, the voicemail is permanently deleted.",
                        "example": 20
                      },
                      "voicemail_time_limit": {
                        "type": "integer",
                        "description": "The voicemail time limit in minutes.",
                        "example": 5
                      },
                      "delete_voicemail_days_limit": {
                        "type": "integer",
                        "description": "Delete voicemail after a specified number of days.",
                        "example": 30
                      },
                      "voicemail_transcription": {
                        "type": "boolean",
                        "description": "Enable voicemail transcription.",
                        "example": false
                      },
                      "voicemail_notification_by_email": {
                        "type": "object",
                        "properties": {
                          "enable": {
                            "type": "boolean",
                            "description": "The voicemail enable notification by email.",
                            "example": false
                          },
                          "include_voicemail_file": {
                            "type": "boolean",
                            "description": "Whether to include voicemail file.",
                            "example": false
                          },
                          "include_voicemail_transcription": {
                            "type": "boolean",
                            "description": "Whether to include voicemail transcription.",
                            "example": false
                          },
                          "forward_voicemail_to_emails": {
                            "type": "boolean",
                            "description": "Enable forwarding voicemail to emails.",
                            "example": false
                          },
                          "emails": {
                            "type": "array",
                            "description": "Forward voicemail to email list.",
                            "items": {
                              "type": "string",
                              "example": "jchill@example.com"
                            }
                          }
                        },
                        "description": "The voicemail notification by email."
                      }
                    },
                    "description": "The voicemail settings."
                  }
                },
                "description": "Information about the inbox."
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nInbox updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3001` <br>\nInbox does not exist: $inboxId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:write:admin",
              "contact_center:update:inbox:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_inbox:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:inbox:admin"
          ]
        }
      }
    },
    "/contact_center/inboxes/{inboxId}/messages": {
      "get": {
        "tags": [
          "Inboxes"
        ],
        "summary": "List an inbox's messages",
        "description": "Return a list of all messages in an inbox. \n\n \n\n**Scopes:** `contact_center_inbox:read:admin`\n\n**Granular Scopes:** `contact_center:read:inbox_messages:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listInboxMessages",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          },
          {
            "name": "queue_ids",
            "in": "query",
            "description": "The queue's IDs. The maximum value is 10.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "ghyetrjj_2342353rsgfkdjfl"
              }
            }
          },
          {
            "name": "message_type",
            "in": "query",
            "description": "The inbox message's type.\n* voicemail",
            "required": false,
            "schema": {
              "type": "string",
              "example": "voicemail",
              "enum": [
                "voicemail"
              ]
            }
          },
          {
            "name": "flow_id",
            "in": "query",
            "description": "The flow's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ghyetrjj_2342353rsgfkdjfl"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month maximum, as the response only includes one month's worth of data at once. If unspecified, this parameter returns data from the past 30 days.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-05-01"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when specifying the `from` parameter. The end time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-05-31"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nInbox messages returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "messages": {
                      "type": "array",
                      "description": "Information about the inbox message.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message_id": {
                            "type": "string",
                            "description": "The inbox message's ID.",
                            "example": "4Q0ILNMfTA2nJolNxhg0Rw"
                          },
                          "inbox_id": {
                            "type": "string",
                            "description": "The inbox's unique ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "inbox_name": {
                            "type": "string",
                            "description": "The inbox's name.",
                            "example": "example"
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement's ID.",
                            "example": "xRk0eHNNTGygFDPrWqR9FA"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "The inbox message's creation time.",
                            "format": "date-time",
                            "example": "2022-05-23T14:15:57Z"
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The flow's ID.",
                            "example": "1wGgU3HQR8u1wWjPFNXOyA"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The flow's name.",
                            "example": "inbox_message_flow"
                          },
                          "queue_id": {
                            "type": "string",
                            "description": "The queue ID of the inbox message routed by the queue.",
                            "example": "ZWQ84A20CBBA11AFA5BC55079D5A12A28D7"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue name of the inbox message routed by the queue.",
                            "example": "inbox_message_queue"
                          },
                          "message_type": {
                            "type": "string",
                            "description": "The inbox message's type.\n* voicemail",
                            "example": "voicemail",
                            "enum": [
                              "voicemail"
                            ]
                          },
                          "download_url": {
                            "type": "string",
                            "description": "The URL to download the inbox message. For security purposes, you **must** provide an OAuth access token in the authorization header to download the inbox message file using this URL. Example:\n```curl --request GET \n  --url {download_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/inbox/message/download/4Q0ILNMfTA2nJolNxhg0Rw?type=voicemail"
                          },
                          "playback_url": {
                            "type": "string",
                            "description": "The URL to playback the inbox message. For security purposes, you  **must** provide an OAuth access token in the authorization header to playback the inbox message file using this URL. Example:\n```curl --request GET \n  --url {playback_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/inbox/message/playback/4Q0ILNMfTA2nJolNxhg0Rw?type=voicemail"
                          },
                          "transcript_url": {
                            "type": "string",
                            "description": "The URL to download the inbox message transcript. For security purposes, you **must** provide an OAuth access token in the authorization header to download the recording transcript file using this URL. Example:\n```curl --request GET \n  --url {transcript_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/inbox/message/transcripts/download/4Q0ILNMfTA2nJolNxhg0Rw"
                          },
                          "message_duration": {
                            "type": "integer",
                            "description": "The inbox message's duration in seconds.",
                            "example": 150
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The consumer's phone number.",
                            "example": "+12058945728"
                          },
                          "consumer_id": {
                            "type": "string",
                            "description": "The consumer's ID.",
                            "example": "fsdfere78fserhgfyjb"
                          },
                          "consumer_display_name": {
                            "type": "string",
                            "description": "The consumer's name.",
                            "example": "Jill"
                          },
                          "status": {
                            "type": "string",
                            "description": "The inbox message soft delete flag. \n* normal \n* deleted",
                            "example": "normal",
                            "enum": [
                              "normal",
                              "deleted"
                            ]
                          }
                        },
                        "description": "Information about the inbox message."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3001` <br>\nInbox does not exist: $inboxId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:read:admin",
              "contact_center:read:inbox_messages:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_inbox:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:inbox_messages:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Delete an inbox's messages",
        "description": "Delete messages in an inbox. \n\n \n\n**Scopes:** `contact_center_inbox:write:admin`\n\n**Granular Scopes:** `contact_center:delete:inbox_messages:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "inboxMessagesDelete",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          },
          {
            "name": "delete_all_messages",
            "in": "query",
            "description": "Whether or not to delete all messages in a given inbox.\n\n true: delete all messages under an inbox.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true,
              "default": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nInbox messages deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3001` <br>\nInbox does not exist: $inboxId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:write:admin",
              "contact_center:delete:inbox_messages:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_inbox:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:inbox_messages:admin"
          ]
        }
      }
    },
    "/contact_center/inboxes/{inboxId}/messages/{messageId}": {
      "delete": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Delete an inbox message",
        "description": "Delete a single message in an inbox. \n\n \n\n**Scopes:** `contact_center_inbox:write:admin`\n\n**Granular Scopes:** `contact_center:delete:inbox_message:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "inboxMessageDelete",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The inbox message's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kopVATTk_Q5awefgretBxAQ"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nInbox message deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3001` <br>\nInbox does not exist: $inboxId.\n\n**Error Code:** `3101` <br>\nInbox message does not exist: $messageId.\n\n**Error Code:** `3102` <br>\nThe inbox id that matches this message id is: $inboxId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_inbox:write:admin",
              "contact_center:delete:inbox_message:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_inbox:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:inbox_message:admin"
          ]
        }
      }
    },
    "/contact_center/inboxes/{inboxId}/queues": {
      "get": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Get inbox access queues",
        "description": "Retrieve a list of queues that have access to an inbox. \n\n \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_inbox_queues:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listInboxQueues",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "&quot;**HTTP Status Code:** `200`   \n \nList of inbox queues returned.&quot;",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the task queues.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The task queue's ID.",
                            "example": "Ql3qxUWXSHes4PmcOmzyOg",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "Ql3qxUWXSHes4PmcOmzyOg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The task queue's name.",
                            "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
                          },
                          "agents_count": {
                            "type": "integer",
                            "description": "The number of assigned agents.",
                            "example": 1
                          },
                          "supervisors_count": {
                            "type": "integer",
                            "description": "The number of assigned supervisors.",
                            "example": 1
                          },
                          "channel_types": {
                            "type": "array",
                            "description": "The task queue's channel types.",
                            "items": {
                              "type": "string",
                              "example": "voice",
                              "enum": [
                                "voice",
                                "chat",
                                "sms",
                                "video",
                                "in_app_chat"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `3001` <br>\n Inbox does not exist: $inboxId.<br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:read:list_inbox_queues:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_inbox_queues:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Assign inbox access queues",
        "description": "Assign queues access to an inbox. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:write:inbox_queue:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "assignInboxQueues",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queue_ids": {
                    "maxItems": 30,
                    "type": "array",
                    "deprecated": true,
                    "items": {
                      "type": "string",
                      "description": "The queue's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    }
                  },
                  "cc_queue_ids": {
                    "maxItems": 30,
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "The Contact Center queue's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nList of queues has been updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1202` <br>\n \"Queues do not exist: [$queue_id].\"<br> <br>\n**Error Code:** `1203` <br>\n Queue is already assigned to inbox: [$queue_id]. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `3001` <br>\n Inbox does not exist: $inboxId.<br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:write:inbox_queue:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:inbox_queue:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Remove inbox access queues",
        "description": "Remove queues' access to an inbox. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:delete:inbox_queue:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "unassignInboxQueues",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          },
          {
            "name": "queue_ids",
            "in": "query",
            "description": "The queue's IDs. The maximum value is 10.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "ghyetrjj_2342353rsgfkdjfl"
              }
            }
          },
          {
            "name": "cc_queue_ids",
            "in": "query",
            "description": "The Contact Center queue's IDs. The maximum value is 10.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "ghyetrjj_2342353rsgfkdjfl"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueues' access has been removed from the inbox."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1202` <br>\n \"Queues do not exist: [$queue_id].\"<br> <br>\n**Error Code:** `1204` <br>\n Queue is not assigned to inbox: [$queue_id]. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `3001` <br>\n Inbox does not exist: $inboxId.<br> <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:delete:inbox_queue:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:inbox_queue:admin"
          ]
        }
      }
    },
    "/contact_center/inboxes/{inboxId}/users": {
      "get": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Get an inbox's users",
        "description": "Retrieve a list of users assigned to an inbox. \n\n \n\n**Scopes:** `contact_center_user:read:admin`\n\n**Granular Scopes:** `contact_center:read:inbox_user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listInboxUsers",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "&quot;**HTTP Status Code:** `200`   \n \nList of inbox users returned.&quot;",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "users": {
                      "type": "array",
                      "description": "Information about the users.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3001` <br>\nInbox does not exist: $inboxId.<br>\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:read:admin",
              "contact_center:read:inbox_user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_user:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:inbox_user:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Assign inbox access users",
        "description": "Assign a user's access to an inbox. \n\n \n\n**Scopes:** `contact_center_user:write:admin`\n\n**Granular Scopes:** `contact_center:write:inbox_user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "assignInboxUsers",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_ids:": {
                    "maxItems": 30,
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "The user's ID.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nList of users has been updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `1012` <br>\n\"Users do not exist: [$user_id].\"<br>\n\n**Error Code:** `1013` <br>\nUser is already assigned to inbox: [$user_id].\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3001` <br>\nInbox does not exist: $inboxId.<br>\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:write:admin",
              "contact_center:write:inbox_user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_user:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:inbox_user:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Unassign inbox access users",
        "description": "Remove users' access to an inbox. \n\n \n\n**Scopes:** `contact_center_user:write:admin`\n\n**Granular Scopes:** `contact_center:delete:inbox_user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "unassignInboxUsers",
        "parameters": [
          {
            "name": "inboxId",
            "in": "path",
            "description": "The inbox's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "description": "A comma-separated list of user IDs to query, up to 30 user IDs.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "IGTRVt3gQ2i-WjoUIjeZxw"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nUsers' access has been removed from the inbox."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `1012` <br>\n\"Users do not exist: [$user_id].\"<br>\n\n**Error Code:** `1014` <br>\nUser is not assigned to inbox: [$user_id].\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3001` <br>\nInbox does not exist: $inboxId.<br>\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:write:admin",
              "contact_center:delete:inbox_user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_user:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:inbox_user:admin"
          ]
        }
      }
    },
    "/contact_center/sms": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "List SMS logs",
        "description": "Returns a list of SMS. \n\n \n\n**Scopes:** `contact_center_sms:read:admin`\n\n**Granular Scopes:** `contact_center:read:sms_log:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "listSMS",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "example": 10,
              "default": 10
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in yyyy-mm-dd or ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'). The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameter is specified. The end time and date in yyyy-mm-dd or ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD').",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "country_iso_codes",
            "in": "query",
            "description": "Two-letter ISO country [code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
            "required": false,
            "schema": {
              "type": "array",
              "example": [
                "US"
              ],
              "items": {
                "type": "string",
                "example": "CN"
              }
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "The engagement's direction.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "inbound",
              "enum": [
                "inbound",
                "outbound"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The agent's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ukAAkZKfROKMSw1bj_RDFQ"
            }
          },
          {
            "name": "engagement_id",
            "in": "query",
            "description": "The engagement's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "3XilEfOvQEKRIWMWhX1jDg"
            }
          },
          {
            "name": "consumer_number",
            "in": "query",
            "description": "The consumer's phone number.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "+12059300920"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nVariables list returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 100,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 10
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in ISO 8601 format, yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
                      "format": "date-time",
                      "example": "2023-01-01T08:00:00Z"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
                      "format": "date-time",
                      "example": "2023-01-01T09:00:00Z"
                    },
                    "sms": {
                      "type": "array",
                      "description": "Information about the SMS.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "direction": {
                            "type": "string",
                            "description": "The engagement's direction. `inbound` | `outbound`.",
                            "example": "inbound",
                            "enum": [
                              "inbound",
                              "outbound"
                            ]
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement's ID",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "contact_center_number": {
                            "type": "string",
                            "description": "The agent's number. An agent used a flow/queue number and did not really have its own number.",
                            "example": "+18108001001"
                          },
                          "start_time": {
                            "type": "string",
                            "description": "The date and time when the engagement started in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T08:00:00Z"
                          },
                          "end_time": {
                            "type": "string",
                            "description": "The date and time when the engagement ended in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T09:00:00Z"
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The consumer's phone number.",
                            "example": "+12059300920"
                          },
                          "consumer_display_name": {
                            "type": "string",
                            "description": "The consumer's name.",
                            "example": "Tester"
                          },
                          "queues": {
                            "type": "array",
                            "description": "Information about the engagement's queues.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "queue_id": {
                                  "type": "string",
                                  "description": "The queue's ID.",
                                  "example": "d95avl1eRJ-H162PZUJ-qg",
                                  "deprecated": true
                                },
                                "cc_queue_id": {
                                  "type": "string",
                                  "description": "The Contact Center queue's ID.",
                                  "example": "d95avl1eRJ-H162PZUJ-qg"
                                },
                                "queue_name": {
                                  "type": "string",
                                  "description": "The queue's name.",
                                  "example": "agentQueue"
                                }
                              },
                              "description": "Information about the queue."
                            }
                          },
                          "agents": {
                            "type": "array",
                            "description": "Information about the engagement's agents.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "user_id": {
                                  "type": "string",
                                  "description": "The agent's ID.",
                                  "example": "ukAAkZKfROKMSw1bj_RDFQ"
                                },
                                "display_name": {
                                  "type": "string",
                                  "description": "The agent's name.",
                                  "example": "Jilly"
                                }
                              },
                              "description": "Information about the queue."
                            }
                          },
                          "country_name": {
                            "type": "string",
                            "description": "The country name.",
                            "example": "China"
                          },
                          "sms_types": {
                            "type": "array",
                            "description": "The SMS's type.",
                            "items": {
                              "type": "string",
                              "example": "sms",
                              "enum": [
                                "sms",
                                "mms"
                              ]
                            }
                          },
                          "total_sent_messages": {
                            "type": "integer",
                            "description": "The total number of sent messages.",
                            "format": "int64",
                            "example": 0
                          },
                          "total_received_messages": {
                            "type": "integer",
                            "description": "The total number of received messages.",
                            "format": "int64",
                            "example": 0
                          },
                          "total_sent_files": {
                            "type": "integer",
                            "description": "The total number of sent files.",
                            "format": "int64",
                            "example": 0
                          },
                          "total_received_files": {
                            "type": "integer",
                            "description": "The total number of received files.",
                            "format": "int64",
                            "example": 0
                          }
                        },
                        "description": "Information about the SMS."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2901` <br>\n Engagement does not exist: $engagementId. <br>\n**Error Code:** `1001` <br>\n User does not exist: $userId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_sms:read:admin",
              "contact_center:read:sms_log:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_sms:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:sms_log:admin"
          ]
        }
      }
    },
    "/contact_center/voice_calls": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "List voice call logs",
        "description": "Returns a list of voice call logs. \n\n \n\n**Scopes:** `contact_center_voice_call:read:admin`\n\n**Granular Scopes:** `contact_center:read:voice_call_log:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "listVoiceCall",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "example": 10,
              "default": 10
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in yyyy-mm-dd or ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'). The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameter is specified. The end time and date in yyyy-mm-dd or ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The call's type.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "external_call",
                "enum": [
                  "external_call",
                  "external_conference_call",
                  "external_callback_call",
                  "internal_call",
                  "internal_conference_call",
                  "internal_callback_call"
                ]
              }
            }
          },
          {
            "name": "distribution",
            "in": "query",
            "description": "The engagement's distribution.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "acd",
              "enum": [
                "acd",
                "non_acd"
              ]
            }
          },
          {
            "name": "consumer_number",
            "in": "query",
            "description": "The consumer's phone number.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "+12059300920"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "The engagement's direction.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "inbound",
              "enum": [
                "inbound",
                "outbound"
              ]
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "description": "A comma-separated list of agents' user IDs to query, up to 20 agent IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "t9PXwOsSQ2qXp7YSPDrALQ"
              }
            }
          },
          {
            "name": "engagement_id",
            "in": "query",
            "description": "The engagement's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "3XilEfOvQEKRIWMWhX1jDg"
            }
          },
          {
            "name": "queue_ids",
            "in": "query",
            "description": "A comma-separated list of queue IDs to query, up to 20 queue IDs. If user provide `none`, filter by **No queue used** in the web UI.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Ql3qxUWXSHes4PmcOmzyOg"
              }
            }
          },
          {
            "name": "cc_queue_ids",
            "in": "query",
            "description": "A comma-separated list of Contact Center queue IDs to query, up to 20 queue IDs. If a user provides `none`, filter by **No queue used** in the web UI.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Ql3qxUWXSHes4PmcOmzyOg"
              }
            }
          },
          {
            "name": "country_iso_codes",
            "in": "query",
            "description": "Two-letter ISO country [code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "CN"
              }
            }
          },
          {
            "name": "number_types",
            "in": "query",
            "description": "The number's type.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "toll_free_number",
                "enum": [
                  "toll_free_number",
                  "virtual_service_number",
                  "byoc_number"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   Variables list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 100,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 10
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
                      "format": "date-time",
                      "example": "2023-01-01T08:00:00Z"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
                      "format": "date-time",
                      "example": "2023-01-01T09:00:00Z"
                    },
                    "voice_calls": {
                      "type": "array",
                      "description": "Information about the voice call.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement's ID",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "direction": {
                            "type": "string",
                            "description": "The engagement's direction. `inbound` | `outbound`.",
                            "example": "inbound",
                            "enum": [
                              "inbound",
                              "outbound"
                            ]
                          },
                          "call_legs": {
                            "type": "array",
                            "description": "The direction of the engagement call leg. `inbound` | `outbound`.",
                            "items": {
                              "type": "string",
                              "example": "inbound",
                              "enum": [
                                "inbound",
                                "outbound"
                              ]
                            }
                          },
                          "distributions": {
                            "type": "array",
                            "description": "The engagement's distribution. `acd` | `non_acd`.",
                            "items": {
                              "type": "string",
                              "example": "acd",
                              "enum": [
                                "acd",
                                "non_acd"
                              ]
                            }
                          },
                          "types": {
                            "type": "array",
                            "description": "The call's type.",
                            "items": {
                              "type": "string",
                              "example": "external_call",
                              "enum": [
                                "external_call",
                                "external_conference_call",
                                "external_callback_call",
                                "internal_call",
                                "internal_conference_call",
                                "internal_callback_call"
                              ]
                            }
                          },
                          "caller_number": {
                            "type": "string",
                            "description": "The caller's phone number.",
                            "example": "+18108001001"
                          },
                          "caller_number_type": {
                            "type": "string",
                            "description": "The caller's number type.",
                            "example": "toll_free_number",
                            "enum": [
                              "toll_free_number",
                              "virtual_service_number",
                              "byoc_number"
                            ]
                          },
                          "callee_number": {
                            "type": "string",
                            "description": "The callee's phone number.",
                            "example": "+12055437350"
                          },
                          "callee_number_type": {
                            "type": "string",
                            "description": "The callee's number type.",
                            "example": "toll_free_number",
                            "enum": [
                              "toll_free_number",
                              "virtual_service_number",
                              "byoc_number"
                            ]
                          },
                          "start_time": {
                            "type": "string",
                            "description": "The date and time when the engagement started in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "example": "2023-01-01T00:00:00-08:00"
                          },
                          "end_time": {
                            "type": "string",
                            "description": "The date and time when the engagement ended in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "example": "2023-01-01T01:00:00-08:00"
                          },
                          "total_duration": {
                            "type": "integer",
                            "description": "The engagement's total duration, in seconds.",
                            "format": "int64",
                            "example": 10
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The consumer's phone number.",
                            "example": "+12059300920"
                          },
                          "consumer_display_name": {
                            "type": "string",
                            "description": "The consumer's name.",
                            "example": "Tester"
                          },
                          "queues": {
                            "type": "array",
                            "description": "Information about the engagement's queues.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "queue_id": {
                                  "type": "string",
                                  "description": "The queue's ID.",
                                  "example": "d95avl1eRJ-H162PZUJ-qg",
                                  "deprecated": true
                                },
                                "cc_queue_id": {
                                  "type": "string",
                                  "description": "The Contact Center queue's ID.",
                                  "example": "d95avl1eRJ-H162PZUJ-qg"
                                },
                                "queue_name": {
                                  "type": "string",
                                  "description": "The queue's name.",
                                  "example": "agentQueue"
                                }
                              },
                              "description": "Information about the queue."
                            }
                          },
                          "agents": {
                            "type": "array",
                            "description": "Information about the engagement's agents.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "user_id": {
                                  "type": "string",
                                  "description": "The agent's ID.",
                                  "example": "ukAAkZKfROKMSw1bj_RDFQ"
                                },
                                "display_name": {
                                  "type": "string",
                                  "description": "The agent's name.",
                                  "example": "Jilly"
                                }
                              },
                              "description": "Information about the queue."
                            }
                          },
                          "flows": {
                            "type": "array",
                            "description": "Information about the engagement's flows.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "description": "The flow's ID.",
                                  "example": "zeYjXoDOS_eV1QmTpj63PQ"
                                },
                                "flow_name": {
                                  "type": "string",
                                  "description": "The flow's name.",
                                  "example": "Demo"
                                }
                              },
                              "description": "Information about the flow."
                            }
                          },
                          "country_name": {
                            "type": "string",
                            "description": "The country name.",
                            "example": "China"
                          },
                          "recorded": {
                            "type": "boolean",
                            "description": "Flag to determine whether to recorded.",
                            "example": false
                          },
                          "monitored": {
                            "type": "boolean",
                            "description": "Flag to determine whether to monitored.",
                            "example": false
                          },
                          "inbox": {
                            "type": "boolean",
                            "description": "Flag to determine whether a message is in the box.",
                            "example": false
                          },
                          "result": {
                            "type": "string",
                            "description": "The engagement's results. ",
                            "example": "completed",
                            "enum": [
                              "completed",
                              "short_abandoned",
                              "long_abandoned",
                              "hold_abandoned",
                              "long_calls",
                              "short_calls",
                              "hang_up_calls",
                              "overflowed_to_disconnect",
                              "overflowed_to_inbox",
                              "overflowed",
                              "abandon_quit",
                              "auto_closed",
                              "contained",
                              "missed",
                              "declined",
                              "callback_abandoned_by_consumer"
                            ]
                          },
                          "caller_id": {
                            "type": "string",
                            "description": "The caller's number.",
                            "example": "+12058945728"
                          },
                          "calling_party": {
                            "type": "string",
                            "description": "The calling's party.",
                            "example": "consumer",
                            "enum": [
                              "consumer",
                              "agent"
                            ]
                          },
                          "charge": {
                            "type": "string",
                            "description": "The bill's charge.",
                            "example": "$0.019"
                          },
                          "rates": {
                            "type": "array",
                            "description": "The price for each sent message.",
                            "items": {
                              "type": "string",
                              "example": "$0.019"
                            }
                          },
                          "charge_type": {
                            "type": "string",
                            "description": "The charge type.",
                            "example": "per_minute",
                            "enum": [
                              "per_minute"
                            ]
                          }
                        },
                        "description": "Information about the voice call."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2901` <br>\n Engagement does not exist: $engagementId. <br>\n**Error Code:** `1001` <br>\n User does not exist: $userId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_voice_call:read:admin",
              "contact_center:read:voice_call_log:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_voice_call:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:voice_call_log:admin"
          ]
        }
      }
    },
    "/contact_center/engagements/notes": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "List notes",
        "description": "Return a list of notes. \n\n \n\n**Scopes:** `contact_center_note:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_notes:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "notes",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nNote list returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "notes": {
                      "type": "array",
                      "description": "Information about the notes.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "note_id": {
                            "type": "string",
                            "description": "The note's unique ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement event's unique ID.",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "channel_type": {
                            "type": "string",
                            "description": "The channel's type: \n* voice \n* sms \n* chat \n* video",
                            "example": "voice",
                            "deprecated": true,
                            "enum": [
                              "voice",
                              "sms",
                              "chat",
                              "video"
                            ]
                          },
                          "channel": {
                            "type": "string",
                            "description": "The channel's type.\n* voice\n* sms\n* chat\n* video\n* email",
                            "example": "email",
                            "enum": [
                              "voice",
                              "sms",
                              "chat",
                              "video",
                              "email"
                            ]
                          },
                          "channel_source": {
                            "type": "string",
                            "description": "The channel source.",
                            "example": "email_address"
                          },
                          "note": {
                            "type": "string",
                            "description": "The note's content.",
                            "example": "This is the content of the note."
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The note's last modification time.",
                            "format": "date-time",
                            "example": "2022-05-23T14:15:57Z"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The ID of last user to modify the note.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          }
                        },
                        "description": "Information about the note."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_note:read:admin",
              "contact_center:read:list_notes:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_note:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_notes:admin"
          ]
        }
      }
    },
    "/contact_center/engagements/{engagementId}/notes": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "List engagement notes",
        "description": "Return a list of notes under an engagement. \n\n \n\n**Scopes:** `contact_center_note:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_notes:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "engagementNotes",
        "parameters": [
          {
            "name": "engagementId",
            "in": "path",
            "description": "The engagement event's unique ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Xh79Eq6gQhy8I1vM-r8P-w"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nEngagement note list returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "notes": {
                      "type": "array",
                      "description": "Information about the notes.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "note_id": {
                            "type": "string",
                            "description": "The note's unique ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement event's unique ID.",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "channel_type": {
                            "type": "string",
                            "description": "The channel's type. \n* voice \n* sms \n* chat \n* video",
                            "example": "voice",
                            "deprecated": true,
                            "enum": [
                              "voice",
                              "sms",
                              "chat",
                              "video"
                            ]
                          },
                          "channel": {
                            "type": "string",
                            "description": "The channel's type. \n * voice * sms * chat * video* email",
                            "example": "email",
                            "enum": [
                              "voice",
                              "sms",
                              "chat",
                              "video",
                              "email"
                            ]
                          },
                          "channel_source": {
                            "type": "string",
                            "description": "The channel source.",
                            "example": "email_address"
                          },
                          "note": {
                            "type": "string",
                            "description": "The note's content.",
                            "example": "This is the content of the note."
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The note's last modification time.",
                            "format": "date-time",
                            "example": "2022-05-23T14:15:57Z"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The ID of last user to modify the note.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          }
                        },
                        "description": "Information about the note."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_note:read:admin",
              "contact_center:read:list_notes:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_note:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_notes:admin"
          ]
        }
      }
    },
    "/contact_center/engagements/{engagementId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Get a note",
        "description": "Retrieve a note. \n\n \n\n**Scopes:** `contact_center_note:read:admin`\n\n**Granular Scopes:** `contact_center:read:note:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getNote",
        "parameters": [
          {
            "name": "engagementId",
            "in": "path",
            "description": "The engagement event's unique ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Xh79Eq6gQhy8I1vM-r8P-w"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "The note's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nNote returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "note_id": {
                      "type": "string",
                      "description": "The note's unique ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "engagement_id": {
                      "type": "string",
                      "description": "The engagement event's unique ID.",
                      "example": "3XilEfOvQEKRIWMWhX1jDg"
                    },
                    "channel_type": {
                      "type": "string",
                      "description": "The channel's type. \n* voice \n* sms \n* chat \n* video",
                      "example": "voice",
                      "deprecated": true,
                      "enum": [
                        "voice",
                        "sms",
                        "chat",
                        "video",
                        "email"
                      ]
                    },
                    "channel": {
                      "type": "string",
                      "description": "The channel's type. \n* voice \n* sms \n* chat \n* video\n* email",
                      "example": "email",
                      "enum": [
                        "voice",
                        "sms",
                        "chat",
                        "video",
                        "email"
                      ]
                    },
                    "channel_source": {
                      "type": "string",
                      "description": "channel source",
                      "example": "email_address",
                      "enum": [
                        "email_address"
                      ]
                    },
                    "note": {
                      "type": "string",
                      "description": "The note's content.",
                      "example": "This is the content of the note."
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The note's last modification time.",
                      "format": "date-time",
                      "example": "2022-05-23T14:15:57Z"
                    },
                    "user_id": {
                      "type": "string",
                      "description": "The ID of last user to modify the note.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    }
                  },
                  "description": "Information about the note."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `2704` <br>\n The engagementId that matches this noteId is: $engagementId <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2701` <br>\n Note does not exist: $noteId <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_note:read:admin",
              "contact_center:read:note:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_note:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:note:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Notes"
        ],
        "summary": "Update a note",
        "description": "Update a note. \n\n \n\n**Scopes:** `contact_center_note:write`\n\n**Granular Scopes:** `contact_center:update:note`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "noteUpdate",
        "parameters": [
          {
            "name": "engagementId",
            "in": "path",
            "description": "The engagement event's unique ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Xh79Eq6gQhy8I1vM-r8P-w"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "The note's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "note": {
                    "type": "string",
                    "description": "The note's content.",
                    "example": "This is the content of the note."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nNote updated"
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `2702` <br>\nNote can not be updated. You can only update the note that belongs to you.\n\n**Error Code:** `2704` <br>\nThe engagementId that matches this noteId is: $engagementId.\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `2701` <br>\nNote does not exist: $noteId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_note:write",
              "contact_center:update:note"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_note:write"
          ],
          "x-granular-scopes": [
            "contact_center:update:note"
          ]
        }
      }
    },
    "/contact_center/business_hours": {
      "get": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "List business hours",
        "description": "Get a list of business hours. Admins can create business hours to select, such as the business hours &quot;Default Hours&quot;. \n\n \n\n**Scopes:** `contact_center_operating_hours:read:admin`,`contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_business_hours:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listBusinessHours",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "account_default",
            "in": "query",
            "description": "Default business hours or closures for the newly created queue.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nBusiness hours returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "business_hours": {
                      "type": "array",
                      "description": "Information about the business hours.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "business_hour_id": {
                            "type": "string",
                            "description": "The business hours' ID.",
                            "example": "66ZjSQ7YTOescnINN_4vog"
                          },
                          "business_hour_name": {
                            "type": "string",
                            "description": "The business hours' name.",
                            "example": "Default Business hours"
                          },
                          "timezone": {
                            "type": "string",
                            "description": "The business hours' timezone ID.",
                            "example": "America/New_York"
                          },
                          "account_default": {
                            "type": "boolean",
                            "description": "Default business hours for the newly created queue.",
                            "example": true
                          },
                          "queues_count": {
                            "type": "integer",
                            "description": "The number of queues using the business hour.",
                            "example": 1
                          },
                          "flows_count": {
                            "type": "integer",
                            "description": "The number of flows using the business hour.",
                            "example": 1
                          },
                          "hours": {
                            "type": "object",
                            "properties": {
                              "hour_type": {
                                "type": "integer",
                                "description": "The type of business hours. \n* `1` &mdash; 24 hours, 7 days a week. \n* `2` &mdash; Custom hours.",
                                "example": 2,
                                "enum": [
                                  1,
                                  2
                                ]
                              },
                              "custom_hours": {
                                "type": "array",
                                "description": "The custom hours settings. It returns only for the `Custom hours` type.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "day_of_week": {
                                      "type": "integer",
                                      "description": "The day of the week. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                                      "example": 1,
                                      "enum": [
                                        1,
                                        2,
                                        3,
                                        4,
                                        5,
                                        6,
                                        7
                                      ]
                                    },
                                    "custom_hour_type": {
                                      "type": "integer",
                                      "description": "The type of custom hours. \n* `0` &mdash; Disabled. \n* `1` &mdash; 24 hours. \n* `2` &mdash; Customized hours.",
                                      "example": 2,
                                      "enum": [
                                        0,
                                        1,
                                        2
                                      ]
                                    },
                                    "custom_hour_ranges": {
                                      "type": "array",
                                      "description": "The custom hours range. It returns only for the `Customized hours` type.",
                                      "items": {
                                        "properties": {
                                          "start_time": {
                                            "type": "string",
                                            "description": "The custom hours start time, `HH:mm` and `24-hour clock` format.",
                                            "example": "09:00"
                                          },
                                          "end_time": {
                                            "type": "string",
                                            "description": "The custom hours end time, `HH:mm` and `24-hour clock` format.",
                                            "example": "18:00"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_operating_hours:read:admin",
              "contact_center_queue:read:admin",
              "contact_center:read:list_business_hours:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_operating_hours:read:admin",
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_business_hours:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "Create business hours",
        "description": "Create new business hours. \n\n \n\n**Scopes:** `contact_center_operating_hours:write:admin`,`contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:write:business_hour:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "businessHourCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "business_hour_name": {
                    "type": "string",
                    "description": "The business hours' name.",
                    "example": "Default business hours"
                  },
                  "business_hour_description": {
                    "type": "string",
                    "description": "The business hours' description.",
                    "example": "This is a description."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "The business hours' timezone ID.",
                    "example": "America/New_York"
                  },
                  "account_default": {
                    "type": "boolean",
                    "description": "Default business hours for the newly created queue.",
                    "example": true
                  },
                  "hours": {
                    "type": "object",
                    "properties": {
                      "hour_type": {
                        "type": "integer",
                        "description": "The type of business hours. \n* `1` &mdash; 24 hours, 7 days a week. \n* `2` &mdash; Custom hours.",
                        "example": 2,
                        "enum": [
                          1,
                          2
                        ]
                      },
                      "custom_hours": {
                        "type": "array",
                        "description": "The custom hours' settings. Required only for the `Custom hours` type.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "day_of_week": {
                              "type": "integer",
                              "description": "The day of the week. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                              "example": 1,
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7
                              ]
                            },
                            "custom_hour_type": {
                              "type": "integer",
                              "description": "The type of custom hours. \n* `1` &mdash; 24 hours. \n* `2` &mdash; Customized hours.",
                              "example": 2,
                              "enum": [
                                1,
                                2
                              ]
                            },
                            "custom_hour_ranges": {
                              "type": "array",
                              "description": "The custom hours' range. Required only for the `Customized hours` type.",
                              "items": {
                                "properties": {
                                  "start_time": {
                                    "type": "string",
                                    "description": "The custom hours' start time, in `HH:mm` and `24-hour clock` format.",
                                    "example": "09:00"
                                  },
                                  "end_time": {
                                    "type": "string",
                                    "description": "The custom hours' end time, in `HH:mm` and `24-hour clock` format.",
                                    "example": "18:00"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nBusiness hours created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "business_hour_id": {
                      "type": "string",
                      "description": "The business hours' ID.",
                      "example": "66ZjSQ7YTOescnINN_4vog"
                    },
                    "business_hour_name": {
                      "type": "string",
                      "description": "The business hours' name.",
                      "example": "Default business hours"
                    },
                    "business_hour_description": {
                      "type": "string",
                      "description": "The business hours' description.",
                      "example": "This is a description."
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The business hours' timezone ID.",
                      "example": "America/New_York"
                    },
                    "account_default": {
                      "type": "boolean",
                      "description": "Default business hours for the newly created queue.",
                      "example": true
                    },
                    "hours": {
                      "type": "object",
                      "properties": {
                        "hour_type": {
                          "type": "integer",
                          "description": "The type of business hours. \n* `1` &mdash; 24 hours, 7 days a week. \n* `2` &mdash; Custom hours.",
                          "example": 2,
                          "enum": [
                            1,
                            2
                          ]
                        },
                        "custom_hours": {
                          "type": "array",
                          "description": "The custom hours' settings. Returned only for the `Custom hours` type.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "day_of_week": {
                                "type": "integer",
                                "description": "The day of the week. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                                "example": 1,
                                "enum": [
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  6,
                                  7
                                ]
                              },
                              "custom_hour_type": {
                                "type": "integer",
                                "description": "The type of custom hours. \n* `0` &mdash; Disabled. \n* `1` &mdash; 24 hours. \n* `2` &mdash; Customized hours.",
                                "example": 2,
                                "enum": [
                                  0,
                                  1,
                                  2
                                ]
                              },
                              "custom_hour_ranges": {
                                "type": "array",
                                "description": "The custom hours' range. Returned only for the `Customized hours` type.",
                                "items": {
                                  "properties": {
                                    "start_time": {
                                      "type": "string",
                                      "description": "The custom hours' start time, in `HH:mm` and `24-hour clock` format.",
                                      "example": "09:00"
                                    },
                                    "end_time": {
                                      "type": "string",
                                      "description": "The custom hours' end time, in `HH:mm` and `24-hour clock` format.",
                                      "example": "18:00"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_operating_hours:write:admin",
              "contact_center_queue:write:admin",
              "contact_center:write:business_hour:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_operating_hours:write:admin",
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:business_hour:admin"
          ]
        }
      }
    },
    "/contact_center/business_hours/{businessHourId}": {
      "get": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "Get business hours",
        "description": "Get information about business hours. \n\n \n\n**Scopes:** `contact_center_operating_hours:read:admin`,`contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:business_hour:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getABusinessHour",
        "parameters": [
          {
            "name": "businessHourId",
            "in": "path",
            "description": "The business hours' ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "66ZjSQ7YTOescnINN_4vog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nBusiness hours returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "business_hour_id": {
                      "type": "string",
                      "description": "The business hours' ID.",
                      "example": "66ZjSQ7YTOescnINN_4vog"
                    },
                    "business_hour_name": {
                      "type": "string",
                      "description": "The business hours' name.",
                      "example": "Default Business hours"
                    },
                    "business_hour_description": {
                      "type": "string",
                      "description": "The business hours' description.",
                      "example": "This is a description."
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The business hours' timezone ID.",
                      "example": "America/New_York"
                    },
                    "account_default": {
                      "type": "boolean",
                      "description": "Default business hours for the newly created queue.",
                      "example": true
                    },
                    "hours": {
                      "type": "object",
                      "properties": {
                        "hour_type": {
                          "type": "integer",
                          "description": "The type of business hours. \n* `1` &mdash; 24 hours, 7 days a week. \n* `2` &mdash; Custom hours.",
                          "example": 2,
                          "enum": [
                            1,
                            2
                          ]
                        },
                        "custom_hours": {
                          "type": "array",
                          "description": "The custom hours settings. It returns only for the `Custom hours` type.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "day_of_week": {
                                "type": "integer",
                                "description": "The day of the week. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                                "example": 1,
                                "enum": [
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  6,
                                  7
                                ]
                              },
                              "custom_hour_type": {
                                "type": "integer",
                                "description": "The type of custom hours. \n* `0` &mdash; Disabled. \n* `1` &mdash; 24 hours. \n* `2` &mdash; Customized hours.",
                                "example": 2,
                                "enum": [
                                  0,
                                  1,
                                  2
                                ]
                              },
                              "custom_hour_ranges": {
                                "type": "array",
                                "description": "The custom hours range. It returns only for the `Customized hours` type.",
                                "items": {
                                  "properties": {
                                    "start_time": {
                                      "type": "string",
                                      "description": "The custom hours start time, in `HH:mm` and `24-hour clock` format.",
                                      "example": "09:00"
                                    },
                                    "end_time": {
                                      "type": "string",
                                      "description": "The custom hours end time, in `HH:mm` and `24-hour clock` format.",
                                      "example": "18:00"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3601` <br>\nBusiness hours do not exist: $businessHourId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_operating_hours:read:admin",
              "contact_center_queue:read:admin",
              "contact_center:read:business_hour:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_operating_hours:read:admin",
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:business_hour:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "Delete business hours",
        "description": "Delete business hours. \n\n \n\n**Scopes:** `contact_center_operating_hours:write:admin`\n\n**Granular Scopes:** `contact_center:delete:business_hour:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "businessHourDelete",
        "parameters": [
          {
            "name": "businessHourId",
            "in": "path",
            "description": "The business hours' ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "66ZjSQ7YTOescnINN_4vog"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nBusiness hours deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `3603` <br>\nThe business hours of account default cannot be deleted.\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3601` <br>\nBusiness hour does not exist: $businessHourId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_operating_hours:write:admin",
              "contact_center:delete:business_hour:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_operating_hours:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:business_hour:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "Update business hours",
        "description": "Update business hours.   \n   \n \n\n\n**Scopes:** `contact_center_operating_hours:write:admin`\n\n**Granular Scopes:** `contact_center:update:business_hour:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "businessHourUpdate",
        "parameters": [
          {
            "name": "businessHourId",
            "in": "path",
            "description": "The business hours' ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "66ZjSQ7YTOescnINN_4vog"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "business_hour_name": {
                    "type": "string",
                    "description": "The business hours' name.",
                    "example": "Default Business hours"
                  },
                  "business_hour_description": {
                    "type": "string",
                    "description": "The business hours' description.",
                    "example": "This is a description."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "The business hours' timezone ID.",
                    "example": "America/New_York"
                  },
                  "account_default": {
                    "type": "boolean",
                    "description": "Default business hours for the newly created queue. Only support `true` value.",
                    "example": true
                  },
                  "hours": {
                    "type": "object",
                    "properties": {
                      "hour_type": {
                        "type": "integer",
                        "description": "The type of business hours. \n* `1` &mdash; 24 hours, 7 days a week. \n* `2` &mdash; Custom hours.",
                        "example": 2,
                        "enum": [
                          1,
                          2
                        ]
                      },
                      "custom_hours": {
                        "type": "array",
                        "description": "The custom hours' settings. Required only for the `custom` type.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "day_of_week": {
                              "type": "integer",
                              "description": "The day of the week. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                              "example": 1,
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7
                              ]
                            },
                            "custom_hour_type": {
                              "type": "integer",
                              "description": "The type of custom hours. \n* `0` &mdash; Disabled. \n* `1` &mdash; 24 hours. \n* `2` &mdash; Customized hours.",
                              "example": 2,
                              "enum": [
                                0,
                                1,
                                2
                              ]
                            },
                            "custom_hour_ranges": {
                              "type": "array",
                              "description": "The custom hours' range. Required only for the `specific_Time` type.",
                              "items": {
                                "properties": {
                                  "start_time": {
                                    "type": "string",
                                    "description": "The custom hours' start time, in `HH:mm` and `24-hour clock` format.",
                                    "example": "09:00"
                                  },
                                  "end_time": {
                                    "type": "string",
                                    "description": "The custom hours' end time, in `HH:mm` and `24-hour clock` format.",
                                    "example": "18:00"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nBusiness hour updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `3602` <br>\n`Account_default` only support `true` value.\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3601` <br>\nBusiness hours do not exist: $businessHourId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_operating_hours:write:admin",
              "contact_center:update:business_hour:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_operating_hours:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:business_hour:admin"
          ]
        }
      }
    },
    "/contact_center/business_hours/{businessHourId}/flows": {
      "get": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "List the business hours' flows",
        "description": "Show a list of flows using business hours. \n\n \n\n**Scopes:** `contact_center_flow:read:admin`\n\n**Granular Scopes:** `contact_center:read:business_hours_flow:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "listBusinessHourFlows",
        "parameters": [
          {
            "name": "businessHourId",
            "in": "path",
            "description": "The business hours' ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "66ZjSQ7YTOescnINN_4vog"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nFlows returned.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "next_page_token",
                    "page_size"
                  ],
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "flows": {
                      "type": "array",
                      "description": "Information about the flows.",
                      "items": {
                        "required": [
                          "flow_id",
                          "flow_name"
                        ],
                        "type": "object",
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "description": "The flow's ID.",
                            "example": "psjHGHrHQbaX8Zk7ldc81Q"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The flow's name.",
                            "example": "Default Flow"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3601` <br>\nBusiness hours do not exist: $businessHourId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_flow:read:admin",
              "contact_center:read:business_hours_flow:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_flow:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:business_hours_flow:admin"
          ]
        }
      }
    },
    "/contact_center/business_hours/{businessHourId}/queues": {
      "get": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "List the business hours' queues",
        "description": "Show a list of queues using business hours. \n\n \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:business_hours_queue:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "listBusinessHourQueues",
        "parameters": [
          {
            "name": "businessHourId",
            "in": "path",
            "description": "The business hours' ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "66ZjSQ7YTOescnINN_4vog"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueues returned.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "next_page_token",
                    "page_size"
                  ],
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the queues.",
                      "items": {
                        "required": [
                          "cc_queue_id",
                          "queue_id",
                          "queue_name"
                        ],
                        "type": "object",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The task queue's ID.",
                            "example": "ZWQ33BD1C6E46FFD0D869D32E220D35F4D4",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "xqJE_cgERLyAJHYYL5LLeg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "VoiceQueue"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `3601` <br>\n Business hours do not exist: $businessHourId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:read:business_hours_queue:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:business_hours_queue:admin"
          ]
        }
      }
    },
    "/contact_center/closures": {
      "get": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "List closures",
        "description": "Get a list of closures. Admins can create closures to select. \n\n \n\n**Scopes:** `contact_center_queue:read:admin`,`contact_center_operating_hours:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_closure_hours:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listClosures",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "account_default",
            "in": "query",
            "description": "Default business hours or closures for the newly-created queue.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nClosures returned.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "next_page_token",
                    "page_size"
                  ],
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "closure_sets": {
                      "type": "array",
                      "description": "Information about the closure.",
                      "items": {
                        "required": [
                          "account_default",
                          "closure_set_id",
                          "closure_set_name",
                          "closures",
                          "flows_count",
                          "queues_count",
                          "timezone"
                        ],
                        "type": "object",
                        "properties": {
                          "closure_set_id": {
                            "type": "string",
                            "description": "The closure set's ID.",
                            "example": "Ixo-Na0bRfCyQ4q2lAryDw"
                          },
                          "closure_set_name": {
                            "type": "string",
                            "description": "The closure set's name.",
                            "example": "Default Closure"
                          },
                          "timezone": {
                            "type": "string",
                            "description": "The closure set's timezone ID.",
                            "example": "America/New_York"
                          },
                          "account_default": {
                            "type": "boolean",
                            "description": "Default closure for the newly-created queue.",
                            "example": true
                          },
                          "queues_count": {
                            "type": "integer",
                            "description": "The number of queues using the closure set.",
                            "example": 1
                          },
                          "flows_count": {
                            "type": "integer",
                            "description": "The number of flows using the closure set.",
                            "example": 1
                          },
                          "closures": {
                            "type": "array",
                            "description": "The closure's details.",
                            "items": {
                              "required": [
                                "closure_hour_type",
                                "closure_name",
                                "end_time",
                                "recurring_frequency",
                                "start_time"
                              ],
                              "type": "object",
                              "properties": {
                                "closure_id": {
                                  "type": "string",
                                  "description": "The closure item's ID.",
                                  "example": "ksbJvJ"
                                },
                                "closure_name": {
                                  "type": "string",
                                  "description": "The closure item's name.",
                                  "example": "New Year"
                                },
                                "closure_hour_type": {
                                  "type": "integer",
                                  "description": "The closure's time type. \n* `1` &mdash; All day. \n* `2` &mdash; Customized time.",
                                  "example": 2,
                                  "enum": [
                                    1,
                                    2
                                  ]
                                },
                                "start_time": {
                                  "type": "string",
                                  "description": "The closure's start time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                                  "example": "2023-01-01T00:00:00-04:00"
                                },
                                "end_time": {
                                  "type": "string",
                                  "description": "The closure's end time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                                  "example": "2023-02-01T00:00:00-04:00"
                                },
                                "recurring_frequency": {
                                  "type": "integer",
                                  "description": "The frequency of a closure's recurrence. \n* `0` &mdash; Never. \n* `1` &mdash; Annually. \n* `2` &mdash; Monthly. \n* `3` &mdash; Weekly.",
                                  "example": 2,
                                  "enum": [
                                    0,
                                    1,
                                    2,
                                    3
                                  ]
                                },
                                "recurring_frequency_type": {
                                  "type": "integer",
                                  "description": "The closure time's type of recurrence. This applies to `Annually`, `Monthly` and `Weekly` repeat frequency. It returns only for the not `Never` recurrence type. \n* `1` &mdash; Specific. \n* `2` &mdash; Customized.",
                                  "example": 2,
                                  "enum": [
                                    1,
                                    2
                                  ]
                                },
                                "recurring_month": {
                                  "type": "integer",
                                  "description": "The recurrence month. It returns only for the `Annually` recurrence type. \n* `1` &mdash; January \n* `2` &mdash; February \n* `3` &mdash; March \n* `4` &mdash; April \n* `5` &mdash; May \n* `6` &mdash; June \n* `7` &mdash; July \n* `8` &mdash; August \n* `9` &mdash; September \n* `10` &mdash; October \n* `11` &mdash; November \n* `12` &mdash; December",
                                  "example": 1,
                                  "enum": [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9,
                                    10,
                                    11,
                                    12
                                  ]
                                },
                                "recurring_week_interval": {
                                  "maximum": 12,
                                  "minimum": 1,
                                  "type": "integer",
                                  "description": "The number of weekly recurrences. It returns only for the `Customized` recurrence time types. When it is `Annually/Customized` or `Monthly/Customized` type, the minimum value is `1` and the maximum value is `5`. When it is `Weekly/Customized` type, the minimum value is `1` and the maximum value is `12`.",
                                  "example": 1
                                },
                                "recurring_days_of_week": {
                                  "type": "array",
                                  "description": "The week days of a recurrence. It returns only for the `Weekly/Customized`, the `Weekly/Specific`, the `Annually/Customized` and the `Monthly/Customized` recurrence time types. When the type is &quot;`Weekly/Customized`&quot;, there may be multiple values. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                                  "items": {
                                    "type": "string",
                                    "example": "1"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center_operating_hours:read:admin",
              "contact_center:read:list_closure_hours:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin",
            "contact_center_operating_hours:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_closure_hours:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "Create a closure set",
        "description": "Create a new closure set. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`,`contact_center_operating_hours:write:admin`\n\n**Granular Scopes:** `contact_center:write:closure_hour:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "closuresSetCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "closure_set_name",
                  "closures",
                  "timezone"
                ],
                "type": "object",
                "properties": {
                  "closure_set_name": {
                    "type": "string",
                    "description": "The closure set's name.",
                    "example": "Default closure"
                  },
                  "closure_set_description": {
                    "type": "string",
                    "description": "The closure set's description.",
                    "example": "This is a description."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "The closure set's timezone ID.",
                    "example": "America/New_York"
                  },
                  "account_default": {
                    "type": "boolean",
                    "description": "Default closure for the newly created queue.",
                    "example": true
                  },
                  "closures": {
                    "type": "array",
                    "description": "The closure's details.",
                    "items": {
                      "required": [
                        "closure_hour_type",
                        "closure_name",
                        "end_time",
                        "recurring_frequency",
                        "start_time"
                      ],
                      "type": "object",
                      "properties": {
                        "closure_name": {
                          "type": "string",
                          "description": "The closure item's name.",
                          "example": "New Year"
                        },
                        "closure_hour_type": {
                          "type": "integer",
                          "description": "The closure's time type. \n* `1` &mdash; All day. \n* `2` &mdash; Customized time.",
                          "example": 2,
                          "enum": [
                            1,
                            2
                          ]
                        },
                        "start_time": {
                          "type": "string",
                          "description": "The closure's start time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                          "example": "2023-01-01T00:00:00-04:00"
                        },
                        "end_time": {
                          "type": "string",
                          "description": "The closure's end time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                          "example": "2023-02-01T00:00:00-04:00"
                        },
                        "recurring_frequency": {
                          "type": "integer",
                          "description": "The frequency of a closure's recurrence. \n* `0` &mdash; Never. \n* `1` &mdash; Annually. \n* `2` &mdash; Monthly. \n* `3` &mdash; Weekly.",
                          "example": 2,
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "recurring_frequency_type": {
                          "type": "integer",
                          "description": "The closure time's type of recurrence. Applies to `Annually`, `Monthly`, and `Weekly` repeat frequency. Returns only for the not `Never` recurrence type. \n* `1` &mdash; Specific. \n* `2` &mdash; Customized.",
                          "example": 2,
                          "enum": [
                            1,
                            2
                          ]
                        },
                        "recurring_month": {
                          "type": "integer",
                          "description": "The recurrence month. Required only for the `Annually` recurrence type. \n* `1` &mdash; January \n* `2` &mdash; February \n* `3` &mdash; March \n* `4` &mdash; April \n* `5` &mdash; May \n* `6` &mdash; June \n* `7` &mdash; July \n* `8` &mdash; August \n* `9` &mdash; September \n* `10` &mdash; October \n* `11` &mdash; November \n* `12` &mdash; December",
                          "example": 1,
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11,
                            12
                          ]
                        },
                        "recurring_week_interval": {
                          "maximum": 12,
                          "minimum": 1,
                          "type": "integer",
                          "description": "The number of weekly recurrences. Required only for the `Customized` recurrence time types. When the type is `Annually/Customized` or `Monthly/Customized`, the minimum value is `1` and the maximum value is `5`. When the type is `Weekly/Customized`, the minimum value is `1` and the maximum value is `12`.",
                          "example": 1
                        },
                        "recurring_days_of_week": {
                          "type": "array",
                          "description": "The week days of a recurrence. Required only for the `Weekly/Customized`, `Weekly/Specific`, `Annually/Customized`, and `Monthly/Customized` recurrence time types. When the type is &quot;`Weekly/Customized`&quot;, there may be multiple values. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                          "items": {
                            "type": "string",
                            "example": "1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nClosure set created.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "account_default",
                    "closure_set_description",
                    "closure_set_id",
                    "closure_set_name",
                    "closures",
                    "timezone"
                  ],
                  "type": "object",
                  "properties": {
                    "closure_set_id": {
                      "type": "string",
                      "description": "The closure set's ID.",
                      "example": "Ixo-Na0bRfCyQ4q2lAryDw"
                    },
                    "closure_set_name": {
                      "type": "string",
                      "description": "The closure set's name.",
                      "example": "Default closure"
                    },
                    "closure_set_description": {
                      "type": "string",
                      "description": "The closure set's description.",
                      "example": "This is a description."
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The closure set's timezone ID.",
                      "example": "America/New_York"
                    },
                    "account_default": {
                      "type": "boolean",
                      "description": "Default closure for the newly created queue.",
                      "example": true
                    },
                    "closures": {
                      "type": "array",
                      "description": "The closure details.",
                      "items": {
                        "required": [
                          "closure_hour_type",
                          "closure_name",
                          "end_time",
                          "recurring_frequency",
                          "start_time"
                        ],
                        "type": "object",
                        "properties": {
                          "closure_id": {
                            "type": "string",
                            "description": "The closure item's ID.",
                            "example": "ksbJvJ"
                          },
                          "closure_name": {
                            "type": "string",
                            "description": "The closure item's name.",
                            "example": "New Year"
                          },
                          "closure_hour_type": {
                            "type": "integer",
                            "description": "The closure's time type. \n* `1` &mdash; All day. \n* `2` &mdash; Customized time.",
                            "example": 2,
                            "enum": [
                              1,
                              2
                            ]
                          },
                          "start_time": {
                            "type": "string",
                            "description": "The closure's start time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "example": "2023-01-01T00:00:00-04:00"
                          },
                          "end_time": {
                            "type": "string",
                            "description": "The closure's end time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "example": "2023-02-01T00:00:00-04:00"
                          },
                          "recurring_frequency": {
                            "type": "integer",
                            "description": "The frequency of a closure's recurrence. \n* `0` &mdash; Never. \n* `1` &mdash; Annually. \n* `2` &mdash; Monthly. \n* `3` &mdash; Weekly.",
                            "example": 2,
                            "enum": [
                              0,
                              1,
                              2,
                              3
                            ]
                          },
                          "recurring_frequency_type": {
                            "type": "integer",
                            "description": "The closure time's type of recurrence. Applies to `Annually`, `Monthly`, and `Weekly` repeat frequency. Returns only for the not `Never` recurrence type. \n* `1` &mdash; Specific. \n* `2` &mdash; Customized.",
                            "example": 2,
                            "enum": [
                              1,
                              2
                            ]
                          },
                          "recurring_month": {
                            "type": "integer",
                            "description": "The recurrence month. Returns only for the `Annually` recurrence type. \n* `1` &mdash; January \n* `2` &mdash; February \n* `3` &mdash; March \n* `4` &mdash; April \n* `5` &mdash; May \n* `6` &mdash; June \n* `7` &mdash; July \n* `8` &mdash; August \n* `9` &mdash; September \n* `10` &mdash; October \n* `11` &mdash; November \n* `12` &mdash; December",
                            "example": 1,
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12
                            ]
                          },
                          "recurring_week_interval": {
                            "maximum": 12,
                            "minimum": 1,
                            "type": "integer",
                            "description": "The number of weekly recurrences. Returns only for the `Customized` recurrence time types. When the type is `Annually/Customized` or `Monthly/Customized`, the minimum value is `1` and the maximum value is `5`. When it is `Weekly/Customized`, the minimum value is `1` and the maximum value is `12`.",
                            "example": 1
                          },
                          "recurring_days_of_week": {
                            "type": "array",
                            "description": "The week days of a recurrence. Returns only for the `Weekly/Customized`, the `Weekly/Specific`, the `Annually/Customized`, and the `Monthly/Customized` recurrence time types. When the type is &quot;`Weekly/Customized`&quot;, there may be multiple values. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                            "items": {
                              "type": "string",
                              "example": "1"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3602` <br>\n Timezone does not exist. <br>\n**Error Code:** `3702` <br>\n The closure name has already been duplicated: $closure_name. <br>\n**Error Code:** `3703` <br>\n The end time should be greater than the start time. <br>\n**Error Code:** `3704` <br>\n The \"recurring_frequency_type\" should not be empty when the \"recurring_frequency\" is not \"Never\". <br>\n**Error Code:** `3705` <br>\n The \\\"start_time\\\" and \\\"end_time\\\" must be in the same year when the \\\"recurring_frequency\\\" is the \\\"Annually\\\". <br>\n**Error Code:** `3706` <br>\n The \"start_time\" and \"end_time\" must be in the same month when the \"recurring_frequency\" is the \"Monthly\". <br>\n**Error Code:** `3707` <br>\n The \"start_time\" and \"end_time\" must be in the same week when the \"recurring_frequency\" is the \"Weekly\". <br>\n**Error Code:** `3708` <br>\n The \"recurring_week_interval\" should not be empty when the \"recurring_frequency_type\" type is \"Customized\". <br>\n**Error Code:** `3709` <br>\n The \"recurring_days_of_week\" should not be empty when the \"recurring_frequency_type\" type is \"Customized\". <br>\n**Error Code:** `3710` <br>\n The \"recurring_month\" should not be empty when the type is \"Annually/Customized\". <br>\n**Error Code:** `3711` <br>\n The \"recurring_week_interval\" should between \"1\" and \"5\" when the \"recurring_frequency\" type is \"Annually\" or \"Monthly\". <br>\n**Error Code:** `3712` <br>\n The \"start_time\" and \"end_time\" must match the \"timezone\": $start_time/$end_time. <br>\n**Error Code:** `3603` <br>\n The name already exists. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center_operating_hours:write:admin",
              "contact_center:write:closure_hour:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin",
            "contact_center_operating_hours:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:closure_hour:admin"
          ]
        }
      }
    },
    "/contact_center/closures/{closureSetId}": {
      "get": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "Get a closure set",
        "description": "Get information about a closure set.  \n\n**Scopes:** `contact_center_queue:read:admin`,`contact_center_operating_hours:read:admin`\n\n**Granular Scopes:** `contact_center:read:closure_hour:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getAClosureSet",
        "parameters": [
          {
            "name": "closureSetId",
            "in": "path",
            "description": "The closure set's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Ixo-Na0bRfCyQ4q2lAryDw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nClosure set returned.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "account_default",
                    "closure_set_description",
                    "closure_set_id",
                    "closure_set_name",
                    "closures",
                    "timezone"
                  ],
                  "type": "object",
                  "properties": {
                    "closure_set_id": {
                      "type": "string",
                      "description": "The closure set's ID.",
                      "example": "Ixo-Na0bRfCyQ4q2lAryDw"
                    },
                    "closure_set_name": {
                      "type": "string",
                      "description": "The closure set's name.",
                      "example": "Default closure"
                    },
                    "closure_set_description": {
                      "type": "string",
                      "description": "The closure set's description.",
                      "example": "This is a description."
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The closure set's timezone ID.",
                      "example": "America/New_York"
                    },
                    "account_default": {
                      "type": "boolean",
                      "description": "Default closure for the newly-created queue.",
                      "example": true
                    },
                    "closures": {
                      "type": "array",
                      "description": "The closure's details.",
                      "items": {
                        "required": [
                          "closure_hour_type",
                          "closure_name",
                          "end_time",
                          "recurring_frequency",
                          "start_time"
                        ],
                        "type": "object",
                        "properties": {
                          "closure_id": {
                            "type": "string",
                            "description": "The closure item's ID.",
                            "example": "ksbJvJ"
                          },
                          "closure_name": {
                            "type": "string",
                            "description": "The closure item's name.",
                            "example": "New Year"
                          },
                          "closure_hour_type": {
                            "type": "integer",
                            "description": "The closure's time type. \n* `1` &mdash; All day. \n* `2` &mdash; Customized time.",
                            "example": 2,
                            "enum": [
                              1,
                              2
                            ]
                          },
                          "start_time": {
                            "type": "string",
                            "description": "The closure's start time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "example": "2023-01-01T00:00:00-04:00"
                          },
                          "end_time": {
                            "type": "string",
                            "description": "The closure's end time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "example": "2023-02-01T00:00:00-04:00"
                          },
                          "recurring_frequency": {
                            "type": "integer",
                            "description": "The frequency of a closure's recurrence. \n* `0` &mdash; Never. \n* `1` &mdash; Annually. \n* `2` &mdash; Monthly. \n* `3` &mdash; Weekly.",
                            "example": 2,
                            "enum": [
                              0,
                              1,
                              2,
                              3
                            ]
                          },
                          "recurring_frequency_type": {
                            "type": "integer",
                            "description": "The closure time's recurrence type. This applies to `Annually`, `Monthly` and `Weekly` recurrence frequency. It returns for recurrence types that are not `Never`. \n* `1` &mdash; Specific. \n* `2` &mdash; Customized.",
                            "example": 2,
                            "enum": [
                              1,
                              2
                            ]
                          },
                          "recurring_month": {
                            "type": "integer",
                            "description": "The recurrence month. It returns only for the `Annually` recurrence type. \n* `1` &mdash; January \n* `2` &mdash; February \n* `3` &mdash; March \n* `4` &mdash; April \n* `5` &mdash; May \n* `6` &mdash; June \n* `7` &mdash; July \n* `8` &mdash; August \n* `9` &mdash; September \n* `10` &mdash; October \n* `11` &mdash; November \n* `12` &mdash; December",
                            "example": 1,
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12
                            ]
                          },
                          "recurring_week_interval": {
                            "maximum": 12,
                            "minimum": 1,
                            "type": "integer",
                            "description": "The number of weekly recurrences. It returns only for the `Customized` recurrence time types. When the recurrence type is either `Annually/Customized` or `Monthly/Customized` type, the minimum value is `1` and the maximum value is `5`. When it is `Weekly/Customized` type, the minimum value is `1` and the maximum value is `12`.",
                            "example": 1
                          },
                          "recurring_days_of_week": {
                            "type": "array",
                            "description": "The recurrence's week days. It returns only for the `Weekly/Customized`, the `Weekly/Specific`, the `Annually/Customized`, and the `Monthly/Customized` recurrence time types. When the recurrence type is &quot;`Weekly/Customized`&quot;, there may be multiple values. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                            "items": {
                              "type": "string",
                              "example": "1"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `3701` <br>\n Closures do not exist: $closureId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center_operating_hours:read:admin",
              "contact_center:read:closure_hour:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin",
            "contact_center_operating_hours:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:closure_hour:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "Delete a closure set",
        "description": "Delete closure sets. \n\n \n\n**Scopes:** `contact_center_operating_hours:write:admin`\n\n**Granular Scopes:** `contact_center:delete:closure_hour:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "closureSetDelete",
        "parameters": [
          {
            "name": "closureSetId",
            "in": "path",
            "description": "The closure set's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Ixo-Na0bRfCyQ4q2lAryDw"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nClosure sets deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `3713` <br>\nThe closures of account default cannot be deleted.\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3701` <br>\nClosure set does not exist: $closureSetId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_operating_hours:write:admin",
              "contact_center:delete:closure_hour:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_operating_hours:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:closure_hour:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "Update a closure set",
        "description": "Update information about a closure set.\n\n**Scopes:** `contact_center_operating_hours:write:admin`\n\n**Granular Scopes:** `contact_center:update:closure_hour:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "closureSetUpdate",
        "parameters": [
          {
            "name": "closureSetId",
            "in": "path",
            "description": "The closure set's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Ixo-Na0bRfCyQ4q2lAryDw"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "closure_set_name",
                  "closures",
                  "timezone"
                ],
                "type": "object",
                "properties": {
                  "closure_set_name": {
                    "type": "string",
                    "description": "The closure set's name.",
                    "example": "Default closure"
                  },
                  "closure_set_description": {
                    "type": "string",
                    "description": "The closure set's description.",
                    "example": "This is a description."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "The closure set's timezone ID.",
                    "example": "America/New_York"
                  },
                  "account_default": {
                    "type": "boolean",
                    "description": "Default closure for the newly-created queue.",
                    "example": true
                  },
                  "closures": {
                    "type": "array",
                    "description": "The closure set's details.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "closure_id": {
                          "type": "string",
                          "description": "The closure item's ID.",
                          "example": "ksbJvJ"
                        },
                        "closure_name": {
                          "type": "string",
                          "description": "The closure item's name.",
                          "example": "New Year"
                        },
                        "closure_hour_type": {
                          "type": "integer",
                          "description": "The closure's time type. \n* `1` &mdash; All day. \n* `2` &mdash; Customized time.",
                          "example": 2,
                          "enum": [
                            1,
                            2
                          ]
                        },
                        "start_time": {
                          "type": "string",
                          "description": "The closure's start time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                          "example": "2023-01-01T00:00:00-04:00"
                        },
                        "end_time": {
                          "type": "string",
                          "description": "The closure's end time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                          "format": "datetime",
                          "example": "2023-02-01T00:00:00-04:00"
                        },
                        "recurring_frequency": {
                          "type": "integer",
                          "description": "The frequency of a closure's recurrence. * `0` &mdash; Never. * `1` &mdash; Annually. * `2` &mdash; Monthly. * `3` &mdash; Weekly.",
                          "example": 2,
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "recurring_frequency_type": {
                          "type": "integer",
                          "description": "The closure time's type of recurrence. Applies to `Annually`, `Monthly`, and `Weekly` repeat frequency. Returns only for the not `Never` recurrence type. * `1` &mdash; Specific. * `2` &mdash; Customized.",
                          "example": 2,
                          "enum": [
                            1,
                            2
                          ]
                        },
                        "recurring_month": {
                          "type": "integer",
                          "description": "The recurrence month. Required only for the `Annually` recurrence type. * `1` &mdash; January * `2` &mdash; February * `3` &mdash; March * `4` &mdash; April * `5` &mdash; May * `6` &mdash; June * `7` &mdash; July * `8` &mdash; August * `9` &mdash; September * `10` &mdash; October * `11` &mdash; November * `12` &mdash; December",
                          "example": 1,
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11,
                            12
                          ]
                        },
                        "recurring_week_interval": {
                          "maximum": 12,
                          "minimum": 1,
                          "type": "integer",
                          "description": "The number of weekly recurrences. Required only for the `Customized` recurrence time types. When the type is `Annually/Customized` or `Monthly/Customized`, the minimum value is `1` and the maximum value is `5`. When the type is `Weekly/Customized`, the minimum value is `1` and the maximum value is `12`.",
                          "example": 1
                        },
                        "recurring_days_of_week": {
                          "type": "array",
                          "description": "The recurrence's week days. Required only for the `Weekly/Customized`, the `Weekly/Specific`, the `Annually/Customized`, and the `Monthly/Customized` recurrence time types. When the type is &quot;`Weekly/Customized`&quot;, there may be multiple values. \n* `1` &mdash; Monday \n* `2` &mdash; Tuesday \n* `3` &mdash; Wednesday \n* `4` &mdash; Thursday \n* `5` &mdash; Friday \n* `6` &mdash; Saturday \n* `7` &mdash; Sunday",
                          "items": {
                            "type": "string",
                            "example": "1"
                          }
                        },
                        "to_delete": {
                          "type": "boolean",
                          "description": "Whether to delete this closure item.",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nClosure set updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3602` <br>\n Timezone does not exist. <br>\n**Error Code:** `3702` <br>\n The closure name has already been duplicated: $closure_name. <br>\n**Error Code:** `3703` <br>\n The end time should be greater than the start time. <br>\n**Error Code:** `3704` <br>\n The \"recurring_frequency_type\" should not be empty when the \"recurring_frequency\" is not \"Never\". <br>\n**Error Code:** `3705` <br>\n The \\\"start_time\\\" and \\\"end_time\\\" must be in the same year when the \\\"recurring_frequency\\\" is the \\\"Annually\\\". <br>\n**Error Code:** `3706` <br>\n The \"start_time\" and \"end_time\" must be in the same month when the \"recurring_frequency\" is the \"Monthly\". <br>\n**Error Code:** `3707` <br>\n The \"start_time\" and \"end_time\" must be in the same week when the \"recurring_frequency\" is the \"Weekly\". <br>\n**Error Code:** `3708` <br>\n The \"recurring_week_interval\" should not be empty when the \"recurring_frequency_type\" type is \"Customized\". <br>\n**Error Code:** `3709` <br>\n The \"recurring_days_of_week\" should not be empty when the \"recurring_frequency_type\" type is \"Customized\". <br>\n**Error Code:** `3710` <br>\n The \"recurring_month\" should not be empty when the type is \"Annually/Customized\". <br>\n**Error Code:** `3711` <br>\n The \"recurring_week_interval\" should between \"1\" and \"5\" when the \"recurring_frequency\" type is \"Annually\" or \"Monthly\". <br>\n**Error Code:** `3712` <br>\n The \"start_time\" and \"end_time\" must match the \"timezone\": $start_time/$end_time. <br>\n**Error Code:** `3603` <br>\n The name already exists. <br>\n**Error Code:** `3901` <br>\n The closure id has already been duplicated: $closure_id. <br>\n**Error Code:** `3902` <br>\n Closure does not exist: $closure_id. <br>\n**Error Code:** `3903` <br>\n The \"hour_type\" field cannot be empty when \"closure_id\" field is empty. <br>\n**Error Code:** `3904` <br>\n The \"closure_name\" field cannot be empty when \"closure_id\" field is empty. <br>\n**Error Code:** `3905` <br>\n The \"start_time\" field cannot be empty when \"closure_id\" field is empty. <br>\n**Error Code:** `3906` <br>\n The \"end_time\" field cannot be empty when \"closure_id\" field is empty. <br>\n**Error Code:** `3907` <br>\n The \"recurring_frequency\" field cannot be empty when \"closure_id\" field is empty. <br>\n**Error Code:** `3908` <br>\n Every closure set has at least one closure item. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `3701` <br>\n Closure set do not exist: $closureSetId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_operating_hours:write:admin",
              "contact_center:update:closure_hour:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_operating_hours:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:closure_hour:admin"
          ]
        }
      }
    },
    "/contact_center/closures/{closureSetId}/flows": {
      "get": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "List the closures' flows",
        "description": "Show a list of flows using closures. \n\n \n\n**Scopes:** `contact_center_flow:read:admin`\n\n**Granular Scopes:** `contact_center:read:clousre_hour_flow:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "listClosureSetFlows",
        "parameters": [
          {
            "name": "closureSetId",
            "in": "path",
            "description": "The closure set's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Ixo-Na0bRfCyQ4q2lAryDw"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nFlows returned.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "next_page_token",
                    "page_size"
                  ],
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "flows": {
                      "type": "array",
                      "description": "Information about the flows.",
                      "items": {
                        "required": [
                          "flow_id",
                          "flow_name"
                        ],
                        "type": "object",
                        "properties": {
                          "flow_id": {
                            "type": "string",
                            "description": "The flow's ID.",
                            "example": "psjHGHrHQbaX8Zk7ldc81Q"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The flow's name.",
                            "example": "Default Flow"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3701` <br>\nClosures do not exist: $closureSetId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_flow:read:admin",
              "contact_center:read:clousre_hour_flow:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_flow:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:clousre_hour_flow:admin"
          ]
        }
      }
    },
    "/contact_center/closures/{closureSetId}/queues": {
      "get": {
        "tags": [
          "Operating Hours"
        ],
        "summary": "List the closures' queues",
        "description": "Show a list of queues using closures. \n\n \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:closure_hour_queue:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "listClosureSetQueues",
        "parameters": [
          {
            "name": "closureSetId",
            "in": "path",
            "description": "The closure set's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Ixo-Na0bRfCyQ4q2lAryDw"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueues returned.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "next_page_token",
                    "page_size"
                  ],
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the queues.",
                      "items": {
                        "required": [
                          "cc_queue_id",
                          "queue_id",
                          "queue_name"
                        ],
                        "type": "object",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The task queue's ID.",
                            "example": "ZWQ33BD1C6E46FFD0D869D32E220D35F4D4",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "xqJE_cgERLyAJHYYL5LLeg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "VoiceQueue"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `3701` <br>\n Closures do not exist: $closureSetId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:read:closure_hour_queue:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:closure_hour_queue:admin"
          ]
        }
      }
    },
    "/contact_center/queues": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "List queues",
        "description": "Get information about all available queues. \n\n \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_queues:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listQueues",
        "parameters": [
          {
            "name": "channel_type",
            "in": "query",
            "description": "The task queue's channel types.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "chat",
                "sms",
                "video",
                "in_app_chat",
                "messaging"
              ]
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The Contact Center queue's channel.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "video",
                "messaging",
                "email"
              ]
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueues list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the task queues.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The task queue's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "xqJE_cgERLyAJHYYL5LLeg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The task queue's name.",
                            "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
                          },
                          "agents_count": {
                            "type": "integer",
                            "description": "The number of assigned agents.",
                            "example": 1
                          },
                          "supervisors_count": {
                            "type": "integer",
                            "description": "The number of assigned supervisors.",
                            "example": 1
                          },
                          "channel_types": {
                            "type": "array",
                            "description": "The task queue's channel types.",
                            "deprecated": true,
                            "items": {
                              "type": "string",
                              "example": "voice",
                              "deprecated": true,
                              "enum": [
                                "voice",
                                "chat",
                                "sms",
                                "video",
                                "in_app_chat",
                                "messaging"
                              ]
                            }
                          },
                          "channel": {
                            "type": "string",
                            "description": "The Contact Center queue's channel.",
                            "example": "voice",
                            "enum": [
                              "voice",
                              "video",
                              "messaging",
                              "email"
                            ]
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of user who last modified the asset.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the asset was last modified.",
                            "format": "date-time",
                            "example": "2022-02-15T09:27:15Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:read:list_queues:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0-fix",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_queues:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Create a queue",
        "description": "Create an agent [queue](https://support.zoom.us/hc/en-us/articles/4423986595085) to determine which agents calls are routed to. Queues also link to an existing routing profile to determine how calls are routed. \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:write:queue:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "queueCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queue_name": {
                    "maxLength": 36,
                    "type": "string",
                    "description": "The task queue's name.",
                    "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
                  },
                  "queue_description": {
                    "maxLength": 256,
                    "type": "string",
                    "description": "The task queue's description.",
                    "example": "This is a task queue."
                  },
                  "channel_types": {
                    "type": "array",
                    "description": "The task queue's channel types.",
                    "deprecated": true,
                    "items": {
                      "type": "string",
                      "example": "voice",
                      "deprecated": true,
                      "enum": [
                        "voice",
                        "chat",
                        "sms",
                        "video",
                        "in_app_chat",
                        "messaging"
                      ]
                    }
                  },
                  "channel": {
                    "type": "string",
                    "description": "The Contact Center queue's channel.",
                    "example": "voice",
                    "enum": [
                      "voice",
                      "video",
                      "messaging",
                      "email"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nQueue created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "queue_id": {
                      "type": "string",
                      "description": "The task queue's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ",
                      "deprecated": true
                    },
                    "cc_queue_id": {
                      "type": "string",
                      "description": "The Contact Center queue's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "queue_name": {
                      "type": "string",
                      "description": "The task queue's name.",
                      "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
                    },
                    "queue_description": {
                      "type": "string",
                      "description": "The task queue's description.",
                      "example": "This is a task queue."
                    },
                    "channel_types": {
                      "type": "array",
                      "description": "The task queue's channel types.",
                      "deprecated": true,
                      "items": {
                        "type": "string",
                        "example": "voice",
                        "deprecated": true,
                        "enum": [
                          "voice",
                          "chat",
                          "sms",
                          "video",
                          "in_app_chat",
                          "messaging"
                        ]
                      }
                    },
                    "channel": {
                      "type": "string",
                      "description": "The Contact Center queue's channel.",
                      "example": "voice",
                      "enum": [
                        "voice",
                        "video",
                        "messaging",
                        "email"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:write:queue:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0-fix",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:queue:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get a queue",
        "description": "Get information about a queue. \n\n \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:queue:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getAQueue",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueue returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "queue_id": {
                      "type": "string",
                      "description": "The task queue's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ",
                      "deprecated": true
                    },
                    "cc_queue_id": {
                      "type": "string",
                      "description": "The Contact Center queue's ID.",
                      "example": "xqJE_cgERLyAJHYYL5LLeg"
                    },
                    "queue_name": {
                      "type": "string",
                      "description": "The task queue's name.",
                      "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
                    },
                    "queue_description": {
                      "type": "string",
                      "description": "The task queue's description.",
                      "example": "This is a task queue."
                    },
                    "dispositions_count": {
                      "type": "integer",
                      "description": "The number of dispositions.",
                      "example": 1
                    },
                    "disposition_sets_count": {
                      "type": "integer",
                      "description": "The number of disposition sets.",
                      "example": 1
                    },
                    "channel_types": {
                      "type": "array",
                      "description": "The task queue's channel types.",
                      "deprecated": true,
                      "items": {
                        "type": "string",
                        "example": "voice",
                        "deprecated": true,
                        "enum": [
                          "voice",
                          "chat",
                          "sms",
                          "video",
                          "in_app_chat",
                          "messaging"
                        ]
                      }
                    },
                    "channel": {
                      "type": "string",
                      "description": "The Contact Center queue's channel.",
                      "example": "voice",
                      "enum": [
                        "voice",
                        "video",
                        "messaging",
                        "email"
                      ]
                    },
                    "max_wait_time": {
                      "type": "integer",
                      "description": "The task queue's maximum wait time, in seconds.",
                      "example": 50
                    },
                    "wrap_up_time": {
                      "type": "integer",
                      "description": "The task queue's wrap up time, in seconds.",
                      "example": 50
                    },
                    "max_engagement_in_queue": {
                      "maximum": 3000,
                      "minimum": 1,
                      "type": "integer",
                      "description": "The task queue's maximum engagement in queue value.",
                      "example": 50
                    },
                    "short_abandon": {
                      "type": "object",
                      "properties": {
                        "enable": {
                          "type": "boolean",
                          "description": "Whether the **Enable short abandon** setting is enabled.",
                          "example": false
                        },
                        "threshold": {
                          "type": "integer",
                          "description": "The task queue's short abandon threshold, in seconds.",
                          "example": 50
                        }
                      },
                      "description": "Information about the task queue's [**Short Abandon**](https://support.zoom.us/hc/en-us/articles/4469989300493-Changing-queue-settings#:~:text=for%20this%20queue.-,Short%20Abandon,-(only%20available%20if) settings. This setting is only available if the queue's channel type is a Zoom Room, voice, or video."
                    },
                    "distribution_type": {
                      "type": "integer",
                      "description": "Use this option to distribute incoming engagements.",
                      "example": 1,
                      "enum": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    },
                    "distribution_duration_in_seconds": {
                      "type": "integer",
                      "description": "The notify duration for each queue user, in seconds.",
                      "example": 30
                    },
                    "connecting_media_id": {
                      "type": "string",
                      "description": "Media ID to use while users are being connected.\nChannel type: voice.",
                      "example": "connectingAudioMp3"
                    },
                    "connecting_media_name": {
                      "type": "string",
                      "description": "File name of the media in use while consumers are being connected.\nChannel type: voice.",
                      "example": "Connecting Audio"
                    },
                    "transferring_media_id": {
                      "type": "string",
                      "description": "Media ID to use while users are being transferred.\nChannel type: voice.",
                      "example": "transferringAudioMp3"
                    },
                    "transferring_media_name": {
                      "type": "string",
                      "description": "File name of the media to use while users are being transferred.\nChannel type: voice.",
                      "example": "Transferring Audio"
                    },
                    "holding_media_id": {
                      "type": "string",
                      "description": "Media ID to use while users are on hold.\nChannel type: voice.",
                      "example": "holdingAudioMp3"
                    },
                    "holding_media_name": {
                      "type": "string",
                      "description": "File name of the media to use while users are on hold.\nChannel type: voice.",
                      "example": "Holding Audio"
                    },
                    "waiting_room_name": {
                      "type": "string",
                      "description": "Name of the user's waiting room.\nChannel type: video.",
                      "example": "User Waiting Room"
                    },
                    "waiting_room_id": {
                      "type": "string",
                      "description": "ID of the waiting room for users.\nChannel type: video.",
                      "example": "vPtSZOzBSLWMiorssYWTZw"
                    },
                    "message_accept": {
                      "type": "string",
                      "description": "Option to accept a message manually or automatically.\nChannel types: chat, SMS.",
                      "example": "manual",
                      "enum": [
                        "manual",
                        "auto"
                      ]
                    },
                    "wrap_up_expiration": {
                      "type": "boolean",
                      "description": "Auto-close engagements at the end of wrap-up duration.\nChannel type: voice, video.",
                      "example": true
                    },
                    "overflow_to_goodbye_message": {
                      "type": "boolean",
                      "description": "Reply goodbye message, then disconnect.",
                      "example": true
                    },
                    "overflow_to_queue_id": {
                      "type": "string",
                      "description": "The queue ID to receive the overflow.",
                      "example": "m8IhNvUyTUmx7Jm8h5ZvLQ",
                      "deprecated": true
                    },
                    "overflow_to_cc_queue_id": {
                      "type": "string",
                      "description": "The Contact Center queue ID to receive the overflow.\n\n Only one of these overflow fields can be updated each time, either `overflow_to_goodbye_message`, `overflow_to_cc_queue_id`, `overflow_to_flow_id`, or `overflow_to_inbox_id`. Updating an overflow field will clear out the other overflow fields.",
                      "example": "m8IhNvUyTUmx7Jm8h5ZvLQ"
                    },
                    "overflow_to_flow_id": {
                      "type": "string",
                      "description": "The flow ID to receive the overflow.",
                      "example": "psjHGHrHQbaX8Zk7ldc81Q"
                    },
                    "overflow_to_inbox_id": {
                      "type": "string",
                      "description": "The voicemail inbox ID to receive the overflow.",
                      "example": "cMH8RJA0QsyJBCWIFbWfBQ"
                    },
                    "auto_close_message": {
                      "type": "string",
                      "description": "Auto-closed message to users for web chats.",
                      "example": "This chat has been auto-closed due to inactivity."
                    },
                    "auto_close_message_enabled": {
                      "type": "boolean",
                      "description": "Send an auto-closed message for web chats.\nChannel type: chat.",
                      "example": true
                    },
                    "auto_close_timeout": {
                      "type": "integer",
                      "description": "How long, in minutes, before the chat is auto-closed.",
                      "example": 10
                    },
                    "auto_close_alert_message": {
                      "type": "string",
                      "description": "An alert message to web-chat users before auto-closing.",
                      "example": "Chat will auto-close soon if you don’t reply"
                    },
                    "auto_close_alert_message_enabled": {
                      "type": "boolean",
                      "description": "Send an alert message before auto-closing web chats.\nChannel type: chat.",
                      "example": true
                    },
                    "auto_close_alert_message_time": {
                      "type": "integer",
                      "description": "How long, in minutes, before a warning is sent to the user.",
                      "example": 10
                    },
                    "recording_storage_location": {
                      "type": "string",
                      "description": "Determine where to store the recording.\nChannel types: voice, video.",
                      "example": "us",
                      "enum": [
                        "us - United States",
                        "au - Australia",
                        "br - Brazil",
                        "ca - Canada",
                        "de - Germany",
                        "jp - Japan",
                        "sg - Singapore"
                      ]
                    },
                    "service_level_threshold_in_seconds": {
                      "maximum": 600,
                      "minimum": 1,
                      "type": "integer",
                      "description": "Agents' first message speed for all engagements.",
                      "example": 15
                    },
                    "service_level_exclude_short_abandoned_calls": {
                      "type": "boolean",
                      "description": "Choose to include short abandoned calls in service level metrics.\nChannel types: voice, video.",
                      "example": true
                    },
                    "service_level_exclude_long_abandoned_calls": {
                      "type": "boolean",
                      "description": "Choose to include long abandoned calls in service level metrics.\nChannel types: voice, video.",
                      "example": true
                    },
                    "service_level_exclude_abandoned_quit_engagements": {
                      "type": "boolean",
                      "description": "Choose to include quit engagements in service level metrics.\nChannel types: chat, in_app_chat, sms",
                      "example": true
                    },
                    "service_level_target_in_percentage": {
                      "maximum": 100,
                      "minimum": 0,
                      "type": "integer",
                      "description": "The service-level target as the benchmark to refer to in reports.",
                      "example": 80
                    },
                    "agent_routing_profile_id": {
                      "type": "string",
                      "description": "The queue's agent routing profile ID.",
                      "example": "fgjdkhgfieryt7465435kjhdkhg"
                    },
                    "agent_routing_profile_name": {
                      "type": "string",
                      "description": "The queue's agent routing profile name.",
                      "example": "My agent routing profile"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:read:queue:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0-fix",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:queue:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Queues"
        ],
        "summary": "Delete a queue",
        "description": "Delete a specified queue. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:delete:queue:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "queueDelete",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nQueue deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:delete:queue:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:queue:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Queues"
        ],
        "summary": "Update a queue",
        "description": "Update a queue's description or agent list.   \n   \n \n\n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:update:queue:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "queueUpdate",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the old task queue's ID and the new Contact Center queue's ID. Since the task queue ID will be deprecated in the future, change to the Contact Center queue's ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queue_name": {
                    "maxLength": 36,
                    "type": "string",
                    "description": "The task queue's name.",
                    "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
                  },
                  "queue_description": {
                    "maxLength": 256,
                    "type": "string",
                    "description": "The task queue's description.",
                    "example": "This is a queue."
                  },
                  "max_wait_time": {
                    "type": "integer",
                    "description": "The task queue's maximum wait time, in seconds.",
                    "example": 50
                  },
                  "wrap_up_time": {
                    "type": "integer",
                    "description": "The task queue's wrap up time, in seconds.",
                    "example": 50
                  },
                  "max_engagement_in_queue": {
                    "type": "integer",
                    "description": "The task queue's max engagement in queue. Value must be between 1 and 3000.",
                    "example": 50
                  },
                  "short_abandon": {
                    "type": "object",
                    "properties": {
                      "enable": {
                        "type": "boolean",
                        "description": "Whether to enable the **Short Abandon** setting is enabled.",
                        "example": false
                      },
                      "threshold": {
                        "type": "integer",
                        "description": "The task queue's **Short Abandon** threshold, in seconds.",
                        "example": 50
                      }
                    },
                    "description": "Information about the task queue's [**Short Abandon**](https://support.zoom.us/hc/en-us/articles/4469989300493-Changing-queue-settings#:~:text=for%20this%20queue.-,Short%20Abandon,-(only%20available%20if) settings. This setting is only available if the queue's channel type is a Zoom Room, voice, or video."
                  },
                  "channel_types": {
                    "type": "array",
                    "description": "The task queue's channel types.",
                    "deprecated": true,
                    "items": {
                      "type": "string",
                      "example": "voice",
                      "deprecated": true,
                      "enum": [
                        "voice",
                        "chat",
                        "sms",
                        "video",
                        "in_app_chat",
                        "messaging"
                      ]
                    }
                  },
                  "channel": {
                    "type": "string",
                    "description": "The Contact Center queue's channel.",
                    "example": "voice",
                    "enum": [
                      "voice",
                      "video",
                      "messaging",
                      "email"
                    ]
                  },
                  "distribution_type": {
                    "type": "integer",
                    "description": "Distribute incoming engagements.\nAllowed: \n- 0 - Longest Idle. This value is only supported if the channel types contain voice or video.\n- 1 - Sequential. This value is only supported if the channel types contain voice or video.\n- 2 - Rotating.This value is only supported if the channel types contain voice or video.\n- 3 - Simultaneous. This value is only supported if the channel types contain voice or video.\n- 4 - Most Available This value is only supported if the channel types contain chat or sms.\n- 5 - Manual. This value is only supported if the channel types contain video.\n",
                    "example": 1,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  },
                  "distribution_duration_in_seconds": {
                    "type": "integer",
                    "description": "The notify duration for each queue user, in second.",
                    "example": 30
                  },
                  "connecting_media_id": {
                    "type": "string",
                    "description": "Media ID to use while users are being connected.\nChannel type: voice.",
                    "example": "connectingAudioMp3",
                    "default": "Passing an empty string will set this option to the default media."
                  },
                  "transferring_media_id": {
                    "type": "string",
                    "description": "Media ID to use while users are being transferred.\nChannel type: voice.",
                    "example": "transferringAudioMp3",
                    "default": "Passing an empty string will set this option to the default media."
                  },
                  "holding_media_id": {
                    "type": "string",
                    "description": "Media ID to use while users are on hold.\nChannel type: voice.",
                    "example": "holdingAudioMp3",
                    "default": "Passing an empty string will set this option to the default media."
                  },
                  "waiting_room_id": {
                    "type": "string",
                    "description": "The users' waiting room ID.\nChannel type: video.",
                    "example": "vPtSZOzBSLWMiorssYWTZw"
                  },
                  "message_accept": {
                    "type": "string",
                    "description": "Option to accept a message manually or automatically.\nChannel types: chat, SMS.",
                    "example": "manual",
                    "enum": [
                      "manual",
                      "auto"
                    ]
                  },
                  "wrap_up_expiration": {
                    "type": "boolean",
                    "description": "Auto-close engagements at the end of wrap-up duration.\nChannel types: voice, video.",
                    "example": true
                  },
                  "overflow_to_goodbye_message": {
                    "type": "boolean",
                    "description": "Reply goodbye message, then disconnect.\n\n Only one of these overflow fields can be updated each time, `overflow_to_goodbye_message`, `overflow_to_queue_id`, `overflow_to_flow_id`, or `overflow_to_inbox_id`. Updating an overflow field will clear out the other overflow fields.",
                    "example": true
                  },
                  "overflow_to_queue_id": {
                    "type": "string",
                    "description": "The queue ID to receive the overflow.\n\n Only one of these overflow fields can be updated each time: `overflow_to_goodbye_message`, `overflow_to_queue_id`, `overflow_to_flow_id`, `overflow_to_inbox_id`. Updating an overflow field will clear out the other overflow fields.",
                    "example": "m8IhNvUyTUmx7Jm8h5ZvLQ",
                    "deprecated": true
                  },
                  "overflow_to_cc_queue_id": {
                    "type": "string",
                    "description": "The Contact Center queue ID to receive the overflow.\n\n Only one of these overflow fields can be updated each time, `overflow_to_goodbye_message`, `overflow_to_cc_queue_id`, `overflow_to_flow_id`, or `overflow_to_inbox_id`. Updating an overflow field will clear out the other overflow fields.",
                    "example": "m8IhNvUyTUmx7Jm8h5ZvLQ"
                  },
                  "overflow_to_flow_id": {
                    "type": "string",
                    "description": "The flow ID to receive the overflow.\n\n Only one of these overflow fields can be updated each time, `overflow_to_goodbye_message`, `overflow_to_queue_id`, `overflow_to_flow_id`, or `overflow_to_inbox_id`. Updating an overflow field will clear out the other overflow fields.",
                    "example": "psjHGHrHQbaX8Zk7ldc81Q"
                  },
                  "overflow_to_inbox_id": {
                    "type": "string",
                    "description": "The voicemail inbox ID to receive the overflow.\n\n Only one of these overflow fields can be updated each time, `overflow_to_goodbye_message`, `overflow_to_queue_id`, `overflow_to_flow_id`, or `overflow_to_inbox_id`. Updating an overflow field will clear out the other overflow fields.",
                    "example": "cMH8RJA0QsyJBCWIFbWfBQ"
                  },
                  "auto_close_message": {
                    "type": "string",
                    "description": "Auto-closed message to web-chat users.",
                    "example": "This chat has been auto-closed due to inactivity."
                  },
                  "auto_close_message_enabled": {
                    "type": "boolean",
                    "description": "Send an auto-closed message for web chats.\nChannel type: chat.",
                    "example": true
                  },
                  "auto_close_timeout": {
                    "type": "integer",
                    "description": "How long, in minutes, before the chat is auto-closed.",
                    "example": 10
                  },
                  "auto_close_alert_message": {
                    "type": "string",
                    "description": "An alert message to web-chat users before auto-closing.",
                    "example": "Chat will auto-close soon if you don’t reply"
                  },
                  "auto_close_alert_message_enabled": {
                    "type": "boolean",
                    "description": "Send an alert message before auto-closing web chats.\nChannel type: chat.",
                    "example": true
                  },
                  "auto_close_alert_message_time": {
                    "type": "integer",
                    "description": "How long, in minutes, before a warning is sent to the user.",
                    "example": 10
                  },
                  "recording_storage_location": {
                    "type": "string",
                    "description": "Determine where to store the recording.\nChannel types: voice, video.",
                    "example": "us",
                    "enum": [
                      "us - United States",
                      "au - Australia",
                      "br - Brazil",
                      "ca - Canada",
                      "de - Germany",
                      "jp - Japan",
                      "sg - Singapore"
                    ]
                  },
                  "service_level_threshold_in_seconds": {
                    "maximum": 600,
                    "minimum": 1,
                    "type": "integer",
                    "description": "First message speed by agents for all engagements.",
                    "example": 15
                  },
                  "service_level_exclude_short_abandoned_calls": {
                    "type": "boolean",
                    "description": "Choose to include short abandoned calls in service level metrics.\nChannel types: voice, video.",
                    "example": true
                  },
                  "service_level_exclude_long_abandoned_calls": {
                    "type": "boolean",
                    "description": "Choose to include long abandoned calls in service level metrics.\nChannel types: voice, video.",
                    "example": true
                  },
                  "service_level_exclude_abandoned_quit_engagements": {
                    "type": "boolean",
                    "description": "Choose to include quit engagements in service level metrics.\nChannel types: chat, in_app_chat, sms",
                    "example": true
                  },
                  "service_level_target_in_percentage": {
                    "maximum": 100,
                    "minimum": 0,
                    "type": "integer",
                    "description": "The service-level target as the benchmark to refer to in reports.",
                    "example": 80
                  },
                  "agent_routing_profile_id": {
                    "type": "string",
                    "description": "The queue's agent routing profile ID. If this is empty, the agent routing profile will be removed.",
                    "example": "fgjdkhgfieryt7465435kjhdkhg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nQueue updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n**Error Code:** `1210` <br>\n Agent routing profile does not exist. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:update:queue:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0-fix",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:queue:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/agents": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "List queue agents",
        "description": "Retrieve the list of a queue's assigned agents. \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_queue_agents:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getQueueAgents",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueue agents list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "agents": {
                      "type": "array",
                      "description": "Information about the agents.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill Chill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          },
                          "role_id": {
                            "type": "string",
                            "description": "The role's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "role_name": {
                            "type": "string",
                            "description": "The role's name.",
                            "example": "Agent"
                          },
                          "status_id": {
                            "type": "string",
                            "description": "The user's availability status ID.",
                            "example": "1"
                          },
                          "status_name": {
                            "type": "string",
                            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as **Lunch**.",
                            "example": "Offline",
                            "enum": [
                              "Offline",
                              "Ready",
                              "Not Ready",
                              "Occupied"
                            ]
                          },
                          "user_access": {
                            "type": "string",
                            "description": "The user's access status. \n* `active` - The user's role permissions allow them to access the Contact Center. \n* `inactive` - The user cannot access the Contact Center.",
                            "example": "active",
                            "enum": [
                              "active",
                              "inactive"
                            ]
                          },
                          "opt_in_out_status": {
                            "type": "integer",
                            "description": "Opt out status.\n`0` - Opted in by agent himself or supervisor.\n`1` - Opted out by supervisor or admin.\n`2` - Opted out by agent himself.",
                            "example": 0,
                            "enum": [
                              0,
                              1,
                              2
                            ]
                          }
                        },
                        "description": "Information about the task queue agent."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:read:list_queue_agents:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_queue_agents:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Assign queue agents",
        "description": "Add agents to a queue. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:write:queue_agent:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "assignQueueAgents",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_ids": {
                    "maxItems": 30,
                    "type": "array",
                    "description": "The users to assign to the queue. The value can be an email address or a user ID. This request supports a maximum of 30 users per call.",
                    "items": {
                      "type": "string",
                      "example": "ukAAkZKfROKMSw1bj_RDFQ"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nQueue agents assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "agents": {
                      "type": "array",
                      "description": "Information about the agents.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill Chill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          },
                          "role_id": {
                            "type": "string",
                            "description": "The role's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "role_name": {
                            "type": "string",
                            "description": "The role's name.",
                            "example": "Agent"
                          },
                          "status_id": {
                            "type": "string",
                            "description": "The user's availability status ID.",
                            "example": "1"
                          },
                          "status_name": {
                            "type": "string",
                            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as Lunch.",
                            "example": "Offline",
                            "enum": [
                              "Offline",
                              "Ready",
                              "Not Ready",
                              "Occupied"
                            ]
                          },
                          "user_access": {
                            "type": "string",
                            "description": "The user's access status. \n* `active` - The user's role permissions allow them to access the Contact Center. \n* `inactive` - The user cannot access the Contact Center.",
                            "example": "active",
                            "enum": [
                              "active",
                              "inactive"
                            ]
                          },
                          "opt_in_out_status": {
                            "type": "integer",
                            "description": "Opt out status.\n`0` - Opted in by agent himself or supervisor.\n`1` - Opted out by supervisor or admin.\n`2` - Opted out by agent himself.",
                            "example": 0,
                            "enum": [
                              0,
                              1,
                              2
                            ]
                          }
                        },
                        "description": "Information about the task queue agent."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:write:queue_agent:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:queue_agent:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/agents/{userId}": {
      "delete": {
        "tags": [
          "Queues"
        ],
        "summary": "Unassign a queue agent",
        "description": "Remove an agent from a queue. \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:delete:queue_agent:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteQueueAgent",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The queue user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nQueue agent removed."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue agent does not exist: $userId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:delete:queue_agent:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:queue_agent:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Queues"
        ],
        "summary": "Update a queue agent",
        "description": "Update the list of agents in a queue. \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:update:queue_agent:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateQueueAgent",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the old task queue's ID and the new Contact Center queue's ID. Since the task queue ID will be deprecated in the future, change to the Contact Center queue's ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The queue user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "opt_in_out_status": {
                    "type": "integer",
                    "description": "Opt out status.\n`0`: Opt in by agent himself or supervisor.\n`1`: Opt out by supervisor or admin.\n`2`: Opt out by agent himself.",
                    "example": 0,
                    "enum": [
                      0,
                      1,
                      2
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nQueue agent updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1010` <br>\n The agent must be in an available state (Ready) to opt in to the queue. <br>\n**Error Code:** `1011` <br>\n The agent is not allowed to opt in or out of their assigned queues. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1001` <br>\n User does not exist: $userId. <br>\n**Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:update:queue_agent:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:queue_agent:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/dispositions": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "List queue dispositions",
        "description": "Return a list of queue's [dispositions](https://support.zoom.us/hc/en-us/articles/4470153057549-Managing-dispositions). \n\n \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_dispositions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getQueueDispositions",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueue dispositions list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "dispositions": {
                      "type": "array",
                      "description": "Information about the task queue's dispositions.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "disposition_id": {
                            "type": "string",
                            "description": "The disposition's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_name": {
                            "type": "string",
                            "description": "The disposition's name.",
                            "example": "Inquiry"
                          },
                          "disposition_description": {
                            "type": "string",
                            "description": "Information about the disposition.",
                            "example": "Inquiry dispositions."
                          },
                          "status": {
                            "type": "string",
                            "description": "The disposition's status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                            "example": "inactive",
                            "enum": [
                              "inactive",
                              "active"
                            ]
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the disposition was last modified.",
                            "format": "date-time",
                            "example": "2021-12-03T05:07:46Z"
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of user that last modified the disposition.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          }
                        },
                        "description": "Information about the task queue disposition."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:read:list_dispositions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_dispositions:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Assign queue dispositions",
        "description": "Add dispositions to a queue. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:write:queue disposition:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "assignQueueDispositions",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "disposition_ids": {
                    "maxItems": 30,
                    "type": "array",
                    "description": "The dispositions to assign to the queue. This request supports a maximum of 30 dispositions per call.",
                    "items": {
                      "type": "string",
                      "example": "sgdfghr_2454y5hdfgsfsgsdg"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nQueue dispositions assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dispositions": {
                      "type": "array",
                      "description": "Information about the dispositions",
                      "items": {
                        "type": "object",
                        "properties": {
                          "disposition_id": {
                            "type": "string",
                            "description": "The disposition's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_name": {
                            "type": "string",
                            "description": "The disposition's name.",
                            "example": "Inquiry"
                          },
                          "disposition_description": {
                            "type": "string",
                            "description": "Information about the disposition.",
                            "example": "Inquiry dispositions."
                          },
                          "status": {
                            "type": "string",
                            "description": "The disposition's status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                            "example": "inactive",
                            "enum": [
                              "inactive",
                              "active"
                            ]
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the disposition was last modified.",
                            "format": "date-time",
                            "example": "2021-12-03T05:07:46Z"
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of user that last modified the disposition.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          }
                        },
                        "description": "Information about the task queue disposition."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:write:queue disposition:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:queue disposition:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/dispositions/sets": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "List queue disposition sets",
        "description": "Return a list of queue's disposition sets(https://support.zoom.us/hc/en-us/articles/4470153057549-Managing-dispositions). \n\n \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_disposition_sets:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getQueueDispositionSets",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueue disposition sets list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "disposition_sets": {
                      "type": "array",
                      "description": "Information about the task queue's disposition sets.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "disposition_set_id": {
                            "type": "string",
                            "description": "The disposition set's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_set_name": {
                            "type": "string",
                            "description": "The disposition set's name.",
                            "example": "Inquiry"
                          },
                          "disposition_set_description": {
                            "type": "string",
                            "description": "The information about the disposition set.",
                            "example": "Inquiry dispositions."
                          },
                          "status": {
                            "type": "string",
                            "description": "The disposition set's status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                            "example": "inactive",
                            "enum": [
                              "inactive",
                              "active"
                            ]
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the disposition set was last modified.",
                            "format": "date-time",
                            "example": "2021-12-03T05:07:46Z"
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of user that last modified the disposition set.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          }
                        },
                        "description": "Information about the task's queue disposition set."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:read:list_disposition_sets:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_disposition_sets:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Assign a queue disposition set",
        "description": "Add a disposition set to a queue. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:write:queue_disposition_set:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "assignQueueDispositionSets",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "disposition_set_ids": {
                    "maxItems": 30,
                    "type": "array",
                    "description": "The IDs of the disposition sets to assign to the queue. This request supports a maximum of 30 dispositions per call.",
                    "items": {
                      "type": "string",
                      "example": "sgdfghr_2454y5hdfgsfsgsdg"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nQueue disposition sets assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "disposition_sets": {
                      "type": "array",
                      "description": "Information about the queue's disposition sets.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "disposition_set_id": {
                            "type": "string",
                            "description": "The disposition set's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_set_name": {
                            "type": "string",
                            "description": "The disposition set's name.",
                            "example": "Inquiry"
                          },
                          "disposition_set_description": {
                            "type": "string",
                            "description": "The information about the disposition set.",
                            "example": "Inquiry dispositions."
                          },
                          "status": {
                            "type": "string",
                            "description": "The disposition set's status. \n* `inactive` &mdash; Deactivated. \n* `active` &mdash; Activated.",
                            "example": "inactive",
                            "enum": [
                              "inactive",
                              "active"
                            ]
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the disposition set was last modified.",
                            "format": "date-time",
                            "example": "2021-12-03T05:07:46Z"
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of user that last modified the disposition set.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          }
                        },
                        "description": "Information about the task's queue disposition set."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:write:queue_disposition_set:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:queue_disposition_set:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/dispositions/sets/{dispositionSetId}": {
      "delete": {
        "tags": [
          "Queues"
        ],
        "summary": "Unassign a queue disposition set",
        "description": "Delete a disposition set from a queue. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:delete:queue_disposition_set:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteQueueDispositionSet",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "dispositionSetId",
            "in": "path",
            "description": "The queue disposition set's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sgdfghr_2454y5hdfgsfsgsdg"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nQueue disposition set deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue disposition set does not exist: $dispositionSetId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:delete:queue_disposition_set:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:queue_disposition_set:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/dispositions/{dispositionId}": {
      "delete": {
        "tags": [
          "Queues"
        ],
        "summary": "Unassign a queue disposition",
        "description": "Delete a disposition from a queue. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:delete:queue_disposition:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteQueueDisposition",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "dispositionId",
            "in": "path",
            "description": "The queue disposition's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "p985PidGR5K72vAoTDJocA"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nQueue disposition deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue disposition does not exist: $dispositionId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:delete:queue_disposition:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:queue_disposition:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/operating_hours": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get a queue's operating hours",
        "description": "Get information about a queue's operating hours. \n\n \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:read:queue_operating_hours:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getAQueueOperatingHours",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nOperating hours returned.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "account_default_business_hour",
                    "business_hour_id",
                    "business_hour_name"
                  ],
                  "type": "object",
                  "properties": {
                    "business_hour_id": {
                      "type": "string",
                      "description": "The business hours' ID.",
                      "example": "66ZjSQ7YTOescnINN_4vog"
                    },
                    "business_hour_name": {
                      "type": "string",
                      "description": "The business hours' name.",
                      "example": "Default Business hours"
                    },
                    "closure_set_id": {
                      "type": "string",
                      "description": "The closure's ID.",
                      "example": "Ixo-Na0bRfCyQ4q2lAryDw"
                    },
                    "closure_set_name": {
                      "type": "string",
                      "description": "The closure's name.",
                      "example": "Default Closure"
                    },
                    "account_default_business_hour": {
                      "type": "boolean",
                      "description": "Whether the queue's business hour is the account default business hour.",
                      "example": true
                    },
                    "account_default_closure_set": {
                      "type": "boolean",
                      "description": "Whether the queue's closure set is the account default.",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:read:queue_operating_hours:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:queue_operating_hours:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Queues"
        ],
        "summary": "Update a queue's operating hours",
        "description": "Update a queue's operating hours. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:patch:queue_operating_hours:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "QueueOperatingHoursUpdate",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account_default_business_hour": {
                    "type": "boolean",
                    "description": "Whether to use the account's default business hours. When the account's default business hours change, the business hours used by the queue also change.",
                    "example": true
                  },
                  "operating_hours_business_hour_id": {
                    "type": "string",
                    "description": "The business hours' ID.",
                    "example": "66ZjSQ7YTOescnINN_4vog"
                  },
                  "account_default_closure_set": {
                    "type": "boolean",
                    "description": "Whether to use the account's default closure set. When the account's default closure set changes, the closure set used by the queue also changes.",
                    "example": true
                  },
                  "operating_hours_closure_set_id": {
                    "type": "string",
                    "description": "The closure set's ID.",
                    "example": "Ixo-Na0bRfCyQ4q2lAryDw"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nOperating hours updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:patch:queue_operating_hours:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:patch:queue_operating_hours:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/supervisors": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "List queue supervisors",
        "description": "Return a list of a queue's assigned supervisors. \n\n \n\n**Scopes:** `contact_center_queue:read:admin`\n\n**Granular Scopes:** `contact_center:delete:queue_supervisor:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "getQueueSupervisors",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueue supervisors list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "supervisors": {
                      "type": "array",
                      "description": "Information about the supervisors.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill Chill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          },
                          "role_id": {
                            "type": "string",
                            "description": "The role's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "role_name": {
                            "type": "string",
                            "description": "The role's name.",
                            "example": "Agent"
                          },
                          "status_id": {
                            "type": "string",
                            "description": "The user's availability status ID.",
                            "example": "1"
                          },
                          "status_name": {
                            "type": "string",
                            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as **Lunch**.",
                            "example": "Offline",
                            "enum": [
                              "Offline",
                              "Ready",
                              "Not Ready",
                              "Occupied"
                            ]
                          },
                          "user_access": {
                            "type": "string",
                            "description": "The user's access status: \n* `active` - The user's role permissions allow them to access the Contact Center. \n* `inactive` - The user cannot access the Contact Center.",
                            "example": "active",
                            "enum": [
                              "active",
                              "inactive"
                            ]
                          }
                        },
                        "description": "Information about the task queue supervisor."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:read:admin",
              "contact_center:delete:queue_supervisor:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:queue_supervisor:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Assign queue supervisors",
        "description": "Add supervisors to a queue. \n\n \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:delete:queue_supervisor:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "assignQueueSupervisors",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_ids": {
                    "maxItems": 30,
                    "type": "array",
                    "description": "The users to assign to the queue. The value can be an email address or a user ID. This request supports a maximum of 30 users per call.",
                    "items": {
                      "type": "string",
                      "example": "ukAAkZKfROKMSw1bj_RDFQ"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nQueue supervisors assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supervisors": {
                      "type": "array",
                      "description": "Information about the supervisors.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill Chill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          },
                          "role_id": {
                            "type": "string",
                            "description": "The role's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "role_name": {
                            "type": "string",
                            "description": "The role's name.",
                            "example": "Agent"
                          },
                          "status_id": {
                            "type": "string",
                            "description": "The user's availability status ID.",
                            "example": "1"
                          },
                          "status_name": {
                            "type": "string",
                            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as &quot;Lunch&quot;.",
                            "example": "Offline",
                            "enum": [
                              "Offline",
                              "Ready",
                              "Not Ready",
                              "Occupied"
                            ]
                          },
                          "user_access": {
                            "type": "string",
                            "description": "The user's access status. \n* `active` - The user's role permissions allow them to access the Contact Center. \n* `inactive` - The user cannot access the Contact Center.",
                            "example": "active",
                            "enum": [
                              "active",
                              "inactive"
                            ]
                          }
                        },
                        "description": "Information about the task queue supervisor."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:delete:queue_supervisor:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:queue_supervisor:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/supervisors/{userId}": {
      "delete": {
        "tags": [
          "Queues"
        ],
        "summary": "Unassign a queue supervisor",
        "description": "Remove a supervisor from a queue. \n\n**Scopes:** `contact_center_queue:write:admin`\n\n**Granular Scopes:** `contact_center:delete:queue_supervisor:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteQueueSupervisor",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the old task queue's ID and the new Contact Center queue's ID. Since the task queue ID will be deprecated in the future, change to the Contact Center queue's ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The queue user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nQueue supervisor removed."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue supervisor does not exist: $userId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_queue:write:admin",
              "contact_center:delete:queue_supervisor:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_queue:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:queue_supervisor:admin"
          ]
        }
      }
    },
    "/contact_center/engagements/{engagementId}/recordings": {
      "get": {
        "tags": [
          "Recordings"
        ],
        "summary": "List engagement recordings",
        "description": "Return a list of all of an engagement's recordings. \n\n**Note:** Use recording-related APIs to manipulate data whose recording was created after July 18, 2022. \n\n \n\n**Scopes:** `contact_center_recording:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_recordings:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listEngagementRecordings",
        "parameters": [
          {
            "name": "engagementId",
            "in": "path",
            "description": "The engagement event's unique ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Xh79Eq6gQhy8I1vM-r8P-w"
            }
          },
          {
            "name": "channel_type",
            "in": "query",
            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "video"
              ]
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The recording's channel type. \n* `voice` - Voice recording \n* `video` - Video recording\n\n If channel is used as an input parameter, the deprecated parameter `channnel_type` will not be processed.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "video"
              ]
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If unspecified, this parameter returns data from the past 30 days.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "2023-01-01T00:00:00-08:00"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "2023-01-01T01:00:00-08:00"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nEngagement recordings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. The next page token is returned when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If unspecified, this parameter returns data from the past 30 days.",
                      "format": "string",
                      "example": "2023-01-01T00:00:00-08:00"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
                      "format": "string",
                      "example": "2023-01-01T01:00:00-08:00"
                    },
                    "recordings": {
                      "type": "array",
                      "description": "Information about the recordings.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recording_id": {
                            "type": "string",
                            "description": "The recording's unique ID.",
                            "example": "ghyetrjj_sdfsdgfkdjfl111"
                          },
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's unique ID.",
                            "example": "ghyetrjj_2342353rsgfkdjfl",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "smyko04pSCWt9zLI0nn3AQ"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "voice"
                          },
                          "recording_duration": {
                            "type": "integer",
                            "description": "The recording's duration in seconds.",
                            "example": 150
                          },
                          "download_url": {
                            "type": "string",
                            "description": "The URL to download the recording. For security purposes, you **must** provide an OAuth access token in the Authorization header to download the recording file using this URL. \n\n```curl --request GET \\\n  --url {download_url} \\\n  --header 'authorization: Bearer {access_token} \\\n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/download/01bdb222-9984-4f41-8141-2f760cb398aa?type=voice"
                          },
                          "transcript_url": {
                            "type": "string",
                            "description": "The URL to download the recording transcript. For security purposes, you **must** provide an OAuth access token in the authorization header to download the recording transcript file using this URL. \n```curl --request GET \n  --url {transcript_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/transcripts/download/4Q0ILNMfTA2nJolNxhg0Rw?type=voice"
                          },
                          "playback_url": {
                            "type": "string",
                            "description": "The URL to play the recording. For security purposes, you **must** provide an OAuth access token in the authorization header to play the recording file using this URL. \n```curl --request GET \n  --url {playback_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/playback/4Q0ILNMfTA2nJolNxhg0Rw?type=voice"
                          },
                          "recording_start_time": {
                            "type": "string",
                            "description": "The date and time when the recording's start time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T08:00:00Z"
                          },
                          "recording_end_time": {
                            "type": "string",
                            "description": "The date and time when the recording's end time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T09:00:00Z"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Tom"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email.",
                            "example": "xxxx@example.com"
                          },
                          "recording_type": {
                            "type": "string",
                            "description": "The recording's type. \n* `on_demand` - Manually trigger recording. \n* `automatic` - Automatically trigger recording.",
                            "example": "automatic",
                            "enum": [
                              "on_demand",
                              "automatic"
                            ]
                          },
                          "channel_type": {
                            "type": "string",
                            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
                            "example": "voice",
                            "deprecated": true,
                            "enum": [
                              "voice",
                              "video"
                            ]
                          },
                          "channel": {
                            "type": "string",
                            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
                            "example": "voice",
                            "enum": [
                              "voice",
                              "video"
                            ]
                          },
                          "direction": {
                            "type": "string",
                            "description": "The recording's call direction. \n* `inbound` - Call in. \n* `outbound` - Call out.",
                            "example": "outbound",
                            "enum": [
                              "inbound",
                              "outbound"
                            ]
                          },
                          "owner_id": {
                            "type": "string",
                            "description": "The recording's owner ID, either the queue ID or user ID.",
                            "example": "auiketrjj_2342353fsewkdjfl"
                          },
                          "owner_name": {
                            "type": "string",
                            "description": "The recording's owner name, either the queue name or user name.",
                            "example": "voice"
                          },
                          "owner_type": {
                            "type": "string",
                            "description": "The recording's owner type. \n* `user` - This recording belongs to an userl \n* `queue` - This recording belongs to a queue.",
                            "example": "queue",
                            "enum": [
                              "user",
                              "queue"
                            ]
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement event's unique ID.",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The recording's flow name.",
                            "example": "voice"
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The recording's flow ID.",
                            "example": "fsdfsd4oippe0ffewcbhjk"
                          },
                          "consumer_name": {
                            "type": "string",
                            "description": "The customer's name.\n* `Note` - This field will be abolished, and the `consumer_name` in `consumers` will be used uniformly.",
                            "example": "Jill",
                            "deprecated": true
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The customer's phone number.\n* `Note` - This field will be abolished, and the `consumer_number` in `consumers` will be used uniformly.",
                            "example": "+12058945728",
                            "deprecated": true
                          },
                          "consumers": {
                            "type": "array",
                            "description": "Information about the recording consumers.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "consumer_name": {
                                  "type": "string",
                                  "description": "The customer's name.",
                                  "example": "Jill"
                                },
                                "consumer_number": {
                                  "type": "string",
                                  "description": "The customer's phone number.",
                                  "example": "+12058945728"
                                }
                              },
                              "description": "Information about the recording consumer."
                            }
                          }
                        },
                        "description": "Information about the recording."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_recording:read:admin",
              "contact_center:read:list_recordings:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_recording:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_recordings:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Recordings"
        ],
        "summary": "Delete engagement recordings",
        "description": "Delete all recordings in a given engagement.  \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n \n\n**Scopes:** `contact_center_recording:write:admin`\n\n**Granular Scopes:** `contact_center:delete:recording:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteEngagementRecordings",
        "parameters": [
          {
            "name": "engagementId",
            "in": "path",
            "description": "The engagement's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Xh79Eq6gQhy8I1vM-r8P-w"
            }
          },
          {
            "name": "delete_all_recordings",
            "in": "query",
            "description": "Whether to delete all recordings in this engagement. \n* `true` &mdash; Delete all recordings in this engagement",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true,
              "default": true,
              "enum": [
                true
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nEngagement recordings deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `2805` <br>\nEngagement recordings does not exist: $engagementId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_recording:write:admin",
              "contact_center:delete:recording:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_recording:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:recording:admin"
          ]
        }
      }
    },
    "/contact_center/queues/{queueId}/recordings": {
      "get": {
        "tags": [
          "Recordings"
        ],
        "summary": "List queue recordings",
        "description": "Return a list of all recordings in a queue. \n\n**Note:** Use recording-related APIs to manipulate data whose recording was created after July 18, 2022. \n\n \n\n**Scopes:** `contact_center_recording:read:admin`,`contact_center_recording:read`\n\n**Granular Scopes:** `contact_center:read:list_recordings:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listQueueRecordings",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1Bgv2rs7Tqaq5hFM95UjWw"
            }
          },
          {
            "name": "channel_type",
            "in": "query",
            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "video"
              ]
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.\n\n If channel is used as an input parameter, the deprecated parameter `channnel_type` will not be processed.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "video"
              ]
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If unspecified, this parameter returns data from the past 30 days.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "2023-01-01T00:00:00-08:00"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "2023-01-01T01:00:00-08:00"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nQueue recordings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If unspecified, this parameter returns data from the past 30 days.",
                      "format": "string",
                      "example": "2023-01-01T00:00:00-08:00"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
                      "format": "string",
                      "example": "2023-01-01T01:00:00-08:00"
                    },
                    "recordings": {
                      "type": "array",
                      "description": "Information about the recordings.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recording_id": {
                            "type": "string",
                            "description": "The recording's unique ID.",
                            "example": "ghyetrjj_sdfsdgfkdjfl111"
                          },
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's unique ID.",
                            "example": "ghyetrjj_2342353rsgfkdjfl",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "smyko04pSCWt9zLI0nn3AQ"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "voice"
                          },
                          "recording_duration": {
                            "type": "integer",
                            "description": "The recording's duration, in seconds.",
                            "example": 150
                          },
                          "download_url": {
                            "type": "string",
                            "description": "The URL to download the recording. For security purposes, you **must** provide an OAuth access token in the Authorization header to download the recording file using this URL. Example:\n\n```curl --request GET \\\n  --url {download_url} \\\n  --header 'authorization: Bearer {access_token} \\\n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/download/01bdb222-9984-4f41-8141-2f760cb398aa?type=voice"
                          },
                          "transcript_url": {
                            "type": "string",
                            "description": "The URL to download the recording transcript. For security purposes, you **must** provide an OAuth access token in the authorization header to download the recording transcript file using this URL. Example:\n```curl --request GET \n  --url {transcript_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/transcripts/download/4Q0ILNMfTA2nJolNxhg0Rw?type=voice"
                          },
                          "playback_url": {
                            "type": "string",
                            "description": "The URL to play the recording. For security purposes, you **must** provide an OAuth access token in the authorization header to play the recording file using this URL. Example:\n```curl --request GET \n  --url {playback_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/playback/4Q0ILNMfTA2nJolNxhg0Rw?type=voice"
                          },
                          "recording_start_time": {
                            "type": "string",
                            "description": "The date and time when the recording's start time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T08:00:00Z"
                          },
                          "recording_end_time": {
                            "type": "string",
                            "description": "The date and time when the recording's end time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T09:00:00Z"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Tom"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email.",
                            "example": "xxxx@example.com"
                          },
                          "recording_type": {
                            "type": "string",
                            "description": "The recording's type. \n* `on_demand` - Manually trigger recording. \n* `automatic` - Automatically trigger recording.",
                            "example": "automatic",
                            "enum": [
                              "on_demand",
                              "automatic"
                            ]
                          },
                          "channel_type": {
                            "type": "string",
                            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
                            "example": "voice",
                            "deprecated": true,
                            "enum": [
                              "voice",
                              "video"
                            ]
                          },
                          "channel": {
                            "type": "string",
                            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
                            "example": "voice",
                            "enum": [
                              "voice",
                              "video"
                            ]
                          },
                          "direction": {
                            "type": "string",
                            "description": "The recording's call direction. \n* `inbound` - Call in. \n* `outbound` - Call out.",
                            "example": "outbound",
                            "enum": [
                              "inbound",
                              "outbound"
                            ]
                          },
                          "owner_id": {
                            "type": "string",
                            "description": "The recording's owner ID, either the queue ID or user ID.",
                            "example": "auiketrjj_2342353fsewkdjfl"
                          },
                          "owner_name": {
                            "type": "string",
                            "description": "The recording's owner name, either the queue name or user name.",
                            "example": "voice"
                          },
                          "owner_type": {
                            "type": "string",
                            "description": "The recording's owner type. \n* `user` - This recording belongs to an user. \n* `queue` - This recording belongs to a queue.",
                            "example": "queue",
                            "enum": [
                              "user",
                              "queue"
                            ]
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement event's unique ID.",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The recording's flow name.",
                            "example": "voice"
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The recording's flow ID.",
                            "example": "fsdfsd4oippe0ffewcbhjk"
                          },
                          "consumer_name": {
                            "type": "string",
                            "description": "The customer's name.\n* **Note** This field will be abolished, and the `consumer_name` in `consumers` will be used uniformly.",
                            "example": "Jill",
                            "deprecated": true
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The customer's phone number.\n* **Note** This field will be abolished, and the `consumer_number` in `consumers` will be used uniformly.",
                            "example": "+12058945728",
                            "deprecated": true
                          },
                          "consumers": {
                            "type": "array",
                            "description": "Information about the recording consumers.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "consumer_name": {
                                  "type": "string",
                                  "description": "The customer's name.",
                                  "example": "Jill"
                                },
                                "consumer_number": {
                                  "type": "string",
                                  "description": "The customer's phone number.",
                                  "example": "+12058945728"
                                }
                              },
                              "description": "Information about the recording consumer."
                            }
                          }
                        },
                        "description": "Information about the recording."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_recording:read:admin",
              "contact_center_recording:read",
              "contact_center:read:list_recordings:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_recording:read:admin",
            "contact_center_recording:read"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_recordings:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Recordings"
        ],
        "summary": "Delete queue recordings",
        "description": "Delete all recordings in a queue. \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n \n\n**Scopes:** `contact_center_recording:write:admin`\n\n**Granular Scopes:** `contact_center:delete:recording:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteQueueRecordings",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1Bgv2rs7Tqaq5hFM95UjWw"
            }
          },
          {
            "name": "delete_all_recordings",
            "in": "query",
            "description": "Whether to delete all recordings in this queue. \n* `true` &mdash; Delete all recordings in this queue",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true,
              "default": true,
              "enum": [
                true
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nQueue recordings deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId <br>\n**Error Code:** `2803` <br>\n Queue recordings does not exist: $queueId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_recording:write:admin",
              "contact_center:delete:recording:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_recording:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:recording:admin"
          ]
        }
      }
    },
    "/contact_center/recordings": {
      "get": {
        "tags": [
          "Recordings"
        ],
        "summary": "List recordings",
        "description": "Return a list of available recordings. \n\n**Note** Use recording-related APIs to manipulate data whose recording was created after July 18, 2022. \n\n \n\n**Scopes:** `contact_center_recording:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_recordings:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listRecordings",
        "parameters": [
          {
            "name": "query_date_type",
            "in": "query",
            "description": "Query date type. \n* `recording_start_time` - The recording's start time.\n* `recording_end_time` - The recording's end time.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "recording_start_time",
              "default": "recording_start_time"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If unspecified, this parameter returns data from the past 30 days.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "2023-01-01T00:00:00-08:00"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "2023-01-01T01:00:00-08:00"
            }
          },
          {
            "name": "recording_type",
            "in": "query",
            "description": "The recording's type. \n* `on_demand` - Manually trigger recording. \n* `automatic` - Automatically trigger recording.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "automatic",
              "enum": [
                "on_demand",
                "automatic"
              ]
            }
          },
          {
            "name": "owner_type",
            "in": "query",
            "description": "The recording's owner type. \n* `user` - This recording belongs to a user. \n* `queue` - This recording belongs to a queue.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "queue",
              "enum": [
                "user",
                "queue"
              ]
            }
          },
          {
            "name": "channel_type",
            "in": "query",
            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "video"
              ]
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.\n\n If channel is used as an input parameter, the deprecated parameter `channnel_type` will not be processed.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "video"
              ]
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nRecordings returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If unspecified, this parameter returns data from the past 30 days.",
                      "format": "string",
                      "example": "2023-01-01T00:00:00-08:00"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
                      "format": "string",
                      "example": "2023-01-01T01:00:00-08:00"
                    },
                    "recordings": {
                      "type": "array",
                      "description": "Information about the recordings.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recording_id": {
                            "type": "string",
                            "description": "The recording's unique ID.",
                            "example": "ghyetrjj_sdfsdgfkdjfl111"
                          },
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's unique ID.",
                            "example": "ghyetrjj_2342353rsgfkdjfl",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "smyko04pSCWt9zLI0nn3AQ"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "voice"
                          },
                          "recording_duration": {
                            "type": "integer",
                            "description": "The recording's duration in seconds.",
                            "example": 150
                          },
                          "download_url": {
                            "type": "string",
                            "description": "The URL to download the recording. For security purposes, you **must** provide an OAuth access token in the Authorization header to download the recording file using this URL. Example:\n\n```curl --request GET \\\n  --url {download_url} \\\n  --header 'authorization: Bearer {access_token} \\\n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/download/01bdb222-9984-4f41-8141-2f760cb398aa?type=voice"
                          },
                          "transcript_url": {
                            "type": "string",
                            "description": "The URL to download the recording transcript. For security purposes, you **must** provide an OAuth access token in the authorization header to download the recording transcript file using this URL. Example:\n```curl --request GET \n  --url {transcript_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/transcripts/download/4Q0ILNMfTA2nJolNxhg0Rw?type=voice"
                          },
                          "playback_url": {
                            "type": "string",
                            "description": "The URL to play the recording. For security purposes, you **must** provide an OAuth access token in the authorization header to play the recording file using this URL. Example:\n```curl --request GET \n  --url {playback_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/playback/4Q0ILNMfTA2nJolNxhg0Rw?type=voice"
                          },
                          "recording_start_time": {
                            "type": "string",
                            "description": "The date and time when the recording's start time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T08:00:00Z"
                          },
                          "recording_end_time": {
                            "type": "string",
                            "description": "The date and time when the recording's end time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T09:00:00Z"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Tom"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email.",
                            "example": "xxxx@example.com"
                          },
                          "recording_type": {
                            "type": "string",
                            "description": "The recording's type. \n* `on_demand` - Manually trigger recording. \n* `automatic` - Automatically trigger recording.",
                            "example": "automatic",
                            "enum": [
                              "on_demand",
                              "automatic"
                            ]
                          },
                          "channel_type": {
                            "type": "string",
                            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
                            "example": "voice",
                            "deprecated": true,
                            "enum": [
                              "voice",
                              "video"
                            ]
                          },
                          "channel": {
                            "type": "string",
                            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
                            "example": "voice",
                            "enum": [
                              "voice",
                              "video"
                            ]
                          },
                          "direction": {
                            "type": "string",
                            "description": "The recording's call direction. \n* `inbound` - Call in. \n* `outbound` - Call out.",
                            "example": "outbound",
                            "enum": [
                              "inbound",
                              "outbound"
                            ]
                          },
                          "owner_id": {
                            "type": "string",
                            "description": "The recording's owner ID, either the queue ID or user ID.",
                            "example": "auiketrjj_2342353fsewkdjfl"
                          },
                          "owner_name": {
                            "type": "string",
                            "description": "The recording's owner name, either thequeue name or user name.",
                            "example": "voice"
                          },
                          "owner_type": {
                            "type": "string",
                            "description": "The recording's owner type. \n* `user` - This recording belongs to a user. \n* `queue` - This recording belongs to a queue.",
                            "example": "queue",
                            "enum": [
                              "user",
                              "queue"
                            ]
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement event's unique ID.",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The recording's flow name.",
                            "example": "voice"
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The recording's flow ID.",
                            "example": "fsdfsd4oippe0ffewcbhjk"
                          },
                          "consumer_name": {
                            "type": "string",
                            "description": "The customer's name.\n* **Note** This field will be abolished, and the `consumer_name` in `consumers` will be used uniformly.",
                            "example": "Jill",
                            "deprecated": true
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The customer's phone number.\n* **Note** This field will be abolished, and the `consumer_number` in `consumers` will be used uniformly.",
                            "example": "+12058945728",
                            "deprecated": true
                          },
                          "consumers": {
                            "type": "array",
                            "description": "Information about the recording consumers.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "consumer_name": {
                                  "type": "string",
                                  "description": "The customer's name.",
                                  "example": "Jill"
                                },
                                "consumer_number": {
                                  "type": "string",
                                  "description": "The customer's phone number.",
                                  "example": "+12058945728"
                                }
                              },
                              "description": "Information about the recording consumer."
                            }
                          }
                        },
                        "description": "Information about the recording."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_recording:read:admin",
              "contact_center:read:list_recordings:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_recording:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_recordings:admin"
          ]
        }
      }
    },
    "/contact_center/recordings/{recordingId}": {
      "delete": {
        "tags": [
          "Recordings"
        ],
        "summary": "Delete a recording",
        "description": "Delete a selected recording. \n\n**Note**: Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n \n\n**Scopes:** `contact_center_recording:write:admin`\n\n**Granular Scopes:** `contact_center:delete:recording:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteRecording",
        "parameters": [
          {
            "name": "recordingId",
            "in": "path",
            "description": "The recording's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ghyetrjj_2342353rsgfkdjfl"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nRecording deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `2801` <br>\nRecording does not exist: $recordingId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_recording:write:admin",
              "contact_center:delete:recording:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_recording:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:recording:admin"
          ]
        }
      }
    },
    "/contact_center/users/{userId}/recordings": {
      "get": {
        "tags": [
          "Recordings"
        ],
        "summary": "List user's recordings",
        "description": "Get a user's recordings. \n\n**Note** Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n \n\n**Scopes:** `contact_center_recording:read`,`contact_center_recording:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_recordings:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listUserRecordings",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's user ID or email address. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Rz06l1-PS0iSvSAVt1y-mw"
            }
          },
          {
            "name": "channel_type",
            "in": "query",
            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "video"
              ]
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.\n\n If channel is used as an input parameter, the deprecated parameter `channnel_type` will not be processed.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "voice",
              "enum": [
                "voice",
                "video"
              ]
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If unspecified, this parameter returns data from the past 30 days.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "2023-01-01T00:00:00-08:00"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "2023-01-01T01:00:00-08:00"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nUser recordings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If unspecified, this parameter returns data from the past 30 days.",
                      "format": "string",
                      "example": "2023-01-01T00:00:00-08:00"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
                      "format": "string",
                      "example": "2023-01-01T01:00:00-08:00"
                    },
                    "recordings": {
                      "type": "array",
                      "description": "Information about the recordings.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recording_id": {
                            "type": "string",
                            "description": "The recording's unique ID.",
                            "example": "ghyetrjj_sdfsdgfkdjfl111"
                          },
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's unique ID.",
                            "example": "ghyetrjj_2342353rsgfkdjfl",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "smyko04pSCWt9zLI0nn3AQ"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "voice"
                          },
                          "recording_duration": {
                            "type": "integer",
                            "description": "The recording's duration in seconds.",
                            "example": 150
                          },
                          "download_url": {
                            "type": "string",
                            "description": "The URL to download the recording. For security purposes, you **must** provide an OAuth access token in the Authorization header to download the recording file using this URL. Example:\n\n```curl --request GET \\\n  --url {download_url} \\\n  --header 'authorization: Bearer {access_token} \\\n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/download/01bdb222-9984-4f41-8141-2f760cb398aa?type=voice"
                          },
                          "transcript_url": {
                            "type": "string",
                            "description": "The URL to download the recording transcript. For security purposes, you **must** provide an OAuth access token in the authorization header to download the recording transcript file using this URL. Example:\n```curl --request GET \n  --url {transcript_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/transcripts/download/4Q0ILNMfTA2nJolNxhg0Rw?type=voice"
                          },
                          "playback_url": {
                            "type": "string",
                            "description": "The URL to play the recording. For security purposes, you **must** provide an OAuth access token in the authorization header to play the recording file using this URL. Example:\n```curl --request GET \n  --url {playback_url} \n  --header 'authorization: Bearer {access_token}' \n  --header 'content-type: application/json'\n```",
                            "example": "https://api.zoom.us/v2/contact_center/recording/playback/4Q0ILNMfTA2nJolNxhg0Rw?type=voice"
                          },
                          "recording_start_time": {
                            "type": "string",
                            "description": "The date and time of the recording's start time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T08:00:00Z"
                          },
                          "recording_end_time": {
                            "type": "string",
                            "description": "The date and time of the recording's end time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss'TZD'.",
                            "format": "date-time",
                            "example": "2023-01-01T09:00:00Z"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Tom"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email.",
                            "example": "xxxx@example.com"
                          },
                          "recording_type": {
                            "type": "string",
                            "description": "The recording's type. \n* `on_demand` - Manually trigger recording. \n* `automatic` - Automatically trigger recording.",
                            "example": "automatic",
                            "enum": [
                              "on_demand",
                              "automatic"
                            ]
                          },
                          "channel_type": {
                            "type": "string",
                            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
                            "example": "voice",
                            "deprecated": true,
                            "enum": [
                              "voice",
                              "video"
                            ]
                          },
                          "channel": {
                            "type": "string",
                            "description": "The recording's channel type. \n* `voice` - Voice recording. \n* `video` - Video recording.",
                            "example": "voice",
                            "enum": [
                              "voice",
                              "video"
                            ]
                          },
                          "direction": {
                            "type": "string",
                            "description": "The recording's call direction. \n* `inbound` - Call in. \n* `outbound` - Call out.",
                            "example": "outbound",
                            "enum": [
                              "inbound",
                              "outbound"
                            ]
                          },
                          "owner_id": {
                            "type": "string",
                            "description": "The recording's owner ID, such as the queue ID or user ID.",
                            "example": "auiketrjj_2342353fsewkdjfl"
                          },
                          "owner_name": {
                            "type": "string",
                            "description": "The recording's owner name, such as queue name or user name.",
                            "example": "voice"
                          },
                          "owner_type": {
                            "type": "string",
                            "description": "The recording's owner type. \n* `user` - This recording belongs to an user. \n* `queue` - This recording belongs to a queue.",
                            "example": "queue",
                            "enum": [
                              "user",
                              "queue"
                            ]
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement event's unique ID.",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The recording's flow name.",
                            "example": "voice"
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The recording's flow ID.",
                            "example": "fsdfsd4oippe0ffewcbhjk"
                          },
                          "consumer_name": {
                            "type": "string",
                            "description": "The customer's name.\n* **Note** This field will be abolished, and the `consumer_name` in `consumers` will be used uniformly.",
                            "example": "Jill",
                            "deprecated": true
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The customer's phone number.\n* **Note**  This field will be abolished, and the `consumer_number` in `consumers` will be used uniformly.",
                            "example": "+12058945728",
                            "deprecated": true
                          },
                          "consumers": {
                            "type": "array",
                            "description": "Information about the recording consumers.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "consumer_name": {
                                  "type": "string",
                                  "description": "The customer's name.",
                                  "example": "Jill"
                                },
                                "consumer_number": {
                                  "type": "string",
                                  "description": "The customer's phone number.",
                                  "example": "+12058945728"
                                }
                              },
                              "description": "Information about the recording consumer."
                            }
                          }
                        },
                        "description": "Information about the recording."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_recording:read",
              "contact_center_recording:read:admin",
              "contact_center:read:list_recordings:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_recording:read",
            "contact_center_recording:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_recordings:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Recordings"
        ],
        "summary": "Delete user's recordings",
        "description": "Delete all of a given user's recordings.  \n\n**Note** Use recording-related APIs to manipulate data whose recording creation time is after 2022-07-18. \n\n \n\n**Scopes:** `contact_center_recording:write:admin`\n\n**Granular Scopes:** `contact_center:delete:recording:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteUserRecordings",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address of the user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Rz06l1-PS0iSvSAVt1y-mw"
            }
          },
          {
            "name": "delete_all_recordings",
            "in": "query",
            "description": "Whether to delete all of this user's recordings. \n* `true` - Delete all of this user's recordings.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true,
              "default": true,
              "enum": [
                true
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nQueue recordings deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `2804` <br>\n User recordings does not exist: $userId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_recording:write:admin",
              "contact_center:delete:recording:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "docfix-DEVELOPERS-4191-LS",
          "x-macro-scopes": [
            "contact_center_recording:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:recording:admin"
          ]
        }
      }
    },
    "/contact_center/regions": {
      "get": {
        "tags": [
          "Regions"
        ],
        "summary": "List regions",
        "description": "Get information about all available regions.\n\n**Scopes:** `contact_center_region:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_regions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "ListRegions",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`    Region list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "regions": {
                      "type": "array",
                      "description": "Information about the regions.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "region_id": {
                            "type": "string",
                            "description": "The region's ID.",
                            "example": "36c8dc7c-695f-11ed-a081-0a514d46f86b"
                          },
                          "region_name": {
                            "type": "string",
                            "description": "The region's name.",
                            "example": "Main Region"
                          },
                          "is_main_region": {
                            "type": "boolean",
                            "description": "Whether this region is the main region.",
                            "example": true
                          },
                          "sip_zone_id": {
                            "type": "string",
                            "description": "The region SIP zone's ID.",
                            "example": "AfgzMEweSQ6tqzC8jhYJ2A"
                          },
                          "sip_zone_name": {
                            "type": "string",
                            "description": "The region SIP zone's name.",
                            "example": "zccsipzone"
                          },
                          "users_count": {
                            "type": "integer",
                            "description": "The number of users assigned to region.",
                            "example": 20
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the asset was last modified.",
                            "format": "date-time",
                            "example": "2022-02-15T09:27:15Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_region:read:admin",
              "contact_center:read:list_regions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_region:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_regions:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Regions"
        ],
        "summary": "Create a region",
        "description": "Create a new region.  \n\n**Scopes:** `contact_center_region:write:admin`\n\n**Granular Scopes:** `contact_center:write:region:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "CreateARegion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "region_name": {
                    "type": "string",
                    "description": "The region's name.",
                    "example": "Customer region"
                  },
                  "sip_zone_id": {
                    "type": "string",
                    "description": "The region SIP zone's ID.",
                    "example": "AfgzMEweSQ6tqzC8jhYJ2A"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `201`    Region created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "region_name": {
                      "type": "string",
                      "description": "The region's name.",
                      "example": "Customer region"
                    },
                    "region_id": {
                      "type": "string",
                      "description": "The region's ID.",
                      "example": "6c8dc7c-695f-11ed-a081-0a514d46f86b"
                    },
                    "sip_zone_id": {
                      "type": "string",
                      "description": "The region SIP zone's ID.",
                      "example": "AfgzMEweSQ6tqzC8jhYJ2A"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_region:write:admin",
              "contact_center:write:region:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_region:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:region:admin"
          ]
        }
      }
    },
    "/contact_center/regions/{regionId}": {
      "get": {
        "tags": [
          "Regions"
        ],
        "summary": "Get a region",
        "description": "Get information about a region.  \n\n**Scopes:** `contact_center_region:read:admin`\n\n**Granular Scopes:** `contact_center:read:region:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "GetARegion",
        "parameters": [
          {
            "name": "regionId",
            "in": "path",
            "description": "The region ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6c8dc7c-695f-11ed-a081-0a514d46f86b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`    Region returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "region_id": {
                      "type": "string",
                      "description": "The region's ID.",
                      "example": "36c8dc7c-695f-11ed-a081-0a514d46f86b"
                    },
                    "region_name": {
                      "type": "string",
                      "description": "The region's name.",
                      "example": "Main Region"
                    },
                    "sip_zone_id": {
                      "type": "string",
                      "description": "The region SIP zone's ID.",
                      "example": "AfgzMEweSQ6tqzC8jhYJ2A"
                    },
                    "sip_zone_name": {
                      "type": "string",
                      "description": "The region SIP zone's ID.",
                      "example": "zccsipzone"
                    },
                    "is_main_region": {
                      "type": "boolean",
                      "description": "Whether this region is the main region.",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_region:read:admin",
              "contact_center:read:region:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_region:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:region:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Regions"
        ],
        "summary": "Delete a region",
        "description": "Delete a site and move its members to another region.   \n\n**Scopes:** `contact_center_region:write:admin`\n\n**Granular Scopes:** `contact_center:delete:region:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "DeleteARegion",
        "parameters": [
          {
            "name": "regionId",
            "in": "path",
            "description": "The region ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6c8dc7c-695f-11ed-a081-0a514d46f86b"
            }
          },
          {
            "name": "move_users_to_region_id",
            "in": "query",
            "description": "ID of the region to move users to.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5dJBFbVESne5rjbVT4LqkA"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`    Region deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_region:write:admin",
              "contact_center:delete:region:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_region:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:region:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Regions"
        ],
        "summary": "Update a region",
        "description": "Update information for a region.\n\n**Scopes:** `contact_center_region:write:admin`\n\n**Granular Scopes:** `contact_center:udpate:region:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "UpdateARegion",
        "parameters": [
          {
            "name": "regionId",
            "in": "path",
            "description": "The region's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6c8dc7c-695f-11ed-a081-0a514d46f86b"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "region_name": {
                    "type": "string",
                    "description": "The region's name.",
                    "example": "Customer region"
                  },
                  "sip_zone_id": {
                    "type": "string",
                    "description": "The region SIP zone's ID.",
                    "example": "AfgzMEweSQ6tqzC8jhYJ2A"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`    Region updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_region:write:admin",
              "contact_center:udpate:region:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_region:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:udpate:region:admin"
          ]
        }
      }
    },
    "/contact_center/regions/{regionId}/users": {
      "get": {
        "tags": [
          "Regions"
        ],
        "summary": "List a region's users",
        "description": "Retrieve the list of a region's assigned agents. \n\n \n\n**Scopes:** `contact_center_region:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_region_users:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "ListRegion'sUsers",
        "parameters": [
          {
            "name": "regionId",
            "in": "path",
            "description": "The region's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "8f71O6rWT8KFUGQmJIFAdQ"
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "description": "The role's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nRegion's users list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "users": {
                      "type": "array",
                      "description": "Information about the users.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill Chill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          },
                          "role_id": {
                            "type": "string",
                            "description": "The user's role ID.",
                            "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                          },
                          "role_name": {
                            "type": "string",
                            "description": "The role's name.",
                            "example": "Agent"
                          }
                        },
                        "description": "Information about the region user."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `400` <br>\n Region is not enabled for this account: $accountId. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1017` <br>\n Region does not exist: $regionId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_region:read:admin",
              "contact_center:read:list_region_users:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_region:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_region_users:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Regions"
        ],
        "summary": "Assign users to a region",
        "description": "Assign users to a region.\n\n**Scopes:** `contact_center_region:write:admin`\n\n**Granular Scopes:** `contact_center:write:region_user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "AssignUsersToARegion",
        "parameters": [
          {
            "name": "regionId",
            "in": "path",
            "description": "The region's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "_mgt2VRsRy6SWvgI7O0sZQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_ids": {
                    "maxItems": 20,
                    "type": "array",
                    "description": "The users to assign to a region, up to 20 users per call. The value is either an email address or a user ID.",
                    "items": {
                      "type": "string",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`  \n  Users assigned."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `400` <br>\n Region is not enabled for this account: $accountId. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1017` <br>\n Region does not exist: $regionId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_region:write:admin",
              "contact_center:write:region_user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_region:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:region_user:admin"
          ]
        }
      }
    },
    "/contact_center/analytics/agents/status_history": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List agent's status history reports",
        "description": "Generate a list of an agent's status history reports. \n\n \n\n**Scopes:** `contact_center_report:read:admin`\n\n**Granular Scopes:** `contact_center:read:agent_status_report:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "listAgentStatusHistory",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "example": 10,
              "default": 10
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "The call's timezone. The default is **UTC**.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Asia/Shanghai"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameters is specified. The end time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "queue_id",
            "in": "query",
            "description": "The queue's ID.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "cc_queue_id",
            "in": "query",
            "description": "The Contact Center queue's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "dghrxHN4SkS6N4wsrYBjp"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The agent's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ukAAkZKfROKMSw1bj_RDFQ"
            }
          },
          {
            "name": "status_id",
            "in": "query",
            "description": "The status's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "0"
            }
          },
          {
            "name": "sub_status_id",
            "in": "query",
            "description": "The sub status's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "101"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Agent's status history reports list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next-page token to paginate through large result sets. A next-page token returns whenever the set of available results exceeds the current page size.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 100,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 10
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The call's [timezone ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). The default is **UTC**.",
                      "example": "America/Los_Angeles"
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
                      "format": "date-time",
                      "example": "2021-12-10T00:00:00Z"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
                      "format": "date-time",
                      "example": "2021-12-10T00:15:00Z"
                    },
                    "statuses": {
                      "type": "array",
                      "description": "Information about the agent's status history reports.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The agent's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The agent's name.",
                            "example": "Jilly"
                          },
                          "status_id": {
                            "type": "string",
                            "description": "The status's ID.",
                            "example": "1"
                          },
                          "status_name": {
                            "type": "string",
                            "description": "The status's name. \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as &quot;Lunch&quot; or  &quot;Out on Monday&quot;.",
                            "example": "Not Ready",
                            "enum": [
                              "Offline",
                              "Ready",
                              "Not Ready",
                              "Occupied",
                              "string"
                            ]
                          },
                          "sub_status_id": {
                            "type": "string",
                            "description": "The sub status's ID.",
                            "example": "101"
                          },
                          "sub_status_name": {
                            "type": "string",
                            "description": "The sub status's name.  \n* Inbound \n* Transferring in \n* Wrapping up \n* Holding \n* Transferring out \n* Taking over \n* Monitoring \n* Barging \n* Whispering \n* Outbound \n* A custom sub status, such as &quot;Break&quot; or &quot;Out on Monday&quot;.",
                            "example": "Lunch",
                            "enum": [
                              "Inbound",
                              "Transferring in",
                              "Wrapping up",
                              "Holding",
                              "Transferring out",
                              "Taking Over",
                              "Monitoring",
                              "Barging",
                              "Whispering",
                              "Outbound",
                              "string"
                            ]
                          },
                          "start_time": {
                            "type": "string",
                            "description": "The date and time when the status started, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss&rsquo;TZD&rsquo;).",
                            "example": "2022-07-20T14:00:00-08:00"
                          },
                          "end_time": {
                            "type": "string",
                            "description": "The date and time when the status ended, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss&rsquo;TZD&rsquo;).",
                            "example": "2022-07-20T14:15:00-08:00"
                          },
                          "duration": {
                            "type": "integer",
                            "description": "The agent's status-changed duration, in seconds.",
                            "format": "int64",
                            "example": 1
                          }
                        },
                        "description": "Information about the agent status report."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n**Error Code:** `1001` <br>\n User does not exist: $userId. <br>\n**Error Code:** `1101` <br>\n Status does not exist: $statusId. <br>\n**Error Code:** `1102` <br>\n Sub status does not exist: $subStatusId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_report:read:admin",
              "contact_center:read:agent_status_report:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_report:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:agent_status_report:admin"
          ]
        }
      }
    },
    "/contact_center/analytics/agents/time_sheets": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List agent's time sheet reports",
        "description": "Generate a list of an agent's time sheet reports. \n\n \n\n**Scopes:** `contact_center_report:read:admin`\n\n**Granular Scopes:** `contact_center:read:agent_report:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "listAgentTimeSheet",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "example": 10,
              "default": 10
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "The call's timezone. The default is **UTC**.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Asia/Shanghai"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameters is specified. The end time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "queue_id",
            "in": "query",
            "description": "The queue's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The agent's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ukAAkZKfROKMSw1bj_RDFQ"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The historical queue report's interval.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1_month",
              "enum": [
                "15_minutes",
                "30_minutes",
                "1_hour",
                "1_day",
                "1_week",
                "1_month"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Agent's time sheet reports list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next-page token to paginate through large result sets. A next-page token returns whenever the set of available results exceeds the current page size.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 100,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 10
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The call's [timezone ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). The default is **UTC**.",
                      "example": "America/Los_Angeles"
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
                      "format": "date-time",
                      "example": "2021-12-10T00:00:00Z"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
                      "format": "date-time",
                      "example": "2021-12-10T00:15:00Z"
                    },
                    "agents": {
                      "type": "array",
                      "description": "Information about the agent's time sheet reports.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The agent's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The agent's name.",
                            "example": "Jilly"
                          },
                          "ready_duration": {
                            "type": "integer",
                            "description": "The total ready status time, in seconds.",
                            "format": "int64",
                            "example": 3600
                          },
                          "ready_percentage": {
                            "type": "integer",
                            "description": "The percentage of ready status.",
                            "format": "int32",
                            "example": 85
                          },
                          "not_ready_duration": {
                            "type": "integer",
                            "description": "The total not-ready status time, in seconds.",
                            "format": "int64",
                            "example": 3600
                          },
                          "not_ready_percentage": {
                            "type": "integer",
                            "description": "The percentage of not ready status.",
                            "format": "int32",
                            "example": 85
                          },
                          "occupied_duration": {
                            "type": "integer",
                            "description": "The total occupied-status time, in seconds.",
                            "format": "int64",
                            "example": 3600
                          },
                          "occupied_percentage": {
                            "type": "integer",
                            "description": "The occupied-status percentage.",
                            "format": "int32",
                            "example": 85
                          },
                          "online_duration": {
                            "type": "integer",
                            "description": "The total online-status time, in seconds.",
                            "format": "int64",
                            "example": 3600
                          },
                          "offline_duration": {
                            "type": "integer",
                            "description": "The total offline-status time, in seconds.",
                            "format": "int64",
                            "example": 3600
                          },
                          "inbound_average_voice_call_talking_duration": {
                            "type": "integer",
                            "description": "The average voice call duration, in seconds.",
                            "format": "int64",
                            "example": 3600
                          },
                          "average_video_call_talking_duration": {
                            "type": "integer",
                            "description": "The average video call duration, in seconds.",
                            "format": "int64",
                            "example": 3600
                          },
                          "average_wrap_up_duration": {
                            "type": "integer",
                            "description": "The average wrap-up call duration, in seconds.",
                            "format": "int64",
                            "example": 3600
                          },
                          "start_time_interval": {
                            "type": "string",
                            "description": "The current interval's start date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                            "example": "2022-07-20T14:00:00-08:00"
                          },
                          "end_time_interval": {
                            "type": "string",
                            "description": "The current interval's end date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                            "example": "2022-07-20T14:15:00-08:00"
                          },
                          "total_outbound_voice_call": {
                            "type": "integer",
                            "description": "The total number of outbound voice calls.",
                            "format": "int64",
                            "example": 3
                          },
                          "total_outbound_voice_call_duration": {
                            "type": "number",
                            "description": "The total outbound voice calls duration, in seconds.",
                            "format": "double",
                            "example": 50
                          },
                          "total_inbound_voice_call": {
                            "type": "integer",
                            "description": "The total number of inbound voice calls.",
                            "format": "int64",
                            "example": 3
                          },
                          "total_inbound_voice_call_duration": {
                            "type": "number",
                            "description": "The total inbound voice calls duration, in seconds.",
                            "format": "double",
                            "example": 78
                          }
                        },
                        "description": "Information about the agent's time sheet reports."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n**Error Code:** `1001` <br>\n User does not exist: $userId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_report:read:admin",
              "contact_center:read:agent_report:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "docfix-DEVELOPERS-4191-LS",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_report:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:agent_report:admin"
          ]
        }
      }
    },
    "/contact_center/analytics/historical/details/metrics": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List historical detail reports",
        "description": "Generates a list of historical detail reports.  \n\n**Scopes:** `contact_center_report:read:admin`\n\n**Granular Scopes:** `contact_center:read:engagement_report:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "listHistoricalDetailMetric",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "example": 10,
              "default": 10
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "The call's timezone. The default is **UTC**.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Asia/Shanghai"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, it returns data from the past 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameter is specified. The end time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "queue_ids",
            "in": "query",
            "description": "Currently supports two different IDs, the task queue's ID and Contact Center queue's ID. The task queue's ID will be completely deprecated in the future. Change to the Contact Center queue ID as soon as possible.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Ql3qxUWXSHes4PmcOmzyOg"
              }
            }
          },
          {
            "name": "cc_queue_ids",
            "in": "query",
            "description": "A comma-separated list of Contact Center queue IDs to query, up to 20 queue IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Ql3qxUWXSHes4PmcOmzyOg"
              }
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The agent's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ukAAkZKfROKMSw1bj_RDFQ"
            }
          },
          {
            "name": "consumer_number",
            "in": "query",
            "description": "The consumer's phone number.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "+12059300920"
            }
          },
          {
            "name": "consumer_id",
            "in": "query",
            "description": "The consumer ID for video, chat, email, or SMS engagements.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "The engagement's direction. \n\n Voice, SMS : \n* `inbound` \n* `outbound` \n\n Chat, Video: \n* `inbound`",
            "required": false,
            "schema": {
              "type": "string",
              "example": "inbound",
              "enum": [
                "inbound",
                "outbound"
              ]
            }
          },
          {
            "name": "results",
            "in": "query",
            "description": "The engagement's results. \n\n Voice \n* `completed` \n* `short_abandoned` \n* `long_abandoned` \n* `hold_abandoned` \n* `overflowed_to_inbox` \n* `overflowed_to_disconnect` \n* `long_calls` \n* `short_calls` \n* `hang_up_calls` \n* `missed` \n* `declined` \n\n Video: \n* `completed` \n* `short_abandoned` \n* `long_abandoned` \n* `missed` \n* `declined` \n\n Chat, SMS: \n* `completed` \n* `auto_closed` \n* `missed` \n* `declined`",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "completed"
              }
            }
          },
          {
            "name": "channel_types",
            "in": "query",
            "description": "The channel's type. It provides only a single channel type.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "voice",
                "enum": [
                  "voice",
                  "video",
                  "chat",
                  "sms"
                ]
              }
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The task's channel. \n* `voice` \n* `video` \n* `messaging` \n* `email` \n\nIt provides only a single channel. \n\nIf channel is used as an input parameter, the deprecated parameter `channel_types` is not processed.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "messaging",
              "enum": [
                "voice",
                "video",
                "messaging",
                "email"
              ]
            }
          },
          {
            "name": "channel_sources",
            "in": "query",
            "description": "The channel's source. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel. \n* `facebook_messenger` - Only applies to messaging channel. \n* `whatsapp` - Only applies to messaging channel. \n* `email_address` - Only applies to email channel. \n\nIt provides multiple `channel_sources`.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "web_chat,in_app_chat",
                "enum": [
                  "web_chat",
                  "in_app_chat",
                  "sms",
                  "facebook_messenger",
                  "whatsapp",
                  "email_address"
                ]
              }
            }
          },
          {
            "name": "queue_wait_type",
            "in": "query",
            "description": "The queue's wait type. This field is applicable to voice channel.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "live_waiting",
              "enum": [
                "live_waiting",
                "callback"
              ]
            }
          },
          {
            "name": "required_skill_ids",
            "in": "query",
            "description": "The required skill's ID. This field is applicable to voice channel.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Ql3qxUWXSHes4PmcOmzyOg"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Historical detail reports list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 100,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 10
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The call's [timezone ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). The default is **UTC**.",
                      "example": "America/Los_Angeles"
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, it returns data from the past 24 hours.",
                      "format": "date-time",
                      "example": "2021-12-10T00:00:00Z"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
                      "format": "date-time",
                      "example": "2021-12-10T00:15:00Z"
                    },
                    "details": {
                      "type": "array",
                      "description": "The information about the historical detail reports.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement's ID",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "channels": {
                            "type": "array",
                            "description": "The task's channels",
                            "items": {
                              "type": "object",
                              "properties": {
                                "channel": {
                                  "type": "string",
                                  "description": "The task's channel. \n* `voice` \n* `video` \n* `messaging` \n* `email`",
                                  "example": "messaging",
                                  "enum": [
                                    "voice",
                                    "video",
                                    "messaging",
                                    "email"
                                  ]
                                },
                                "channel_source": {
                                  "type": "string",
                                  "description": "The channel's source. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel.\n* `facebook_messenger` - Only applies to messaging channel.\n* `whatsapp` - Only applies to messaging channel.\n* `email_address` - Only applies to email channel.",
                                  "example": "in_app_chat",
                                  "enum": [
                                    "web_chat",
                                    "in_app_chat",
                                    "sms",
                                    "facebook_messenger",
                                    "whatsapp",
                                    "email_address"
                                  ]
                                }
                              }
                            }
                          },
                          "direction": {
                            "type": "string",
                            "description": "The engagement's direction. \\n* `inbound`\\n* `outbound",
                            "example": "inbound",
                            "enum": [
                              "inbound",
                              "outbound"
                            ]
                          },
                          "consumer_number": {
                            "type": "string",
                            "description": "The consumer's phone number.",
                            "example": "+12059300920"
                          },
                          "consumer_id": {
                            "type": "string",
                            "description": "The consumer's ID, for video and chat and email.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "consumer_name": {
                            "type": "string",
                            "description": "The consumer's name, for video and chat and email.",
                            "example": "Tester"
                          },
                          "start_time": {
                            "type": "string",
                            "description": "The engagement's starting date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                            "format": "date-time",
                            "example": "2020-02-11T05:39:50Z"
                          },
                          "results": {
                            "type": "string",
                            "description": "The engagement's result.",
                            "example": "completed",
                            "enum": [
                              "completed",
                              "contained",
                              "short_abandoned",
                              "long_abandoned",
                              "hold_abandoned",
                              "overflowed",
                              "overflowed_to_inbox",
                              "overflowed_to_disconnect",
                              "long_calls",
                              "short_calls",
                              "hang_up_calls",
                              "auto_closed",
                              "abandon_quit",
                              "missed",
                              "declined",
                              "callback_abandoned_by_consumer"
                            ]
                          },
                          "total_duration": {
                            "type": "integer",
                            "description": "The engagement's maximum agent duration, in seconds.",
                            "format": "int64",
                            "example": 10
                          },
                          "ivr_duration": {
                            "type": "integer",
                            "description": "The engagement's IVR duration, in seconds.",
                            "format": "int64",
                            "example": 5
                          },
                          "waiting_duration": {
                            "type": "integer",
                            "description": "The engagement's waiting duration, in seconds.",
                            "format": "int64",
                            "example": 10
                          },
                          "talking_duration": {
                            "type": "integer",
                            "description": "The engagement's talking duration, in seconds.",
                            "format": "int64",
                            "example": 20
                          },
                          "hold_duration": {
                            "type": "integer",
                            "description": "The engagement's hold duration, in seconds.",
                            "format": "int64",
                            "example": 20
                          },
                          "wrap_up_duration": {
                            "type": "integer",
                            "description": "The engagement's wrap-up duration, in seconds.",
                            "format": "int64",
                            "example": 10
                          },
                          "disposition_id": {
                            "type": "string",
                            "description": "The disposition's ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "disposition_name": {
                            "type": "string",
                            "description": "The disposition's name.",
                            "example": "Inquiry"
                          },
                          "flows": {
                            "type": "array",
                            "description": "Information about the engagement's flows.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "flow_id": {
                                  "type": "string",
                                  "description": "The flow's ID.",
                                  "example": "zeYjXoDOS_eV1QmTpj63PQ"
                                },
                                "flow_name": {
                                  "type": "string",
                                  "description": "The flow's name.",
                                  "example": "Demo"
                                },
                                "flow_version": {
                                  "type": "string",
                                  "description": "The flow's version.",
                                  "example": "5"
                                }
                              },
                              "description": "Information about the flow."
                            }
                          },
                          "queues": {
                            "type": "array",
                            "description": "Information about the engagement's queues.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "queue_id": {
                                  "type": "string",
                                  "description": "The queue's ID.",
                                  "example": "d95avl1eRJ-H162PZUJ-qg",
                                  "deprecated": true
                                },
                                "cc_queue_id": {
                                  "type": "string",
                                  "description": "The Contact Center queue's ID.",
                                  "example": "d95avl1eRJ-H162PZUJ-qg"
                                },
                                "queue_name": {
                                  "type": "string",
                                  "description": "The queue's name.",
                                  "example": "agentQueue"
                                }
                              },
                              "description": "Information about the queue."
                            }
                          },
                          "agents": {
                            "type": "array",
                            "description": "Information about the engagement's agents.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "user_id": {
                                  "type": "string",
                                  "description": "The agent's ID.",
                                  "example": "ukAAkZKfROKMSw1bj_RDFQ"
                                },
                                "display_name": {
                                  "type": "string",
                                  "description": "The agent's name.",
                                  "example": "Jilly"
                                }
                              },
                              "description": "Information about the queue."
                            }
                          },
                          "total_flow_duration": {
                            "type": "integer",
                            "description": "The total time of engagement's flows, in seconds.",
                            "format": "int64",
                            "example": 10
                          },
                          "queue_wait_type": {
                            "type": "string",
                            "description": "The queue's wait type. Applicable to voice channels.",
                            "example": "live_waiting",
                            "enum": [
                              "live_waiting",
                              "callback"
                            ]
                          },
                          "last_widget_name": {
                            "type": "string",
                            "description": "The last widget's name.",
                            "example": "PhoneEnQueue RouteTo"
                          },
                          "agent_first_message_speed": {
                            "type": "integer",
                            "description": "The engagement's initial response time, in seconds.",
                            "format": "int64",
                            "example": 0
                          },
                          "dialed_numbers": {
                            "type": "array",
                            "description": "The dialed numbers. Applicable to voice, video, and SMS channels.",
                            "items": {
                              "type": "string",
                              "example": "+12059300920"
                            }
                          },
                          "callback_waiting_duration": {
                            "type": "integer",
                            "description": "The callback waiting duration, in seconds. Applicable to voice channels.",
                            "format": "int64",
                            "example": 0
                          },
                          "callback_pending_duration": {
                            "type": "integer",
                            "description": "The callback pending duration, in seconds. Applicable to voice channels.",
                            "format": "int64",
                            "example": 0
                          },
                          "handling_duration": {
                            "type": "integer",
                            "description": "The handling duration, in seconds. Applicable to voice channels.",
                            "format": "int64",
                            "example": 0
                          },
                          "ring_duration": {
                            "type": "integer",
                            "description": "The ring duration, in seconds. Applicable to voice and video channels.",
                            "format": "int64",
                            "example": 0
                          },
                          "required_skills": {
                            "type": "array",
                            "description": "The required skill names. Applicable to voice channels.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "skill_id": {
                                  "type": "string",
                                  "description": "The skill's ID.",
                                  "example": "saaHWgVMGQU69soco456oNA"
                                },
                                "skill_name": {
                                  "type": "string",
                                  "description": "The skill's name.",
                                  "example": "French"
                                },
                                "minimum_proficiency_level": {
                                  "type": "integer",
                                  "description": "The skill category's minimum proficiency level.",
                                  "example": 1
                                }
                              },
                              "description": "Information about the required skill."
                            }
                          },
                          "optional_skills": {
                            "type": "array",
                            "description": "The optional skill names. Applicable to voice channels.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "skill_id": {
                                  "type": "string",
                                  "description": "The skill's ID.",
                                  "example": "saaHWgVMGQU69soco456oNA"
                                },
                                "skill_name": {
                                  "type": "string",
                                  "description": "The skill's name.",
                                  "example": "French"
                                },
                                "matched": {
                                  "type": "boolean",
                                  "description": "Whether the skill is matched.",
                                  "example": false
                                }
                              },
                              "description": "Information about the optional skill."
                            }
                          },
                          "agent_skills": {
                            "type": "array",
                            "description": "The agent skill names. Applicable to voice channels.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "skill_id": {
                                  "type": "string",
                                  "description": "The skill's ID.",
                                  "example": "saaHWgVMGQU69soco456oNA"
                                },
                                "skill_name": {
                                  "type": "string",
                                  "description": "The skill's name.",
                                  "example": "French"
                                },
                                "proficiency_level": {
                                  "type": "integer",
                                  "description": "The skill category's proficiency level.",
                                  "example": 1
                                }
                              },
                              "description": "Information about the required skill."
                            }
                          }
                        },
                        "description": "The information about the historical detail report."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n**Error Code:** `1001` <br>\n User does not exist: $userId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_report:read:admin",
              "contact_center:read:engagement_report:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_report:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:engagement_report:admin"
          ]
        }
      }
    },
    "/contact_center/analytics/historical/queues/metrics": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List historical queue reports",
        "description": "Generate a list of historical queue reports. \n\n \n\n**Scopes:** `contact_center_report:read:admin`\n\n**Granular Scopes:** `contact_center:read:queue_report:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "listHistoricalQueueMetric",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "example": 10,
              "default": 10
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "The call's timezone. The default is **UTC**.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Asia/Shanghai"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameters is specified. The end time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "queue_ids",
            "in": "query",
            "description": "A comma-separated list of queue IDs to query, up to 20 queue IDs.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Ql3qxUWXSHes4PmcOmzyOg"
              }
            }
          },
          {
            "name": "cc_queue_ids",
            "in": "query",
            "description": "A comma-separated list of Contact Center queue IDs to query, up to 20 queue IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Ql3qxUWXSHes4PmcOmzyOg"
              }
            }
          },
          {
            "name": "channel_types",
            "in": "query",
            "description": "The channel's type. Provide only a single channel type.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "voice",
                "enum": [
                  "voice",
                  "video",
                  "chat",
                  "sms"
                ]
              }
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The task's channel. \n* `voice` \n* `video` \n* `messaging` \n* `email` \n\nProvide only a single channel. \n\nIf channel is used as an input parameter, the deprecated parameter `channel_types` will not be processed.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "messaging",
              "enum": [
                "voice",
                "video",
                "messaging",
                "email"
              ]
            }
          },
          {
            "name": "channel_sources",
            "in": "query",
            "description": "The channel's source. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel. \n* `facebook_messenger` - Only applies to messaging channel. \n* `whatsapp` - Only applies to messaging channel. \n* `email_address` - Only applies to email channel. \n\nProvide multiple channel_sources",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "web_chat,in_app_chat",
                "enum": [
                  "web_chat",
                  "in_app_chat",
                  "sms",
                  "facebook_messenger",
                  "whatsapp",
                  "email_address"
                ]
              }
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The historical queue report's interval.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1_month",
              "enum": [
                "15_minutes",
                "30_minutes",
                "1_hour",
                "1_day",
                "1_week",
                "1_month"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Historical queue reports list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through large result sets. A next page token returns whenever the set of available results exceeds the current page size.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 100,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 10
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The call's [timezone ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). The default is **UTC**.",
                      "example": "America/Los_Angeles"
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
                      "format": "date-time",
                      "example": "2021-12-10T00:00:00Z"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
                      "format": "date-time",
                      "example": "2021-12-10T00:15:00Z"
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the queue reports.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's ID.",
                            "example": "Ql3qxUWXSHes4PmcOmzyOg",
                            "deprecated": true
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "Ql3qxUWXSHes4PmcOmzyOg"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "agentQueue"
                          },
                          "total_inbound": {
                            "type": "integer",
                            "description": "The total number of incoming voice or video calls, chats, or SMS engagements.",
                            "format": "int64",
                            "example": 1
                          },
                          "total_completed": {
                            "type": "integer",
                            "description": "The total number of completed voice or video calls, chats, or SMS engagements.",
                            "format": "int64",
                            "example": 1
                          },
                          "total_transferred_in": {
                            "type": "integer",
                            "description": "The total number of transferred-in calls.",
                            "format": "int64",
                            "example": 1
                          },
                          "total_transferred_out": {
                            "type": "integer",
                            "description": "The total number of transferred-out calls.",
                            "format": "int64",
                            "example": 1
                          },
                          "voice": {
                            "type": "object",
                            "properties": {
                              "service_level": {
                                "type": "number",
                                "description": "The queue's service level.",
                                "format": "double",
                                "example": 0.85
                              },
                              "short_abandoned": {
                                "type": "integer",
                                "description": "The total number of short-duration abandoned voice calls, where the talking duration is less than the user-specified threshold value.",
                                "format": "int64",
                                "example": 1
                              },
                              "long_abandoned": {
                                "type": "integer",
                                "description": "The total number of long-duration abandoned voice calls, where the talking duration is greater than the user-specified threshold value.",
                                "format": "int64",
                                "example": 1
                              },
                              "hold_abandoned": {
                                "type": "integer",
                                "description": "The total number of on-hold abandoned voice calls, where the agent placed the call on hold and then the customer abandoned the call.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_missed": {
                                "type": "integer",
                                "description": "The total number of missed voice calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_overflowed": {
                                "type": "integer",
                                "description": "The total number of overflowed voice calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_video_call": {
                                "type": "integer",
                                "description": "The total number of upgrade-to-video voice calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "inbound_average_waiting_duration": {
                                "type": "number",
                                "description": "The average waiting voice call or SMS engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_waiting_duration": {
                                "type": "number",
                                "description": "The shortest waiting voice call or SMS engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_waiting_duration": {
                                "type": "number",
                                "description": "The longest waiting voice call or SMS engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_talking_duration": {
                                "type": "number",
                                "description": "The average voice call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_talking_duration": {
                                "type": "number",
                                "description": "The longest voice call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_talking_duration": {
                                "type": "number",
                                "description": "The shortest voice call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_wrap_up_duration": {
                                "type": "number",
                                "description": "The average wrap-up voice call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_wrap_up_duration": {
                                "type": "number",
                                "description": "The longest wrap-up voice call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_wrap_up_duration": {
                                "type": "number",
                                "description": "The shortest wrap-up voice call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "total_outbound": {
                                "type": "integer",
                                "description": "The total number of outbound voice calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "hangup_outbound": {
                                "type": "integer",
                                "description": "The total number of hang-up outbound calls, where the talking duration is less than the threshold value specified for hang-up calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "short_outbound": {
                                "type": "integer",
                                "description": "The total number of short outbound calls, where the talking duration is between the threshold values specified for hang-up calls and long outbound calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "long_outbound": {
                                "type": "integer",
                                "description": "The total number of long outbound calls, where the talking duration is greater than the threshold value specified for long outbound calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "start_time_interval": {
                                "type": "string",
                                "description": "The current interval's start date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`. Returned for voice channels with a provided interval.",
                                "example": "2022-07-20T14:00:00-08:00"
                              },
                              "end_time_interval": {
                                "type": "string",
                                "description": "The current interval's end date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`. Returned for voice channels with a provided interval.",
                                "example": "2022-07-20T14:15:00-08:00"
                              },
                              "total_answered_users": {
                                "type": "integer",
                                "description": "The total number of agent-answered voice calls. Returned for voice channels with a provided interval.",
                                "format": "int64",
                                "example": 3
                              },
                              "total_answer_duration": {
                                "type": "number",
                                "description": "The total voice call duration, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 50
                              },
                              "total_hold_duration": {
                                "type": "number",
                                "description": "The total voice call hold duration, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 3
                              },
                              "total_wrap_up_duration": {
                                "type": "number",
                                "description": "The total wrap-up voice call duration, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 78
                              },
                              "total_queue_wait_duration": {
                                "type": "number",
                                "description": "The total voice-call queue wait duration, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 56
                              },
                              "total_abandoned_duration": {
                                "type": "number",
                                "description": "The total duration of abandoned voice calls, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_answer_duration": {
                                "type": "number",
                                "description": "The total outbound voice call duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_hold_duration": {
                                "type": "number",
                                "description": "The total outbound voice call hold duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The total outbound wrap-up voice call duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 78
                              },
                              "average_outbound_answer_duration": {
                                "type": "number",
                                "description": "The average outbound voice call duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "average_outbound_hold_duration": {
                                "type": "number",
                                "description": "The average outbound voice call hold duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "average_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The average outbound wrap-up voice call duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 78
                              }
                            },
                            "description": "Information about the voice metrics."
                          },
                          "sms": {
                            "type": "object",
                            "properties": {
                              "start_time_interval": {
                                "type": "string",
                                "description": "The current interval's start date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                                "example": "2022-07-20T14:00:00-08:00"
                              },
                              "end_time_interval": {
                                "type": "string",
                                "description": "The current interval's end date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                                "example": "2022-07-20T14:15:00-08:00"
                              },
                              "total_sent": {
                                "type": "integer",
                                "description": "The total number of sent messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_sent": {
                                "type": "number",
                                "description": "The average sent SMS messages.",
                                "format": "double",
                                "example": 0.85
                              },
                              "total_auto_closed": {
                                "type": "integer",
                                "description": "The total number of auto-closed SMS engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_released": {
                                "type": "integer",
                                "description": "The total number of released SMS engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_abandoned": {
                                "type": "integer",
                                "description": "The total number of abandoned quit SMS engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_overflowed": {
                                "type": "integer",
                                "description": "The total number of overflowed SMS engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_voice_call": {
                                "type": "integer",
                                "description": "The total number of upgrade-to-voice SMS engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_video_call": {
                                "type": "integer",
                                "description": "The total number of upgrade-to-video SMS engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "inbound_average_waiting_duration": {
                                "type": "number",
                                "description": "The average waiting voice call or SMS engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_waiting_duration": {
                                "type": "number",
                                "description": "The shortest waiting voice call or SMS engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_waiting_duration": {
                                "type": "number",
                                "description": "The longest waiting voice call or SMS engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_messaging_duration": {
                                "type": "number",
                                "description": "The average SMS engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_messaging_duration": {
                                "type": "number",
                                "description": "The longest SMS engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_messaging_duration": {
                                "type": "number",
                                "description": "The shortest SMS engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_agent_first_message_speed": {
                                "type": "number",
                                "description": "The average agent first message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The shortest agent first message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The longest agent first message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "total_outbound": {
                                "type": "integer",
                                "description": "The total number of outbound SMS engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_outbound_answer_duration": {
                                "type": "number",
                                "description": "The total SMS outbound duration, in seconds.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The total SMS outbound wrap-up duration, in seconds.",
                                "format": "double",
                                "example": 78
                              },
                              "average_outbound_answer_duration": {
                                "type": "number",
                                "description": "The average SMS outbound duration, in seconds.",
                                "format": "double",
                                "example": 8
                              },
                              "average_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The average SMS outbound wrap-up duration, in seconds.",
                                "format": "double",
                                "example": 78
                              }
                            },
                            "description": "Information about the SMS metrics.",
                            "deprecated": true
                          },
                          "chat": {
                            "type": "object",
                            "properties": {
                              "start_time_interval": {
                                "type": "string",
                                "description": "The current interval's start date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                                "example": "2022-07-20T14:00:00-08:00"
                              },
                              "end_time_interval": {
                                "type": "string",
                                "description": "The current interval's end date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                                "example": "2022-07-20T14:15:00-08:00"
                              },
                              "service_level": {
                                "type": "number",
                                "description": "The queue's service level.",
                                "format": "double",
                                "example": 0.85
                              },
                              "total_sent": {
                                "type": "integer",
                                "description": "The total number of sent chats.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_sent": {
                                "type": "number",
                                "description": "The average sent chats.",
                                "format": "double",
                                "example": 0.85
                              },
                              "total_abandoned": {
                                "type": "integer",
                                "description": "The total number of abandoned chats.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_auto_closed": {
                                "type": "integer",
                                "description": "The total number of auto-closed chats.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_released": {
                                "type": "integer",
                                "description": "The total number of released chats.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_voice_call": {
                                "type": "integer",
                                "description": "The total number of upgrade-to-voice chats.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_video_call": {
                                "type": "integer",
                                "description": "The total number of upgrade-to-video chats.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_waiting_duration": {
                                "type": "number",
                                "description": "The average waiting video call or chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_waiting_duration": {
                                "type": "number",
                                "description": "The shortest waiting video call or chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_waiting_duration": {
                                "type": "number",
                                "description": "The longest waiting video call or chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_messaging_duration": {
                                "type": "number",
                                "description": "The average chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_messaging_duration": {
                                "type": "number",
                                "description": "The longest chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_messaging_duration": {
                                "type": "number",
                                "description": "The shortest chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_agent_first_message_speed": {
                                "type": "number",
                                "description": "The average agent first message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The shortest agent first message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The longest agent first message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              }
                            },
                            "description": "Information about the chat metrics.",
                            "deprecated": true
                          },
                          "video": {
                            "type": "object",
                            "properties": {
                              "start_time_interval": {
                                "type": "string",
                                "description": "The current interval's start date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                                "example": "2022-07-20T14:00:00-08:00"
                              },
                              "end_time_interval": {
                                "type": "string",
                                "description": "The current interval's end date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                                "example": "2022-07-20T14:15:00-08:00"
                              },
                              "service_level": {
                                "type": "number",
                                "description": "The queue's service level.",
                                "format": "double",
                                "example": 0.85
                              },
                              "short_abandoned": {
                                "type": "integer",
                                "description": "The total number of short-duration abandoned video calls, where the talking duration is less than the user-specified threshold value.",
                                "format": "int64",
                                "example": 1
                              },
                              "long_abandoned": {
                                "type": "integer",
                                "description": "The total number of long-duration abandoned video calls, where the talking duration is greater than the user-specified threshold value.",
                                "format": "int64",
                                "example": 1
                              },
                              "hold_abandoned": {
                                "type": "integer",
                                "description": "The total number of on-hold abandoned video calls, where the agent placed the call on hold and then the customer abandoned the call.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_missed": {
                                "type": "integer",
                                "description": "The total number of missed video calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_overflowed": {
                                "type": "integer",
                                "description": "The total number of overflowed video calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_waiting_duration": {
                                "type": "number",
                                "description": "The average waiting video call or chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_waiting_duration": {
                                "type": "number",
                                "description": "The shortest waiting video call or chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_waiting_duration": {
                                "type": "number",
                                "description": "The longest waiting video call or chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_talking_duration": {
                                "type": "number",
                                "description": "The average video call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_talking_duration": {
                                "type": "number",
                                "description": "The longest video call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_talking_duration": {
                                "type": "number",
                                "description": "The shortest video call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_wrap_up_duration": {
                                "type": "number",
                                "description": "The longest wrap-up video call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_wrap_up_duration": {
                                "type": "number",
                                "description": "The longest wrap-up video call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_wrap_up_duration": {
                                "type": "number",
                                "description": "The shortest wrap-up video call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              }
                            },
                            "description": "Information about the video metrics."
                          },
                          "messaging": {
                            "type": "object",
                            "properties": {
                              "channel_sources": {
                                "type": "array",
                                "description": "The channel's source. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel.\n* `facebook_messenger` - Only applies to messaging channel.\n* `whatsapp` - Only applies to messaging channel.",
                                "items": {
                                  "type": "string",
                                  "example": "web_chat,in_app_chat",
                                  "enum": [
                                    "web_chat",
                                    "in_app_chat",
                                    "sms",
                                    "facebook_messenger",
                                    "whatsapp"
                                  ]
                                }
                              },
                              "start_time_interval": {
                                "type": "string",
                                "description": "The current interval's start date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                                "example": "2022-07-20T14:00:00-08:00"
                              },
                              "end_time_interval": {
                                "type": "string",
                                "description": "The current interval's end date and time in ISO 8601 format, either yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss`TZD`.",
                                "example": "2022-07-20T14:15:00-08:00"
                              },
                              "service_level": {
                                "type": "number",
                                "description": "The queue's service level.",
                                "format": "double",
                                "example": 0.85
                              },
                              "total_sent": {
                                "type": "integer",
                                "description": "The total number of sent messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_sent": {
                                "type": "number",
                                "description": "The average sent messaging(web_chat/in_app_chat/sms) messages.",
                                "format": "double",
                                "example": 0.85
                              },
                              "total_auto_closed": {
                                "type": "integer",
                                "description": "The total number of auto-closed messaging(web_chat/in_app_chat/sms) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_released": {
                                "type": "integer",
                                "description": "The total number of released messaging(web_chat/in_app_chat/sms) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_abandoned": {
                                "type": "integer",
                                "description": "The total number of abandoned quit messaging(web_chat/in_app_chat/sms) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_overflowed": {
                                "type": "integer",
                                "description": "The total number of overflowed messaging(web_chat/in_app_chat/sms) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_voice_call": {
                                "type": "integer",
                                "description": "The total number of upgrade-to-voice messaging(web_chat/in_app_chat/sms) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_video_call": {
                                "type": "integer",
                                "description": "The total number of upgrade-to-video messaging(web_chat/in_app_chat/sms) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "inbound_average_waiting_duration": {
                                "type": "number",
                                "description": "The average waiting voice call or messaging(web_chat/in_app_chat/sms) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_waiting_duration": {
                                "type": "number",
                                "description": "The shortest waiting voice call or messaging(web_chat/in_app_chat/sms) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_waiting_duration": {
                                "type": "number",
                                "description": "The longest waiting voice call or messaging(web_chat/in_app_chat/sms) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_messaging_duration": {
                                "type": "number",
                                "description": "The average messaging(web_chat/in_app_chat/sms) engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_messaging_duration": {
                                "type": "number",
                                "description": "The longest messaging(web_chat/in_app_chat/sms) engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_messaging_duration": {
                                "type": "number",
                                "description": "The shortest messaging(web_chat/in_app_chat/sms) engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_agent_first_message_speed": {
                                "type": "number",
                                "description": "The average agent first message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The shortest agent first message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The longest agent first message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "total_outbound": {
                                "type": "integer",
                                "description": "The total number of outbound messaging(sms) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_outbound_answer_duration": {
                                "type": "number",
                                "description": "The total messaging(sms) outbound duration, in seconds.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The total messaging(sms) outbound wrap-up duration, in seconds.",
                                "format": "double",
                                "example": 78
                              },
                              "average_outbound_answer_duration": {
                                "type": "number",
                                "description": "The average messaging(sms) outbound duration, in seconds.",
                                "format": "double",
                                "example": 8
                              },
                              "average_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The average messaging(sms) outbound wrap-up duration, in seconds.",
                                "format": "double",
                                "example": 78
                              }
                            },
                            "description": "The information about the messaging(web_chat/in_app_chat/sms) metrics."
                          },
                          "email": {
                            "type": "object",
                            "properties": {
                              "channel_sources": {
                                "type": "array",
                                "description": "The channel's source. \n* `email_address` - Only applies to email channel.",
                                "items": {
                                  "type": "string",
                                  "example": "email_address",
                                  "enum": [
                                    "email_address"
                                  ]
                                }
                              },
                              "start_time_interval": {
                                "type": "string",
                                "description": "The current interval's start date and time in ISO 8601 format, either `yyyy-MM-dd'T'HH:mm:ss'Z'` or `yyyy-MM-dd'T'HH:mm:ss'TZD'`.",
                                "example": "2022-07-20T14:00:00-08:00"
                              },
                              "end_time_interval": {
                                "type": "string",
                                "description": "The current interval's end date and time in ISO 8601 format, either `yyyy-MM-dd'T'HH:mm:ss'Z'` or `yyyy-MM-dd'T'HH:mm:ss'TZD'`.",
                                "example": "2022-07-20T14:15:00-08:00"
                              },
                              "service_level": {
                                "type": "number",
                                "description": "The queue's service level.",
                                "format": "double",
                                "example": 0.85
                              },
                              "total_overflowed": {
                                "type": "integer",
                                "description": "The total number of overflowed email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_auto_closed": {
                                "type": "integer",
                                "description": "The total number of auto-closed email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offered": {
                                "type": "integer",
                                "description": "The total number of offered email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_released": {
                                "type": "integer",
                                "description": "The total number of released email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers": {
                                "type": "integer",
                                "description": "The total number of offers email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_acd": {
                                "type": "integer",
                                "description": "The total number of offers ACD email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_non_acd": {
                                "type": "integer",
                                "description": "The total number of offers non-ACD email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_answered": {
                                "type": "integer",
                                "description": "The total number of offers answered email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_missed": {
                                "type": "integer",
                                "description": "The total number of offers missed email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_declined": {
                                "type": "integer",
                                "description": "The total number of offers declined email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_handled": {
                                "type": "integer",
                                "description": "The total number of handled email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_transferred_out_within_queue": {
                                "type": "integer",
                                "description": "The total number of transferred-out within queue email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_transferred_out_of_queue": {
                                "type": "integer",
                                "description": "The total number of transferred-out of queue email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_transferred_in_to_agent": {
                                "type": "integer",
                                "description": "The total number of transferred-in to agent email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_transferred_in_to_queue": {
                                "type": "integer",
                                "description": "The total number of transferred-in to queue email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "inbound_average_waiting_duration": {
                                "type": "number",
                                "description": "The average waiting email (`email_address`) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_waiting_duration": {
                                "type": "number",
                                "description": "The shortest waiting email (`email_address`) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_waiting_duration": {
                                "type": "number",
                                "description": "The longest waiting email (`email_address`) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_messaging_duration": {
                                "type": "number",
                                "description": "The average email (`email_address`) engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_messaging_duration": {
                                "type": "number",
                                "description": "The longest email (`email_address`) engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_messaging_duration": {
                                "type": "number",
                                "description": "The shortest email (`email_address`) engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_agent_first_reply_duration": {
                                "type": "number",
                                "description": "The average reply duration of the first agent in email (`email_address`) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_agent_first_reply_duration": {
                                "type": "number",
                                "description": "The longest reply duration of the first agent in email (`email_address`) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_agent_first_reply_duration": {
                                "type": "number",
                                "description": "The shortest reply duration of the first agent in email (`email_address`) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_agent_reply_duration": {
                                "type": "number",
                                "description": "The average reply duration of email (`email_address`) engagement agents, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_agent_reply_duration": {
                                "type": "number",
                                "description": "The longest reply duration of email (`email_address`) engagement agents, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_agent_reply_duration": {
                                "type": "number",
                                "description": "The shortest reply duration of email (`email_address`) engagement agents, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_inactive_duration": {
                                "type": "number",
                                "description": "The average inactive duration in email (`email_address`) engagement, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_inactive_duration": {
                                "type": "number",
                                "description": "The longest inactive duration in email (`email_address`) engagement, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_inactive_duration": {
                                "type": "number",
                                "description": "The shortest inactive duration in email (`email_address`) engagement, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              }
                            },
                            "description": "The information about the email (`email_address`) metrics."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_report:read:admin",
              "contact_center:read:queue_report:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_report:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:queue_report:admin"
          ]
        }
      }
    },
    "/contact_center/analytics/historical/queues/{queueId}/agents/metrics": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List historical queue's agents reports",
        "description": "Generate a list of a historical queue's agent reports.  \n\n**Scopes:** `contact_center_report:read:admin`\n\n**Granular Scopes:** `contact_center:read:agent_report:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "listQueueAgentMetric",
        "parameters": [
          {
            "name": "queueId",
            "in": "path",
            "description": "Supports both the routing queue ID and the Contact Center queue ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W_VATTk_Q5aW6z5rZtBxAQ"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "example": 10,
              "default": 10
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "The call's timezone. The default is **UTC**.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Asia/Shanghai"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameters is specified. The end time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "channel_types",
            "in": "query",
            "description": "The channel's type. Provide only a single channel type.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "voice",
                "enum": [
                  "voice",
                  "video",
                  "chat",
                  "sms"
                ]
              }
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The task's channel. \n* `voice` \n* `video` \n* `messaging` \n* `email` \n\nProvides only a single channel. \n\nIf channel is used as an input parameter, the deprecated parameter `channel_types` will not be processed.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "messaging",
              "enum": [
                "voice",
                "video",
                "messaging",
                "email"
              ]
            }
          },
          {
            "name": "channel_sources",
            "in": "query",
            "description": "The channel's source. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel. \n* `facebook_messenger` - Only applies to messaging channel. \n* `whatsapp` - Only applies to messaging channel. \n* `email_address` - Only applies to email channel. \n\nProvide multiple channel_sources",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "web_chat,in_app_chat",
                "enum": [
                  "web_chat",
                  "in_app_chat",
                  "sms",
                  "facebook_messenger",
                  "whatsapp",
                  "email_address"
                ]
              }
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The historical queue report's interval.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1_month",
              "enum": [
                "15_minutes",
                "30_minutes",
                "1_hour",
                "1_day",
                "1_week",
                "1_month"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \n Historical queue&rsquo;s agents report list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 100,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 10
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The call's [timezone ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). The default is **UTC**.",
                      "example": "America/Los_Angeles"
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
                      "format": "date-time",
                      "example": "2021-12-10T00:00:00Z"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.",
                      "format": "date-time",
                      "example": "2021-12-10T00:15:00Z"
                    },
                    "agents": {
                      "type": "array",
                      "description": "Information about the queue&rsquo;s agents.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The agent's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The agent's name.",
                            "example": "Jilly"
                          },
                          "total_inbound": {
                            "type": "integer",
                            "description": "The total number of incoming voice calls, video calls, chats, or SMS engagements.",
                            "format": "int64",
                            "example": 1
                          },
                          "total_completed": {
                            "type": "integer",
                            "description": "The total number of completed voice calls, video calls, chats, or SMS engagements.",
                            "format": "int64",
                            "example": 1
                          },
                          "total_transferred_in": {
                            "type": "integer",
                            "description": "The total number of transferred-in voice calls, video calls, chats, or SMS engagements.",
                            "format": "int64",
                            "example": 1
                          },
                          "total_transferred_out": {
                            "type": "integer",
                            "description": "The total number of transferred-out voice calls, video calls, chats, or SMS engagements.",
                            "format": "int64",
                            "example": 1
                          },
                          "voice": {
                            "type": "object",
                            "properties": {
                              "upgraded_to_video_call": {
                                "type": "integer",
                                "description": "The total number of voice calls, chats or SMS engagements that are upgraded to video calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_declined": {
                                "type": "integer",
                                "description": "The total number of declined voice calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_missed": {
                                "type": "integer",
                                "description": "The total number of missed voice calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "inbound_average_talking_duration": {
                                "type": "number",
                                "description": "The average voice call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_talking_duration": {
                                "type": "number",
                                "description": "The longest voice call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_talking_duration": {
                                "type": "number",
                                "description": "The shortest voice call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_wrap_up_duration": {
                                "type": "number",
                                "description": "The average wrap-up voice or video call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_wrap_up_duration": {
                                "type": "number",
                                "description": "The longest wrap-up voice or video call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_wrap_up_duration": {
                                "type": "number",
                                "description": "The shortest wrap-up voice or video call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "total_outbound": {
                                "type": "integer",
                                "description": "The total number of outbound voice calls, video calls, chats, or SMS engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "hangup_outbound": {
                                "type": "integer",
                                "description": "The total number of hang-up outbound calls, where the talking duration is less than the threshold value specified for hang-up calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "short_outbound": {
                                "type": "integer",
                                "description": "The total number of short outbound calls, where the talking duration is between the threshold values specified for hang-up calls and long outbound calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "long_outbound": {
                                "type": "integer",
                                "description": "The total number of long outbound calls, where the talking duration is greater than the threshold value specified for long outbound calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "start_time_interval": {
                                "type": "string",
                                "description": "The current interval's start date and time in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss&rsquo;TZD&rsquo;). Returned for voice channels with a provided interval.",
                                "example": "2022-07-20T14:00:00-08:00"
                              },
                              "end_time_interval": {
                                "type": "string",
                                "description": "The current interval's end date and time in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss&rsquo;TZD&rsquo;). Returned for voice channels with a provided interval.",
                                "example": "022-07-20T14:15:00-08:00"
                              },
                              "total_answered_users": {
                                "type": "integer",
                                "description": "The total number of agent-answered calls. Returned for voice channels with a provided interval.",
                                "format": "int64",
                                "example": 3
                              },
                              "total_answer_duration": {
                                "type": "number",
                                "description": "The total call duration, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 50
                              },
                              "total_hold_duration": {
                                "type": "number",
                                "description": "The total call hold duration, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 3
                              },
                              "total_wrap_up_duration": {
                                "type": "number",
                                "description": "The total wrap-up call duration, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 78
                              },
                              "total_queue_wait_duration": {
                                "type": "number",
                                "description": "The total queue wait duration, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 56
                              },
                              "total_abandoned_duration": {
                                "type": "number",
                                "description": "The total duration of abandoned calls, in seconds. Returned for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_answer_duration": {
                                "type": "number",
                                "description": "The total outbound voice call duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_hold_duration": {
                                "type": "number",
                                "description": "The total outbound voice call hold duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The total outbound wrap-up voice call duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 78
                              },
                              "average_outbound_answer_duration": {
                                "type": "number",
                                "description": "The average outbound voice call duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "average_outbound_hold_duration": {
                                "type": "number",
                                "description": "The average outbound voice call hold duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 8
                              },
                              "average_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The average outbound wrap-up voice call duration, in seconds. It returns for voice channels with a provided interval.",
                                "format": "double",
                                "example": 78
                              }
                            }
                          },
                          "video": {
                            "type": "object",
                            "properties": {
                              "total_declined": {
                                "type": "integer",
                                "description": "The total number of declined video calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_missed": {
                                "type": "integer",
                                "description": "The total number of missed video calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_talking_duration": {
                                "type": "number",
                                "description": "The average video call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_talking_duration": {
                                "type": "number",
                                "description": "The longest video call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_talking_duration": {
                                "type": "number",
                                "description": "The shortest video call duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_wrap_up_duration": {
                                "type": "number",
                                "description": "The average wrap-up video call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_wrap_up_duration": {
                                "type": "number",
                                "description": "The longest wrap-up video call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_wrap_up_duration": {
                                "type": "number",
                                "description": "The shortest wrap-up video call, in seconds.",
                                "format": "double",
                                "example": 11.8
                              }
                            }
                          },
                          "chat": {
                            "type": "object",
                            "properties": {
                              "total_sent": {
                                "type": "integer",
                                "description": "The total number of sent chat messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_sent": {
                                "type": "number",
                                "description": "The average number of sent chat messages.",
                                "format": "double",
                                "example": 11.8
                              },
                              "total_abandoned": {
                                "type": "integer",
                                "description": "The total number of abandoned chat messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_auto_closed": {
                                "type": "integer",
                                "description": "The total number of auto-closed chat messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_released": {
                                "type": "integer",
                                "description": "The total number of released chat messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_overflowed": {
                                "type": "integer",
                                "description": "The total number of overflowed chat messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_voice_call": {
                                "type": "integer",
                                "description": "The total number of chats that are upgraded to voice calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_video_call": {
                                "type": "integer",
                                "description": "The total number of chats that are upgraded to video calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_messaging_duration": {
                                "type": "number",
                                "description": "The average chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_messaging_duration": {
                                "type": "number",
                                "description": "The longest chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_messaging_duration": {
                                "type": "number",
                                "description": "The shortest chat duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_waiting_duration": {
                                "type": "number",
                                "description": "The average chat waiting duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_waiting_duration": {
                                "type": "number",
                                "description": "The shortest chat waiting duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_waiting_duration": {
                                "type": "number",
                                "description": "The longest chat waiting duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_agent_first_message_speed": {
                                "type": "number",
                                "description": "The shortest agent first chat message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The shortest agent first chat message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The longest agent first chat message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              }
                            },
                            "deprecated": true
                          },
                          "sms": {
                            "type": "object",
                            "properties": {
                              "total_sent": {
                                "type": "integer",
                                "description": "The total number of sent SMS messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_sent": {
                                "type": "number",
                                "description": "The average number of sent SMS messages.",
                                "format": "double",
                                "example": 11.8
                              },
                              "total_abandoned": {
                                "type": "integer",
                                "description": "The total number of abandoned SMS messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_auto_closed": {
                                "type": "integer",
                                "description": "The total number of auto-closed SMS messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_released": {
                                "type": "integer",
                                "description": "The total number of released SMS messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_overflowed": {
                                "type": "integer",
                                "description": "The total number of overflowed SMS messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_voice_call": {
                                "type": "integer",
                                "description": "The total number of SMS engagements that are upgraded to voice calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_video_call": {
                                "type": "integer",
                                "description": "The total number of SMS engagements that are upgraded to video calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "inbound_average_messaging_duration": {
                                "type": "number",
                                "description": "The average sms messaging duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_messaging_duration": {
                                "type": "number",
                                "description": "The longest sms messaging duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_messaging_duration": {
                                "type": "number",
                                "description": "The shortest sms messaging duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_waiting_duration": {
                                "type": "number",
                                "description": "The average sms waiting duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_waiting_duration": {
                                "type": "number",
                                "description": "The shortest sms waiting duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_waiting_duration": {
                                "type": "number",
                                "description": "The longest sms waiting duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_agent_first_message_speed": {
                                "type": "number",
                                "description": "The shortest agent first sms message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The shortest agent first sms message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The longest agent first sms message speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "total_outbound": {
                                "type": "integer",
                                "description": "The total number of outbound sms engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_outbound_answer_duration": {
                                "type": "number",
                                "description": "The total SMS outbound duration, in seconds.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The total SMS outbound wrap-up duration, in seconds.",
                                "format": "double",
                                "example": 78
                              },
                              "average_outbound_answer_duration": {
                                "type": "number",
                                "description": "The average SMS outbound duration, in seconds.",
                                "format": "double",
                                "example": 8
                              },
                              "average_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The average SMS outbound wrap-up duration, in seconds.",
                                "format": "double",
                                "example": 78
                              }
                            },
                            "deprecated": true
                          },
                          "messaging": {
                            "type": "object",
                            "properties": {
                              "channel_sources": {
                                "type": "array",
                                "description": "The channel's source. \n* `in_app_chat` - Only applies to messaging channel.  \n* `web_chat` - Only applies to messaging channel. \n* `sms` - Only applies to messaging channel.\n* `facebook_messenger` - Only applies to messaging channel.\n* `whatsapp` - Only applies to messaging channel.",
                                "items": {
                                  "type": "string",
                                  "example": "web_chat,in_app_chat",
                                  "enum": [
                                    "web_chat",
                                    "in_app_chat",
                                    "sms",
                                    "facebook_messenger",
                                    "whatsapp"
                                  ]
                                }
                              },
                              "total_sent": {
                                "type": "integer",
                                "description": "The total number of sent messaging(web_chat/in_app_chat/sms) messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "average_sent": {
                                "type": "number",
                                "description": "The average number of sent messaging(web_chat/in_app_chat/sms) messages.",
                                "format": "double",
                                "example": 11.8
                              },
                              "total_abandoned": {
                                "type": "integer",
                                "description": "The total number of abandoned messaging(web_chat/in_app_chat/sms) messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_auto_closed": {
                                "type": "integer",
                                "description": "The total number of auto-closed messaging(web_chat/in_app_chat/sms) messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_released": {
                                "type": "integer",
                                "description": "The total number of released messaging(web_chat/in_app_chat/sms) messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_overflowed": {
                                "type": "integer",
                                "description": "The total number of overflowed messaging(web_chat/in_app_chat/sms) messages.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_voice_call": {
                                "type": "integer",
                                "description": "The total number of messaging(web_chat/in_app_chat/sms) engagements that are upgraded to voice calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "upgraded_to_video_call": {
                                "type": "integer",
                                "description": "The total number of messaging(web_chat/in_app_chat/sms) engagements that are upgraded to video calls.",
                                "format": "int64",
                                "example": 1
                              },
                              "inbound_average_messaging_duration": {
                                "type": "number",
                                "description": "The average messaging(web_chat/in_app_chat/sms) message duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_messaging_duration": {
                                "type": "number",
                                "description": "The longest messaging(web_chat/in_app_chat/sms) message duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_messaging_duration": {
                                "type": "number",
                                "description": "The shortest messaging(web_chat/in_app_chat/sms) message duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_waiting_duration": {
                                "type": "number",
                                "description": "The average messaging(web_chat/in_app_chat/sms) waiting duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_waiting_duration": {
                                "type": "number",
                                "description": "The shortest messaging(web_chat/in_app_chat/sms) waiting duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_waiting_duration": {
                                "type": "number",
                                "description": "The longest messaging(web_chat/in_app_chat/sms) waiting duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "average_agent_first_message_speed": {
                                "type": "number",
                                "description": "The shortest agent of the first messaging(web_chat/in_app_chat/sms) message's speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "shortest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The shortest agent of the first messaging(web_chat/in_app_chat/sms) message's speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "longest_agent_first_message_speed": {
                                "type": "number",
                                "description": "The longest agent of the first messaging(web_chat/in_app_chat/sms) message's speed, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "total_outbound": {
                                "type": "integer",
                                "description": "The total number of outbound messaging(SMS) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_outbound_answer_duration": {
                                "type": "number",
                                "description": "The total messaging(SMS) outbound duration, in seconds.",
                                "format": "double",
                                "example": 8
                              },
                              "total_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The total messaging(SMS) outbound wrap-up duration, in seconds.",
                                "format": "double",
                                "example": 78
                              },
                              "average_outbound_answer_duration": {
                                "type": "number",
                                "description": "The average messaging(SMS) outbound duration, in seconds.",
                                "format": "double",
                                "example": 8
                              },
                              "average_outbound_wrap_up_duration": {
                                "type": "number",
                                "description": "The average messaging (SMS) outbound wrap-up duration, in seconds.",
                                "format": "double",
                                "example": 78
                              }
                            }
                          },
                          "email": {
                            "type": "object",
                            "properties": {
                              "channel_sources": {
                                "type": "array",
                                "description": "The channel's source. \n* `email_address` - Only applies to email channel.",
                                "items": {
                                  "type": "string",
                                  "example": "email_address",
                                  "enum": [
                                    "email_address"
                                  ]
                                }
                              },
                              "total_offers": {
                                "type": "integer",
                                "description": "The total number of offers' email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_acd": {
                                "type": "integer",
                                "description": "The total number of offers ACD email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_non_acd": {
                                "type": "integer",
                                "description": "The total number of offers non-ACD email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_answered": {
                                "type": "integer",
                                "description": "The total number of offers-answered email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_missed": {
                                "type": "integer",
                                "description": "The total number of offers-missed email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_offers_declined": {
                                "type": "integer",
                                "description": "The total number of offers-declined email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_auto_closed": {
                                "type": "integer",
                                "description": "The total number of auto-closed email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_transferred_out_within_queue": {
                                "type": "integer",
                                "description": "The total number of transferred-out-within-queue email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_transferred_out_of_queue": {
                                "type": "integer",
                                "description": "The total number of transferred-out-of-queue email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_transferred_in_within_queue": {
                                "type": "integer",
                                "description": "The total number of transferred-in-within-queue email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "total_transferred_in_outside_queue": {
                                "type": "integer",
                                "description": "The total number of transferred-in-out-of-queue email (`email_address`) engagements.",
                                "format": "int64",
                                "example": 1
                              },
                              "inbound_average_messaging_duration": {
                                "type": "number",
                                "description": "The average email (`email_address`) engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_messaging_duration": {
                                "type": "number",
                                "description": "The longest email (`email_address`) engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_messaging_duration": {
                                "type": "number",
                                "description": "The shortest email (`email_address`) engagement duration, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_agent_first_reply_duration": {
                                "type": "number",
                                "description": "The average reply duration of the first-agent-in email (`email_address`) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_agent_first_reply_duration": {
                                "type": "number",
                                "description": "The longest reply duration of the first agent in email (`email_address`) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_agent_first_reply_duration": {
                                "type": "number",
                                "description": "The shortest reply duration of the first agent in email (`email_address`) engagement, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_agent_reply_duration": {
                                "type": "number",
                                "description": "The average reply duration of email (`email_address`) engagement agents, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_agent_reply_duration": {
                                "type": "number",
                                "description": "The longest reply duration of email (`email_address`) engagement agents, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_agent_reply_duration": {
                                "type": "number",
                                "description": "The shortest reply duration of email (`email_address`) engagement agents, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_average_inactive_duration": {
                                "type": "number",
                                "description": "The average inactive duration in email (`email_address`) engagement, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_longest_inactive_duration": {
                                "type": "number",
                                "description": "The longest inactive duration in email (`email_address`) engagement, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              },
                              "inbound_shortest_inactive_duration": {
                                "type": "number",
                                "description": "The shortest inactive duration in email (`email_address`) engagement, excluding the response duration of the first agent, in seconds.",
                                "format": "double",
                                "example": 11.8
                              }
                            }
                          }
                        },
                        "description": "Information about the queue report."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1201` <br>\n Queue does not exist: $queueId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_report:read:admin",
              "contact_center:read:agent_report:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_report:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:agent_report:admin"
          ]
        }
      }
    },
    "/contact_center/reports/operation_logs": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List operation logs",
        "description": "Retrieve the Zoom Contact Center management system operation logs report. \n\n The Zoom Contact Center management system operation logs report lets account owners and admins view monthly Zoom Contact Center related admin operation details.\n\n**Scopes:** `contact_center_operation_logs:read:admin`\n\n**Granular Scopes:** `contact_center:read:operation_logs:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "listOperationLogs",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in yyyy-mm-dd format. The date range defined by the `from` and `to` parameters should be a month, as the response only includes one month's worth of data at once. If unspecified, returns data within the 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2024-04-01"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when specifying the `from` parameter. The end time and date in **yyyy-mm-dd** format, the same format as the `from` parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2024-04-30"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter the response by the category of the action performed. By default, the value of this field is `all`, and the response includes a log of all operations for the defined period. To only include responses for a specific category type, provide a value for the category from [this table](https://developers.zoom.us/docs/api/rest/contact-center-api/contact-center-operation-categories/).",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Engagement"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter responses according to the type of operation performed. The value of this field is `all`, and the response includes a log of all operations for the defined period.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Add",
              "enum": [
                "Add",
                "Delete",
                "Update",
                "Operate",
                "Move",
                "Download",
                "Recover",
                "Import",
                "Export",
                "Unmask",
                "Subscribe",
                "Agree",
                "Generate",
                "Enable",
                "Disable",
                "Publish",
                "Unpublish",
                "Opt-Out",
                "SyncData",
                "Initizate",
                "Submit",
                "Restore"
              ]
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Filter responses according to `objectName` and operator. The default value is empty, which queries all data.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test_over_flow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nInbox messages returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "operation_logs": {
                      "type": "array",
                      "description": "The array of operation log objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "time": {
                            "type": "string",
                            "description": "The time when the operation was performed.",
                            "format": "date-time",
                            "example": "2024-04-25T07:51:30Z"
                          },
                          "operator": {
                            "type": "string",
                            "description": "The user who performed the operation.",
                            "example": "test@zoomtest.us"
                          },
                          "category": {
                            "type": "string",
                            "description": "The operation's category type.",
                            "example": "Account"
                          },
                          "object_name": {
                            "type": "string",
                            "description": "The operation's object name.",
                            "example": "test user"
                          },
                          "operation_log_id": {
                            "type": "string",
                            "description": "The operation's unique identifier.",
                            "example": "VD8z8Q4UT4yGWhpiGdk5bw"
                          },
                          "action": {
                            "type": "string",
                            "description": "The operation's action type.",
                            "example": "Create"
                          },
                          "operation_detail": {
                            "type": "string",
                            "description": "The operation details.",
                            "example": "Add Flows: [inbox-voicemail]"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_operation_logs:read:admin",
              "contact_center:read:operation_logs:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "lateMissedRelease-June2024",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_operation_logs:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:operation_logs:admin"
          ]
        }
      }
    },
    "/contact_center/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "List roles",
        "description": "Use this API to return a list of roles. \n\n \n\n**Scopes:** `contact_center_role:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_roles:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listRoles",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nRole list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "roles": {
                      "type": "array",
                      "description": "Information about user roles.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "role_id": {
                            "type": "string",
                            "description": "The role's ID.",
                            "example": "-7uu_aUQRL-zXybozrSBWw"
                          },
                          "role_name": {
                            "type": "string",
                            "description": "The role's name.",
                            "example": "Agent"
                          },
                          "role_description": {
                            "type": "string",
                            "description": "The role's description.",
                            "example": "Agent role."
                          },
                          "total_users": {
                            "type": "integer",
                            "description": "Number of users with the role.",
                            "example": 3
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of the user who last modified the role.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time at which the role was last modified.",
                            "format": "date-time",
                            "example": "2022-03-03T05:07:46Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_role:read:admin",
              "contact_center:read:list_roles:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_role:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_roles:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create a role",
        "description": "Use this API to create a new [role](https://support.zoom.us/hc/en-us/articles/4471054202253-Using-role-management). Admins can use the role management feature to control access to features and settings in the Zoom web portal. \n\n \n\n**Scopes:** `contact_center_role:write:admin`\n\n**Granular Scopes:** `contact_center:write:role:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "createRole",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role_name": {
                    "type": "string",
                    "description": "The user role's name.",
                    "example": "Agent"
                  },
                  "role_description": {
                    "type": "string",
                    "description": "The role's description.",
                    "example": "Agent role."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nRole created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "role_id": {
                      "type": "string",
                      "description": "The role's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "role_name": {
                      "type": "string",
                      "description": "The role's name.",
                      "example": "Agent"
                    },
                    "role_description": {
                      "type": "string",
                      "description": "The role's description.",
                      "example": "Agent role."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `2203` <br>\nThe role name already exists; please change to a new one.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_role:write:admin",
              "contact_center:write:role:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_role:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:role:admin"
          ]
        }
      }
    },
    "/contact_center/roles/{roleId}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a role",
        "description": "Use this API to get information about a role. \n\n \n\n**Scopes:** `contact_center_role:read:admin`\n\n**Granular Scopes:** `contact_center:read:role:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The role's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nRole returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "role_id": {
                      "type": "string",
                      "description": "The role's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "role_name": {
                      "type": "string",
                      "description": "The role's name.",
                      "example": "Agent"
                    },
                    "role_description": {
                      "type": "string",
                      "description": "The role's description.",
                      "example": "Agent role."
                    },
                    "total_users": {
                      "type": "integer",
                      "description": "Number of users with the role.",
                      "example": 3
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the role.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time at which the role was last modified.",
                      "format": "date-time",
                      "example": "2022-03-03T05:07:46Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nRole does not exist: $roleId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_role:read:admin",
              "contact_center:read:role:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_role:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:role:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete a role",
        "description": "Use this API to delete a role. \n\n \n\n**Scopes:** `contact_center_role:write:admin`\n\n**Granular Scopes:** `contact_center:delete:role:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The role's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "transfer_role_id",
            "in": "query",
            "description": "The transfer role's ID. If you deleted the role, you will need to reassign the users associated to this role to a different role.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "YjXzeo_S2DeV1QTrpA65Ms"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nRole deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `2102` <br>\nThe \"transfer_role_id\" field cannot be an empty value.\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nRole does not exist: $roleId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_role:write:admin",
              "contact_center:delete:role:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_role:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:role:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Roles"
        ],
        "summary": "Update a role",
        "description": "Use this API to update a role. \n\n \n\n**Scopes:** `contact_center_role:write:admin`\n\n**Granular Scopes:** `contact_center:update:role:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The role's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "description": "Role",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role_name": {
                    "type": "string",
                    "description": "The role's name.",
                    "example": "Agent"
                  },
                  "role_description": {
                    "type": "string",
                    "description": "The role's description. **Note:** The Admin, Agent, and Supervisor roles do not support modification.",
                    "example": "Agent role."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nRole updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `2203` <br>\nThe role name already exists; please change to a new one.\n\n**Error Code:** `2204` <br>\nAdministrator|Supervisor|Agent role name cannot be updated.\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1201` <br>\nRole does not exist: $roleId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_role:write:admin",
              "contact_center:update:role:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_role:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:role:admin"
          ]
        }
      }
    },
    "/contact_center/roles/{roleId}/users": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "List users of a role",
        "description": "Use this API to get information about the users assigned to a specific role. \n\n \n\n**Scopes:** `contact_center_role:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_role_users:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "getRoleUsers",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The role's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nRole users list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "users": {
                      "type": "array",
                      "description": "Information about the role's assigned users.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill Chill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "user@example.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_role:read:admin",
              "contact_center:read:list_role_users:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_role:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_role_users:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Assign a role",
        "description": "Use this API to assign users to a role. Roles have unique privileges that assigned users have access to. For example, an Administrator or Agent role. \n\n \n\n**Scopes:** `contact_center_role:write:admin`\n\n**Granular Scopes:** `contact_center:write:role_user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "assignRoleUsers",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The role's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_ids": {
                    "maxItems": 30,
                    "type": "array",
                    "description": "The users to assign to the role. The value can be email or user ID. This request supports a maximum of 30 users per call.",
                    "items": {
                      "type": "string",
                      "example": "ukAAkZKfROKMSw1bj_RDFQ"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nRole assigned to user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "description": "Information about the users.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill Chill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_role:write:admin",
              "contact_center:write:role_user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_role:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:role_user:admin"
          ]
        }
      }
    },
    "/contact_center/roles/{roleId}/users/{userId}": {
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Unassign a role",
        "description": "Use this API to unassign a user from a role. \n\n \n\n**Scopes:** `contact_center_role:write:admin`\n\n**Granular Scopes:** `contact_center:delete:role_user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteRoleUser",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The role's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The role user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "aFjYXoDE1_eB2zmSpj6R61"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nRole unassigned from user."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1201` <br>\n Role user does not exist: $userId <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_role:write:admin",
              "contact_center:delete:role_user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.12.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_role:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:role_user:admin"
          ]
        }
      }
    },
    "/contact_center/agent_routing_profiles/{agentRoutingProfileId}": {
      "get": {
        "tags": [
          "Routing Profiles"
        ],
        "summary": "Get an agent routing profile",
        "description": "Retrieve the agent routing profile. \n\n \n\n**Scopes:** `contact_center_routing_profile:read:admin`\n\n**Granular Scopes:** `contact_center:read:agent_routing_profile:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getAgentRoutingProfile",
        "parameters": [
          {
            "name": "agentRoutingProfileId",
            "in": "path",
            "description": "The agent routing profile's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "opbnmoDlo_eV1QmTpj63ghj"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nAgent routing profile returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "agent_routing_profile_id": {
                      "type": "string",
                      "description": "The agent routing profile's ID.",
                      "example": "fgjdkhgfieryt7465435kjhdkhg"
                    },
                    "agent_routing_profile_name": {
                      "type": "string",
                      "description": "The agent routing profile's name.",
                      "example": "My agent routing profile"
                    },
                    "agent_routing_profile_description": {
                      "type": "string",
                      "description": "The agent routing profile's description.",
                      "example": "Example routing profile description."
                    },
                    "wait_time_agent_in_seconds": {
                      "type": "integer",
                      "description": "Wait time for matched agent availability in seconds. Set the minimum time before making an agent who matches the profile available for the queue.",
                      "example": 10
                    },
                    "priorities": {
                      "type": "array",
                      "description": "The proficiency priority. The higher priority skill category - with proficiency based skills - takes precedence over those with lower priority. When comparing agents and all else is equal, the agent(s) with the higher proficiency in the higher prioritized skill category should be considered for assignment.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "priority_id": {
                            "type": "string",
                            "description": "The priority's ID.",
                            "example": "jyuhjknkjgfkjhh9453fjdlg"
                          },
                          "priority_order": {
                            "type": "integer",
                            "description": "**Note** This field's values are ordered and unique.  This is the proficiency priority. The higher priority skill category - proficiency based skills - will take precedence over those with lower priority. When comparing agents and all else is equal, the agent(s) with the higher proficiency in the higher prioritized skill category should be considered for assignment.",
                            "example": 1
                          },
                          "skill_category_id": {
                            "type": "string",
                            "description": "The skill category's ID.",
                            "example": "sdfgerieuh384753hgfhjgdshjs"
                          },
                          "skill_category_name": {
                            "type": "string",
                            "description": "The skill category's name.",
                            "example": "Language"
                          },
                          "skill_type": {
                            "type": "string",
                            "description": "The skill's type. \n\n* `text` - A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* `proficiency` - A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
                            "example": "proficiency"
                          },
                          "minimum_proficiency_level": {
                            "type": "integer",
                            "description": "The skill's minimum proficiency level. \n\n**Note** Only applies to skill proficiency based skill categories. If minimum proficiency is set, agents must have a proficiency equal to or greater than the minimum proficiency value set.",
                            "example": 2
                          },
                          "skill_category_required": {
                            "type": "boolean",
                            "description": "If a skill category is required, agents must have the corresponding skill or they will not be considered for assignment.",
                            "example": true
                          }
                        },
                        "description": "The routing profile's priority."
                      }
                    }
                  },
                  "description": "Information about the agent routing profile detail."
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_routing_profile:read:admin",
              "contact_center:read:agent_routing_profile:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.7.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_routing_profile:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:agent_routing_profile:admin"
          ]
        }
      }
    },
    "/contact_center/skills": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "List skills",
        "description": "Return a list of a skills or a skill category's assigned skills. \n\n \n\n**Scopes:** `contact_center_skill:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_skills:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listSkills",
        "parameters": [
          {
            "name": "skill_category_id",
            "in": "query",
            "description": "The skill category's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Mu_IEZZHQZGMY9avK74kwA"
            }
          },
          {
            "name": "skill_id",
            "in": "query",
            "description": "The skill's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          },
          {
            "name": "skill_type",
            "in": "query",
            "description": "The skill category's type.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The skill category's type: \n* 'text' &mdash; A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' &mdash; A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
              "example": "text",
              "enum": [
                "text",
                "proficiency"
              ]
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nSkills list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "jA5csQv1W1oXuYZLspNIZzMOXqTD9r9Rje2"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "skills": {
                      "type": "array",
                      "description": "Information about the skills.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "skill_id": {
                            "type": "string",
                            "description": "The skill's ID.",
                            "example": "saaHWgVMGQU69soco456oNA"
                          },
                          "skill_name": {
                            "type": "string",
                            "description": "The skill's name.",
                            "example": "French"
                          },
                          "skill_type": {
                            "type": "string",
                            "description": "The skill category's type: \n* 'text' &mdash; A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' &mdash; A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
                            "example": "text",
                            "enum": [
                              "text",
                              "proficiency"
                            ]
                          },
                          "max_proficiency_level": {
                            "type": "integer",
                            "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
                            "example": 5,
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          },
                          "skill_category_name": {
                            "type": "string",
                            "description": "The skill category's name.",
                            "example": "Languages"
                          },
                          "skill_category_id": {
                            "type": "string",
                            "description": "The skill's category ID.",
                            "example": "rvYVEioQQduHb5iHCj7-kg"
                          },
                          "total_users": {
                            "type": "integer",
                            "description": "The total users of the skill",
                            "example": 5
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of the user who last modified the skill.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the skill was last modified.",
                            "format": "date-time",
                            "example": "2022-02-15T09:27:15Z"
                          }
                        },
                        "description": "Information about the skill."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:read:admin",
              "contact_center:read:list_skills:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_skills:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Skills"
        ],
        "summary": "Create a skill",
        "description": "Create a [skill](https://support.zoom.us/hc/en-us/articles/4423986613261) for skill-based routing. Skills are agent traits that ensure they are the right person to handle a customer interaction. \n\n \n\n**Scopes:** `contact_center_skill:write:admin`\n\n**Granular Scopes:** `contact_center:write:skill:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "skillCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "skill_category_id": {
                    "type": "string",
                    "description": "The skill category ID to assign the skill to.",
                    "example": "OyQQjWiZQTaBX7RwSK6iRw"
                  },
                  "skill_name": {
                    "type": "string",
                    "description": "The skill's name.",
                    "example": "French"
                  }
                },
                "description": "Information about the new skill."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nSkills created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skill_id": {
                      "type": "string",
                      "description": "The skill's ID.",
                      "example": "saaHWgVMGQU69soco456oNA"
                    },
                    "skill_name": {
                      "type": "string",
                      "description": "The skill's name.",
                      "example": "French"
                    },
                    "skill_type": {
                      "type": "string",
                      "description": "The skill category's type: \n* 'text' &mdash; A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' &mdash; A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
                      "example": "text",
                      "enum": [
                        "text",
                        "proficiency"
                      ]
                    },
                    "max_proficiency_level": {
                      "type": "integer",
                      "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
                      "example": 5,
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "skill_category_name": {
                      "type": "string",
                      "description": "The skill category's name.",
                      "example": "Languages"
                    },
                    "skill_category_id": {
                      "type": "string",
                      "description": "The skill's category ID.",
                      "example": "rvYVEioQQduHb5iHCj7-kg"
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the skill.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time when the skill was last modified.",
                      "format": "date-time",
                      "example": "2022-02-15T09:27:15Z"
                    }
                  },
                  "description": "Information about the skill."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `1502` <br>\nSkill name already exists. You must select a different name.\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1501` <br>\nSkill category does not exist: $skillCategoryId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:write:admin",
              "contact_center:write:skill:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:skill:admin"
          ]
        }
      }
    },
    "/contact_center/skills/categories": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "List skill categories",
        "description": "List all available skill categories and their information. \n\n \n\n**Scopes:** `contact_center_skill:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_skill_categories:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listSkillCategory",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nSkill categories list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "H13iGyIFKCICxrYDlrppjJcDvN2jcBnRzD2"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 1,
                      "default": 30
                    },
                    "skill_categories": {
                      "type": "array",
                      "description": "Information about the skill categories.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "skill_category_id": {
                            "type": "string",
                            "description": "The skill category's ID.",
                            "example": "Mu_IEZZHQZGMY9avK74kwA"
                          },
                          "skill_category_name": {
                            "type": "string",
                            "description": "The skill category's name.",
                            "example": "Languages"
                          },
                          "skill_category_description": {
                            "type": "string",
                            "description": "The skill category's description.",
                            "example": "Medium proficiency."
                          },
                          "max_proficiency_level": {
                            "type": "integer",
                            "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). This value only returns if the skill category's `type` value is `1` (a proficiency-based skill).",
                            "example": 5,
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          },
                          "total_agent_routing_profiles": {
                            "type": "integer",
                            "description": "The total agent routing profiles.",
                            "example": 5
                          },
                          "skill_type": {
                            "type": "string",
                            "description": "The skill category's type: \n* 'text' &mdash; A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' &mdash; A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
                            "example": "text",
                            "enum": [
                              "text",
                              "proficiency"
                            ]
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID of the user who last modified the skill category.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the skill category was last modified.",
                            "format": "date-time",
                            "example": "2022-02-15T09:27:15Z"
                          }
                        },
                        "description": "Information about the available skill categories."
                      }
                    }
                  },
                  "description": "Information about the available skill categories."
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:read:admin",
              "contact_center:read:list_skill_categories:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_skill_categories:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Skills"
        ],
        "summary": "Create a skill category",
        "description": "Create a new skill category. Skill categories let you assign several similar skills to a category, such as language skills. You can then route French-speaking callers to contact center agents that have the highest proficiency with French. \n\n \n\n**Scopes:** `contact_center_skill:write:admin`\n\n**Granular Scopes:** `contact_center:write:skill_category:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "SkillCategoryCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "max_proficiency_level": {
                    "type": "integer",
                    "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
                    "example": 5,
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  },
                  "skill_category_name": {
                    "type": "string",
                    "description": "The skill category's name.",
                    "example": "Languages"
                  },
                  "skill_category_description": {
                    "type": "string",
                    "description": "The skill category's description.",
                    "example": "Medium proficiency."
                  },
                  "skill_type": {
                    "type": "string",
                    "description": "The skill category's type: \n* 'text' &mdash; A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' &mdash; A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
                    "example": "text",
                    "enum": [
                      "text",
                      "proficiency"
                    ]
                  }
                },
                "description": "Information about the new skill category."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nSkill category created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skill_category_id": {
                      "type": "string",
                      "description": "The skill category's ID.",
                      "example": "Mu_IEZZHQZGMY9avK74kwA"
                    },
                    "skill_category_name": {
                      "type": "string",
                      "description": "The skill category's name.",
                      "example": "Languages"
                    },
                    "skill_category_description": {
                      "type": "string",
                      "description": "The skill category's description.",
                      "example": "Medium proficiency."
                    },
                    "skill_type": {
                      "type": "string",
                      "description": "The skill category's type: \n* 'text' &mdash; A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' &mdash; A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
                      "example": "text",
                      "enum": [
                        "text",
                        "proficiency"
                      ]
                    },
                    "max_proficiency_level": {
                      "type": "integer",
                      "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
                      "example": 5,
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the skill category.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time when the skill category was last modified.",
                      "format": "date-time",
                      "example": "2022-02-15T09:27:15Z"
                    }
                  },
                  "description": "Information about the created skill category."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `1502` <br>\nThe skill category highest proficiency level is \"5\", and the lowest level is \"1\".\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:write:admin",
              "contact_center:write:skill_category:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:skill_category:admin"
          ]
        }
      }
    },
    "/contact_center/skills/categories/{skillCategoryId}": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "Get a skill category",
        "description": "Return information about a specific skill category. \n\n \n\n**Scopes:** `contact_center_skill:read:admin`\n\n**Granular Scopes:** `contact_center:read:skill_category:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getSkillCategory",
        "parameters": [
          {
            "name": "skillCategoryId",
            "in": "path",
            "description": "The skill category's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Mu_IEZZHQZGMY9avK74kwA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nSkill category returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skill_category_id": {
                      "type": "string",
                      "description": "The skill category's ID.",
                      "example": "Mu_IEZZHQZGMY9avK74kwA"
                    },
                    "skill_category_name": {
                      "type": "string",
                      "description": "The skill category's name.",
                      "example": "Languages"
                    },
                    "skill_category_description": {
                      "type": "string",
                      "description": "The skill category's description.",
                      "example": "Medium proficiency."
                    },
                    "max_proficiency_level": {
                      "type": "integer",
                      "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). This value only returns if the skill category's `type` value is `1` (a proficiency-based skill).",
                      "example": 5,
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "skill_type": {
                      "type": "string",
                      "description": "The skill category's type: \n* 'text' &mdash; A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' &mdash; A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
                      "example": "text",
                      "enum": [
                        "text",
                        "proficiency"
                      ]
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the skill category.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time when the skill category was last modified.",
                      "format": "date-time",
                      "example": "2022-02-15T09:27:15Z"
                    }
                  },
                  "description": "Information about the skill category."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1501` <br>\nSkill category does not exist: $skillCategoryId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:read:admin",
              "contact_center:read:skill_category:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:skill_category:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Skills"
        ],
        "summary": "Delete a skill category",
        "description": "Delete an existing skill category. \n\n \n\n**Scopes:** `contact_center_skill:write:admin`\n\n**Granular Scopes:** `contact_center:delete:skill_category:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "SkillCategoryDelete",
        "parameters": [
          {
            "name": "skillCategoryId",
            "in": "path",
            "description": "The skill category's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Mu_IEZZHQZGMY9avK74kwA"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nSkill category deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1501` <br>\nSkill category does not exist: $skillCategoryId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:write:admin",
              "contact_center:delete:skill_category:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:skill_category:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Skills"
        ],
        "summary": "Update a skill category",
        "description": "Update a skill category. \n\n \n\n**Scopes:** `contact_center_skill:write:admin`\n\n**Granular Scopes:** `contact_center:update:skill_category:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "SkillCategoryUpdate",
        "parameters": [
          {
            "name": "skillCategoryId",
            "in": "path",
            "description": "The skill category's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Mu_IEZZHQZGMY9avK74kwA"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "max_proficiency_level": {
                    "type": "integer",
                    "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
                    "example": 5,
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  },
                  "skill_category_name": {
                    "type": "string",
                    "description": "The skill category's name.",
                    "example": "Languages"
                  },
                  "skill_category_description": {
                    "type": "string",
                    "description": "The skill category's description.",
                    "example": "Medium proficiency."
                  }
                },
                "description": "Information about the new skill category."
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nSkill category updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `1502` <br>\nThe skill category highest proficiency level is \"5\", and the lowest level is \"1\".\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1501` <br>\nSkill category does not exist: $skillCategoryId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:write:admin",
              "contact_center:update:skill_category:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:skill_category:admin"
          ]
        }
      }
    },
    "/contact_center/skills/{skillId}": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "Get a skill",
        "description": "Return a skill's information and its usage. \n\n \n\n**Scopes:** `contact_center_skill:read:admin`\n\n**Granular Scopes:** `contact_center:read:skill:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getSkill",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nSkill usage information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skill_id": {
                      "type": "string",
                      "description": "The skill's ID.",
                      "example": "saaHWgVMGQU69soco456oNA"
                    },
                    "skill_name": {
                      "type": "string",
                      "description": "The skill's name.",
                      "example": "French"
                    },
                    "skill_type": {
                      "type": "string",
                      "description": "The skill category's type: \n* 'text' &mdash; A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' &mdash; A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
                      "example": "text",
                      "enum": [
                        "text",
                        "proficiency"
                      ]
                    },
                    "max_proficiency_level": {
                      "type": "integer",
                      "description": "The skill category's maximum proficiency level, between `1` (low) and `5` (high). Use this value if the skill category's `type` value is `1` (a proficiency-based skill).",
                      "example": 5,
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "skill_category_name": {
                      "type": "string",
                      "description": "The skill category's name.",
                      "example": "Languages"
                    },
                    "skill_category_id": {
                      "type": "string",
                      "description": "The skill's category ID.",
                      "example": "rvYVEioQQduHb5iHCj7-kg"
                    },
                    "total_users": {
                      "type": "integer",
                      "description": "The total users of the skill",
                      "example": 5
                    },
                    "modified_by": {
                      "type": "string",
                      "description": "The ID of the user who last modified the skill.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time when the skill was last modified.",
                      "format": "date-time",
                      "example": "2022-02-15T09:27:15Z"
                    }
                  },
                  "description": "Information about the skill."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1401` <br>\nSkill does not exist: $skillId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:read:admin",
              "contact_center:read:skill:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:skill:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Skills"
        ],
        "summary": "Delete a skill",
        "description": "Delete a skill. \n\n \n\n**Scopes:** `contact_center_skill:write:admin`\n\n**Granular Scopes:** `contact_center:delete:skill:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "skillDelete",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204 `  \n \nSkill deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1401` <br>\nSkill does not exist: $skillId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:write:admin",
              "contact_center:delete:skill:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:skill:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Skills"
        ],
        "summary": "Update a skill",
        "description": "Use this API to update a skill's name. \n\n \n\n**Scopes:** `contact_center_skill:write:admin`\n\n**Granular Scopes:** `contact_center:update:skill:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "skillNameUpdate",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "skill_name": {
                    "type": "string",
                    "description": "The skill's new name.",
                    "example": "this is a skill name"
                  }
                },
                "description": "Information about the updated skill."
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nSkill updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1401` <br>\nSkill does not exist: $skillId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:write:admin",
              "contact_center:update:skill:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:skill:admin"
          ]
        }
      }
    },
    "/contact_center/skills/{skillId}/users": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "List users of a skill",
        "description": "Retrieve a list of all users assigned to a skill. \n\n**This endpoint will be deprecated in August 2024.**\n\n**Scopes:** `contact_center_user:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_skill_users:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listSkillUsers",
        "parameters": [
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nSkill user list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "users": {
                      "type": "array",
                      "description": "Information about the skill users.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:read:admin",
              "contact_center:read:list_skill_users:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "docfix-DEVELOPERS-4643-LS",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_user:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_skill_users:admin"
          ]
        }
      }
    },
    "/contact_center/skills/{skillId}/users/{userId}": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "Get a skill's user",
        "description": "Retrieve information for a particular skill's user. \n\n **This endpoint will be deprecated in August 2024.** For more information, see the [Tasks and Skills deprecation FAQ](https://developers.zoom.us/docs/api/rest/contact-center-api/endpoint-deprecation-faq/#task-and-skill-endpoint-deprecations---august-2024).\n\n\n\n**Scopes:** `contact_center_user:read:admin`\n\n**Granular Scopes:** `contact_center:read:skill_user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "GetASkillUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "&quot;**HTTP Status Code:** `200`   \n \nUser information returned.&quot;",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "The user's ID.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The user's name.",
                      "example": "Jill"
                    },
                    "user_email": {
                      "type": "string",
                      "description": "The user's email address.",
                      "format": "email",
                      "example": "jchill@example.com"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `300` <br>\n Invalid user or skill ID. <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:read:admin",
              "contact_center:read:skill_user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.11.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_user:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:skill_user:admin"
          ]
        }
      }
    },
    "/contact_center/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "List tasks",
        "description": "Use this API to return a list of tasks. \n\n**This endpoint will be deprecated in August 2024.**\n\n**Scopes:** `contact_center_task:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_tasks:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listTasks",
        "parameters": [
          {
            "name": "task_status",
            "in": "query",
            "description": "The task's status: \n* `pending` \n* `reserved` \n* `assigned` \n* `canceled` \n* `completed` \n* `wrapping`",
            "required": false,
            "schema": {
              "type": "string",
              "example": "completed",
              "enum": [
                "pending",
                "reserved",
                "assigned",
                "canceled",
                "completed",
                "wrapping"
              ]
            }
          },
          {
            "name": "queue_id",
            "in": "query",
            "description": "The task's queue ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Ql3qxUWXSHes4PmcOmzyOg"
            }
          },
          {
            "name": "engagement_id",
            "in": "query",
            "description": "The task's engagement ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ZWS73008E1A2DC2DBFF5DBBE27A68653E0D"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nTasks list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 50,
                      "default": 30
                    },
                    "tasks": {
                      "type": "array",
                      "description": "Information about the tasks.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "task_id": {
                            "type": "string",
                            "description": "The task's ID.",
                            "example": "ZWT45A019B032F02E1BFC1F8BEACD789C75"
                          },
                          "workspace_id": {
                            "type": "string",
                            "description": "The task's Workspace ID.",
                            "example": "ZWS73008E1A2DC2DBFF5DBBE27A68653E0D"
                          },
                          "task_timeout": {
                            "type": "integer",
                            "description": "The task's timeout, in seconds.",
                            "example": 86400
                          },
                          "task_priority": {
                            "maximum": 10,
                            "minimum": 0,
                            "type": "integer",
                            "description": "The task's priority, from `0` to `10`. The greater the value, the higher the priority. The maximum value is `10`.",
                            "example": 1
                          },
                          "task_status": {
                            "type": "string",
                            "description": "The task's assignment status: \n* `pending` \n* `reserved` \n* `assigned` \n* `canceled` \n* `completed` \n* `wrapping`",
                            "example": "pending",
                            "enum": [
                              "pending",
                              "reserved",
                              "assigned",
                              "canceled",
                              "completed",
                              "wrapping"
                            ]
                          },
                          "channel_id": {
                            "type": "string",
                            "description": "The task's channel ID.",
                            "example": "ZTC626F90D72F0C6188F0144DF0BDD8FD02"
                          },
                          "channel_name": {
                            "type": "string",
                            "description": "The unique name of the task channel: \n* `default` \n* `voice` \n* `sms` \n* `chat` \n* `phone`",
                            "example": "default",
                            "enum": [
                              "default",
                              "voice",
                              "sms",
                              "chat",
                              "phone"
                            ]
                          },
                          "queue_id": {
                            "type": "string",
                            "description": "The queue's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The queue's name.",
                            "example": "Demo"
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The [flow](https://support.zoom.us/hc/en-us/articles/4472928851469-Managing-flows) ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The [flow](https://support.zoom.us/hc/en-us/articles/4472928851469-Managing-flows) name.",
                            "example": "Demo"
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The task's Engagement ID.",
                            "example": "ZWS73008E1A2DC2DBFF5DBBE27A68653E0D"
                          },
                          "caller_number": {
                            "type": "string",
                            "description": "The caller's phone number.",
                            "example": "+12363605433"
                          },
                          "callee_number": {
                            "type": "string",
                            "description": "The callee's phone number.",
                            "example": "+12048002447"
                          },
                          "assigned_user_id": {
                            "type": "string",
                            "description": "The user ID of the task's assigned user.",
                            "example": "ukAAkZKfROKMSw1bj_RDFQ"
                          },
                          "auto_assign": {
                            "type": "boolean",
                            "description": "Whether user auto assignment is enabled for the task.",
                            "example": false
                          },
                          "created_time": {
                            "type": "string",
                            "description": "The task's creation date and time.",
                            "format": "date-time",
                            "example": "2022-04-08T07:21:57Z"
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time at which the task was last modified.",
                            "format": "date-time",
                            "example": "2022-04-08T07:22:03Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `300` <br>\n * Invalid parameter: assignment_status. <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "contact_center_task:read:admin",
              "contact_center:read:list_tasks:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.11.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_task:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_tasks:admin"
          ]
        }
      }
    },
    "/contact_center/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a task",
        "description": "Use this API to return information about a task. \n\n**This endpoint will be deprecated in August 2024.**\n\n**Scopes:** `contact_center_task:read:admin`\n\n**Granular Scopes:** `contact_center:read:task:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getATask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ZWT45A019B032F02E1BFC1F8BEACD789C75"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nTask returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task_id": {
                      "type": "string",
                      "description": "The task's ID.",
                      "example": "ZWT45A019B032F02E1BFC1F8BEACD789C75"
                    },
                    "workspace_id": {
                      "type": "string",
                      "description": "The task's Workspace ID.",
                      "example": "ZWS73008E1A2DC2DBFF5DBBE27A68653E0D"
                    },
                    "task_timeout": {
                      "type": "integer",
                      "description": "The task's timeout, in seconds.",
                      "example": 86400
                    },
                    "task_priority": {
                      "maximum": 10,
                      "minimum": 0,
                      "type": "integer",
                      "description": "The task's priority, from `0` to `10`. The greater the value, the higher the priority. The maximum value is `10`.",
                      "example": 1
                    },
                    "task_status": {
                      "type": "string",
                      "description": "The task's assignment status: \n* `pending` \n* `reserved` \n* `assigned` \n* `canceled` \n* `completed` \n* `wrapping`",
                      "example": "pending",
                      "enum": [
                        "pending",
                        "reserved",
                        "assigned",
                        "canceled",
                        "completed",
                        "wrapping"
                      ]
                    },
                    "channel_id": {
                      "type": "string",
                      "description": "The task's channel ID.",
                      "example": "ZTC626F90D72F0C6188F0144DF0BDD8FD02"
                    },
                    "channel_name": {
                      "type": "string",
                      "description": "The unique name of the task channel: \n* `default` \n* `voice` \n* `sms` \n* `chat` \n* `phone`",
                      "example": "default",
                      "enum": [
                        "default",
                        "voice",
                        "sms",
                        "chat",
                        "phone"
                      ]
                    },
                    "queue_id": {
                      "type": "string",
                      "description": "The queue's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "queue_name": {
                      "type": "string",
                      "description": "The queue's name.",
                      "example": "Demo"
                    },
                    "flow_id": {
                      "type": "string",
                      "description": "The [flow](https://support.zoom.us/hc/en-us/articles/4472928851469-Managing-flows) ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "flow_name": {
                      "type": "string",
                      "description": "The [flow](https://support.zoom.us/hc/en-us/articles/4472928851469-Managing-flows) name.",
                      "example": "Demo"
                    },
                    "engagement_id": {
                      "type": "string",
                      "description": "The task's Engagement ID.",
                      "example": "ZWS73008E1A2DC2DBFF5DBBE27A68653E0D"
                    },
                    "caller_number": {
                      "type": "string",
                      "description": "The caller's phone number.",
                      "example": "+12363605433"
                    },
                    "callee_number": {
                      "type": "string",
                      "description": "The callee's phone number.",
                      "example": "+12048002447"
                    },
                    "assigned_user_id": {
                      "type": "string",
                      "description": "The user ID of the task's assigned user.",
                      "example": "ukAAkZKfROKMSw1bj_RDFQ"
                    },
                    "auto_assign": {
                      "type": "boolean",
                      "description": "Whether user auto assignment is enabled for the task.",
                      "example": false
                    },
                    "created_time": {
                      "type": "string",
                      "description": "The task's creation date and time.",
                      "format": "date-time",
                      "example": "2022-04-08T07:21:57Z"
                    },
                    "last_modified_time": {
                      "type": "string",
                      "description": "The date and time at which the task was last modified.",
                      "format": "date-time",
                      "example": "2022-04-08T07:22:03Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1301` <br>\n Task does not exist: $taskId <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "contact_center_task:read:admin",
              "contact_center:read:task:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.11.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_task:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:task:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update a task",
        "description": "Use this API to:   \n  1) update a task's priority level or   \n  2) manually assign or unassign a task to an agent. \n\n**This endpoint will be deprecated in August 2024.**\n\n**Scopes:** `contact_center_task:write:admin`\n\n**Granular Scopes:** `contact_center:update:task:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "taskUpdate",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ZWT45A019B032F02E1BFC1F8BEACD789C75"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task_priority": {
                    "maximum": 10,
                    "minimum": 0,
                    "type": "integer",
                    "description": "The task's priority level, from `0` to `10`. The greater the value, the higher the task's priority. The maximum value is `10`.",
                    "example": 2
                  },
                  "assigned_user_id": {
                    "type": "string",
                    "description": "The agent's user ID to whom the task is manually assigned.  \n To unassign the task from an agent manually and put the task back to the queue for reassignment, set the `assigned_user_id` field as an empty string.",
                    "example": "ukAAkZKfROKMSw1bj_RDFQ"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nTask updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `300` <br>\n * Parameter `task_priority` or `assigned_user_id` is required. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `1001` <br>\n User does not exist: $assigned_user_id <br>\n**Error Code:** `1301` <br>\n Task does not exist: $taskId <br>\n**Error Code:** `1302` <br>\n Cannot update task. <br>\n**Error Code:** `1303` <br>\n Task is not yet manually assigned. <br>\n"
          }
        },
        "deprecated": true,
        "security": [
          {
            "openapi_oauth": [
              "contact_center_task:write:admin",
              "contact_center:update:task:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.11.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_task:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:task:admin"
          ]
        }
      }
    },
    "/contact_center/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List users' profiles",
        "description": "Returns a list of users and their information. \n\n \n\n**Scopes:** `contact_center_user:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_users:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "users",
        "parameters": [
          {
            "name": "search_key",
            "in": "query",
            "description": "The user's email address or username.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "jchill@example.com"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "region_id",
            "in": "query",
            "description": "The region's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "8f71O6rWT8KFUGQmJIFAdQ"
            }
          },
          {
            "name": "user_access",
            "in": "query",
            "description": "The user's access status. \n* `active` &mdash; The user's role permissions allow them to access the Contact Center. \n* `inactive` &mdash; The user cannot access the Contact Center.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "active",
              "enum": [
                "active",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nUser list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "users": {
                      "type": "array",
                      "description": "Information about the users.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          },
                          "role_id": {
                            "type": "string",
                            "description": "The user's role ID.",
                            "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                          },
                          "role_name": {
                            "type": "string",
                            "description": "The user's role name.",
                            "example": "Admin"
                          },
                          "client_integration": {
                            "type": "string",
                            "description": "The contact center's client integration. \n* `Default` \n* `Salesforce` \n* `Zendesk` \n* `ServiceNow` \n* `Microsoft_Dynamics_365`",
                            "example": "Salesforce",
                            "enum": [
                              "Default",
                              "Salesforce",
                              "Zendesk",
                              "ServiceNow",
                              "Microsoft_Dynamics_365"
                            ]
                          },
                          "status_id": {
                            "type": "string",
                            "description": "The user's status ID.",
                            "example": "2"
                          },
                          "status_name": {
                            "type": "string",
                            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as &quot;Lunch&quot; or &quot;Away until Monday&quot;",
                            "example": "Not Ready",
                            "enum": [
                              "Offline",
                              "Ready",
                              "Not Ready",
                              "Occupied"
                            ]
                          },
                          "sub_status_id": {
                            "type": "string",
                            "description": "The user&rsquo;s reason ID when the user status is `Not Ready`.",
                            "example": "21"
                          },
                          "sub_status_name": {
                            "type": "string",
                            "description": "The user&rsquo;s reason when the user status is `Not Ready`.\n\n To query a list of default and custom `Not Ready` reasons, call [List System Statuses](https://developers.zoom.us/docs/contact-center/apis/#operation/listSystemStatus) (filter by &quot;queue_opt_out_and_not_ready_status&quot; status_category)\n\n Default `Not Ready` reasons:\n * Break \n* End Shift \n* Forced \n* Meal \n* Meeting \n* Training \n",
                            "example": "Meal",
                            "enum": [
                              "Break",
                              "End Shift",
                              "Forced",
                              "Meal",
                              "Meeting",
                              "Training"
                            ]
                          },
                          "user_access": {
                            "type": "string",
                            "description": "The user's access status. \n* `active` &mdash; The user's role permissions allow them to access the Contact Center. \n* `inactive` &mdash; The user cannot access the Contact Center.",
                            "example": "active",
                            "enum": [
                              "active",
                              "inactive"
                            ]
                          },
                          "modified_by": {
                            "type": "string",
                            "description": "The ID that last modified the user.",
                            "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                          },
                          "last_modified_time": {
                            "type": "string",
                            "description": "The date and time when the user was last modified.",
                            "format": "date-time",
                            "example": "2020-02-10T21:39:50Z"
                          },
                          "country_iso_code": {
                            "type": "string",
                            "description": "Two-letter country [code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
                            "example": "US"
                          },
                          "region_id": {
                            "type": "string",
                            "description": "The user's region ID.",
                            "example": "8f71O6rWT8KFUGQmJIFAdQ"
                          },
                          "region_name": {
                            "type": "string",
                            "description": "The user's region name.",
                            "example": "Main Region"
                          },
                          "channel_settings": {
                            "type": "object",
                            "properties": {
                              "multi_channel_engagements": {
                                "type": "object",
                                "properties": {
                                  "enable": {
                                    "type": "boolean",
                                    "description": "Whether to allow users to receive voice or video engagements while handling chat and SMS engagements, based on the `max_agent_load` value.",
                                    "example": true
                                  },
                                  "max_agent_load": {
                                    "maximum": 100,
                                    "minimum": 1,
                                    "type": "integer",
                                    "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                                    "example": 50
                                  },
                                  "email_max_agent_load": {
                                    "maximum": 100,
                                    "minimum": 1,
                                    "type": "integer",
                                    "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                                    "example": 50
                                  }
                                },
                                "description": "Information about the setting's multi-channel engagements."
                              },
                              "concurrent_message_capacity": {
                                "maximum": 20,
                                "minimum": 0,
                                "type": "integer",
                                "description": "The maximum number of concurrent messaging conversations that can be assigned to a user.",
                                "example": 4
                              },
                              "concurrent_email_capacity": {
                                "maximum": 20,
                                "minimum": 0,
                                "type": "integer",
                                "description": "The maximum number of concurrent email conversations that can be assigned to a user.",
                                "example": 4
                              }
                            },
                            "description": "Information about the channel settings."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:read:admin",
              "contact_center:read:list_users:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.4.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_user:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_users:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user's profile",
        "description": "Create a profile for a user. \n\n \n\n**Scopes:** `contact_center_user:write:admin`\n\n**Granular Scopes:** `contact_center:write:user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "role_id"
                ],
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "The user's ID.",
                    "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                  },
                  "user_email": {
                    "type": "string",
                    "description": "The user's email address. \n\n**Note** Provide either `user_email` or `user_id`. If both `user_email` and `user_id` are provided, only `user_email` will be used, while `user_id` will be ignored.",
                    "format": "email",
                    "example": "jchill@example.com"
                  },
                  "role_id": {
                    "type": "string",
                    "description": "The user's role ID.",
                    "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                  },
                  "country_iso_code": {
                    "type": "string",
                    "description": "The [ISO country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
                    "example": "US"
                  },
                  "client_integration": {
                    "type": "string",
                    "description": "The contact center's client integration. \n* `Default` \n* `Salesforce` \n* `Zendesk` \n* `ServiceNow` \n* `Microsoft_Dynamics_365`",
                    "example": "Salesforce",
                    "enum": [
                      "Default",
                      "Salesforce",
                      "Zendesk",
                      "ServiceNow",
                      "Microsoft_Dynamics_365"
                    ]
                  },
                  "client_integration_name": {
                    "type": "string",
                    "description": "The client integration connection name to be assigned to the user.",
                    "example": "integration-test"
                  },
                  "user_access": {
                    "type": "string",
                    "description": "The user's access status. \n* `active` - The user's role permissions allow them to access the Contact Center. \n* `inactive` - The user cannot access the Contact Center.",
                    "example": "active",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  },
                  "region_id": {
                    "type": "string",
                    "description": "The user's region ID.",
                    "example": "8f71O6rWT8KFUGQmJIFAdQ"
                  },
                  "channel_settings": {
                    "type": "object",
                    "properties": {
                      "multi_channel_engagements": {
                        "type": "object",
                        "properties": {
                          "enable": {
                            "type": "boolean",
                            "description": "Whether to allow users to receive voice or video engagements while handling chat and SMS engagements, based on the `max_agent_load` value.",
                            "example": true
                          },
                          "max_agent_load": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                            "example": 50
                          },
                          "email_max_agent_load": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                            "example": 50
                          }
                        },
                        "description": "Information about the setting's multi-channel engagements."
                      },
                      "concurrent_message_capacity": {
                        "maximum": 20,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The maximum number of concurrent messaging conversations that can be assigned to a user.",
                        "example": 4
                      },
                      "concurrent_email_capacity": {
                        "maximum": 20,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The maximum number of concurrent email conversations that can be assigned to a user.",
                        "example": 4
                      }
                    },
                    "description": "Information about the channel settings."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nUser created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "The user's ID.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The user's name.",
                      "example": "Jill"
                    },
                    "user_email": {
                      "type": "string",
                      "description": "The user's email address.",
                      "format": "email",
                      "example": "jchill@example.com"
                    },
                    "role_id": {
                      "type": "string",
                      "description": "The user's role ID.",
                      "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                    },
                    "role_name": {
                      "type": "string",
                      "description": "The user's role name.",
                      "example": "Admin"
                    },
                    "country_iso_code": {
                      "type": "string",
                      "description": "The [ISO country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
                      "example": "US"
                    },
                    "client_integration": {
                      "type": "string",
                      "description": "The contact center's client integration. \n* `Default` \n* `Salesforce` \n* `Zendesk` \n* `ServiceNow` \n* `Microsoft_Dynamics_365`",
                      "example": "Salesforce",
                      "enum": [
                        "Default",
                        "Salesforce",
                        "Zendesk",
                        "ServiceNow",
                        "Microsoft_Dynamics_365"
                      ]
                    },
                    "client_integration_name": {
                      "type": "string",
                      "description": "The client integration connection name to be assigned to the user.",
                      "example": "integration-test"
                    },
                    "status_id": {
                      "type": "string",
                      "description": "The user's availability status ID.",
                      "example": "1"
                    },
                    "status_name": {
                      "type": "string",
                      "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as &quot;Lunch&quot; or &quot;Away until Monday&quot;",
                      "example": "Offline",
                      "enum": [
                        "Offline",
                        "Ready",
                        "Not Ready",
                        "Occupied"
                      ]
                    },
                    "user_access": {
                      "type": "string",
                      "description": "The user's access status. \n* `active` - The user's role permissions allow them to access the Contact Center. \n* `inactive` - The user cannot access the Contact Center.",
                      "example": "active",
                      "enum": [
                        "active",
                        "inactive"
                      ]
                    },
                    "region_id": {
                      "type": "string",
                      "description": "The user's region ID.",
                      "example": "8f71O6rWT8KFUGQmJIFAdQ"
                    },
                    "region_name": {
                      "type": "string",
                      "description": "The user's region name.",
                      "example": "Main Region"
                    },
                    "channel_settings": {
                      "type": "object",
                      "properties": {
                        "multi_channel_engagements": {
                          "type": "object",
                          "properties": {
                            "enable": {
                              "type": "boolean",
                              "description": "Whether to allow users to receive voice or video engagements while handling chat and SMS engagements, based on the `max_agent_load` value.",
                              "example": true
                            },
                            "max_agent_load": {
                              "maximum": 100,
                              "minimum": 1,
                              "type": "integer",
                              "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                              "example": 50
                            }
                          },
                          "description": "Information about the setting's multi-channel engagements."
                        },
                        "concurrent_message_capacity": {
                          "maximum": 20,
                          "minimum": 0,
                          "type": "integer",
                          "description": "The maximum number of concurrent messaging conversations that can be assigned to a user.",
                          "example": 4
                        }
                      },
                      "description": "Information about the channel settings."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1003` <br>\n User creation failed. Try again later. <br>\n**Error Code:** `1004` <br>\n Invalid user ID or user email: $email. <br>\n**Error Code:** `1007` <br>\n User already exists: $email. <br>\n**Error Code:** `1009` <br>\n User ID or user email cannot be empty at the same time. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `1006` <br>\n The account \"$client_integration\" client integration does not exist. Add it to the \"Integrations\" function module. <br>\n**Error Code:** `2201` <br>\n Role does not exist: $role_id. <br>\n**Error Code:** `2202` <br>\n Country ISO Code does not exist: $country_iso_code. <br>\n**Error Code:** `1017` <br>\n Region does not exist. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:write:admin",
              "contact_center:write:user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_user:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:user:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Batch delete user profiles",
        "description": "Batch delete users. \n\n**Note**: Either `user_ids` or `user_emails` needs to be provided. If both `user_ids` and `user_emails` are provided, only `user_ids` will be used, while `user_emails` will be ignored. \n\n \n\n**Scopes:** `contact_center_user:write:admin`\n\n**Granular Scopes:** `contact_center:delete:batch_users:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "batchDeleteUsers",
        "parameters": [
          {
            "name": "user_ids",
            "in": "query",
            "description": "A comma-separated list of user IDs to query, up to 20 user IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "IGTRVt3gQ2i-WjoUIjeZxw"
              }
            }
          },
          {
            "name": "user_emails",
            "in": "query",
            "description": "A comma-separated list of user emails to query, up to 20 user emails.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "jchill@example.com"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nUsers have been deleted in bulk."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1012` <br>\nUser does not exist: [$userId].\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:write:admin",
              "contact_center:delete:batch_users:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_user:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:batch_users:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Batch update user profiles",
        "description": "Batch update user profiles. \n\n \n\n**Scopes:** `contact_center_user:write:admin`\n\n**Granular Scopes:** `contact_center:update:batch_users:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "BatchUpdateUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "type": "array",
                    "description": "Information about the users, the maximum number of updated users is 20.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "user_id": {
                          "type": "string",
                          "description": "The user's ID. This field is only used as an input parameter and cannot be updated.",
                          "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                        },
                        "user_email": {
                          "type": "string",
                          "description": "The user's email address. This field is only used as an input parameter and cannot be updated. \n\n**Note**: Either `user_email` or `user_id` needs to be provided. If both `user_email` and `user_id` are provided, only `user_id` will be used, while `user_email` will be ignored.",
                          "format": "email",
                          "example": "jchill@example.com"
                        },
                        "client_integration": {
                          "type": "string",
                          "description": "The contact center's client integration. \n* `Default` \n* `Salesforce` \n* `Zendesk` \n* `ServiceNow` \n* `Microsoft_Dynamics_365`",
                          "example": "Salesforce",
                          "enum": [
                            "Default",
                            "Salesforce",
                            "Zendesk",
                            "ServiceNow",
                            "Microsoft_Dynamics_365"
                          ]
                        },
                        "client_integration_name": {
                          "type": "string",
                          "description": "The client integration connection name to be assigned to the user.",
                          "example": "integration-test"
                        },
                        "role_id": {
                          "type": "string",
                          "description": "The user's role ID.",
                          "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                        },
                        "status_id": {
                          "type": "string",
                          "description": "The user's status ID.",
                          "example": "1"
                        },
                        "sub_status_id": {
                          "type": "string",
                          "description": "The user&rsquo;s reason ID when the user status is `Not Ready`.",
                          "example": "21"
                        },
                        "user_access": {
                          "type": "string",
                          "description": "The user's access status. \n* `active` &mdash; The user's role permissions allow them to access the Contact Center. \n* `inactive` &mdash; The user cannot access the Contact Center.",
                          "example": "active",
                          "enum": [
                            "active",
                            "inactive"
                          ]
                        },
                        "country_iso_code": {
                          "type": "string",
                          "description": "Two-letter country [code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
                          "example": "US"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nUsers updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:write:admin",
              "contact_center:update:batch_users:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_user:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:batch_users:admin"
          ]
        }
      }
    },
    "/contact_center/users/batch": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Batch create user profiles",
        "description": "Batch create user profiles. \n\n \n\n**Scopes:** `contact_center_user:write:admin`\n\n**Granular Scopes:** `contact_center:write:batch_users:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "BatchCreateUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "type": "array",
                    "description": "Information about the users, the maximum number of created users is 20.",
                    "items": {
                      "required": [
                        "role_id"
                      ],
                      "type": "object",
                      "properties": {
                        "user_id": {
                          "type": "string",
                          "description": "The user's ID.",
                          "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                        },
                        "user_email": {
                          "type": "string",
                          "description": "The user's email address. \n\n**Note**: Either `user_email` or `user_id` needs to be provided. If both `user_email` and `user_id` are provided, only `user_email` will be used, while `user_id` will be ignored.",
                          "format": "email",
                          "example": "jchill@example.com"
                        },
                        "role_id": {
                          "type": "string",
                          "description": "The user's role ID.",
                          "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                        },
                        "country_iso_code": {
                          "type": "string",
                          "description": "The [ISO country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
                          "example": "US"
                        },
                        "client_integration": {
                          "type": "string",
                          "description": "The contact center's client integration. \n* `Default` \n* `Salesforce` \n* `Zendesk` \n* `ServiceNow` \n* `Microsoft_Dynamics_365`",
                          "example": "Salesforce",
                          "enum": [
                            "Default",
                            "Salesforce",
                            "Zendesk",
                            "ServiceNow",
                            "Microsoft_Dynamics_365"
                          ]
                        },
                        "client_integration_name": {
                          "type": "string",
                          "description": "The client integration connection name to be assigned to the user.",
                          "example": "integration-test"
                        },
                        "user_access": {
                          "type": "string",
                          "description": "The user's access status. \n* `active` - The user's role permissions allow them to access the Contact Center. \n* `inactive` - The user cannot access the Contact Center.",
                          "example": "active",
                          "enum": [
                            "active",
                            "inactive"
                          ]
                        },
                        "channel_settings": {
                          "type": "object",
                          "properties": {
                            "multi_channel_engagements": {
                              "type": "object",
                              "properties": {
                                "enable": {
                                  "type": "boolean",
                                  "description": "Whether to allow users to receive voice or video engagements while handling chat and SMS engagements, based on the `max_agent_load` value.",
                                  "example": true
                                },
                                "max_agent_load": {
                                  "maximum": 100,
                                  "minimum": 1,
                                  "type": "integer",
                                  "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                                  "example": 50
                                },
                                "email_max_agent_load": {
                                  "maximum": 100,
                                  "minimum": 1,
                                  "type": "integer",
                                  "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                                  "example": 50
                                }
                              },
                              "description": "Information about the setting's multi-channel engagements."
                            },
                            "concurrent_message_capacity": {
                              "maximum": 20,
                              "minimum": 0,
                              "type": "integer",
                              "description": "The maximum number of concurrent messaging conversations that can be assigned to a user.",
                              "example": 4
                            },
                            "concurrent_email_capacity": {
                              "maximum": 20,
                              "minimum": 0,
                              "type": "integer",
                              "description": "The maximum number of concurrent email conversations that can be assigned to a user.",
                              "example": 4
                            }
                          },
                          "description": "Information about the channel settings."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nUsers created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "description": "Information about the users.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "The user's ID.",
                            "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The user's name.",
                            "example": "Jill"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "The user's email address.",
                            "format": "email",
                            "example": "jchill@example.com"
                          },
                          "role_id": {
                            "type": "string",
                            "description": "The user's role ID.",
                            "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                          },
                          "role_name": {
                            "type": "string",
                            "description": "The user's role name.",
                            "example": "Admin"
                          },
                          "country_iso_code": {
                            "type": "string",
                            "description": "The [ISO country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
                            "example": "US"
                          },
                          "client_integration": {
                            "type": "string",
                            "description": "The contact center's client integration. \n* `Default` \n* `Salesforce` \n* `Zendesk` \n* `ServiceNow` \n* `Microsoft_Dynamics_365`",
                            "example": "Salesforce",
                            "enum": [
                              "Default",
                              "Salesforce",
                              "Zendesk",
                              "ServiceNow",
                              "Microsoft_Dynamics_365"
                            ]
                          },
                          "client_integration_name": {
                            "type": "string",
                            "description": "The client integration connection name to be assigned to the user.",
                            "example": "integration-test"
                          },
                          "status_id": {
                            "type": "string",
                            "description": "The user's availability status ID.",
                            "example": "1"
                          },
                          "status_name": {
                            "type": "string",
                            "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline \n* Ready \n* Not Ready \n* Occupied \n* A custom user status, such as &quot;Lunch&quot; or &quot;Away until Monday&quot;",
                            "example": "Offline",
                            "enum": [
                              "Offline",
                              "Ready",
                              "Not Ready",
                              "Occupied"
                            ]
                          },
                          "user_access": {
                            "type": "string",
                            "description": "The user's access status. \n* `active` - The user's role permissions allow them to access the Contact Center. \n* `inactive` - The user cannot access the Contact Center.",
                            "example": "active",
                            "enum": [
                              "active",
                              "inactive"
                            ]
                          },
                          "channel_settings": {
                            "type": "object",
                            "properties": {
                              "multi_channel_engagements": {
                                "type": "object",
                                "properties": {
                                  "enable": {
                                    "type": "boolean",
                                    "description": "Whether to allow users to receive voice or video engagements while handling chat and SMS engagements, based on the `max_agent_load` value.",
                                    "example": true
                                  },
                                  "max_agent_load": {
                                    "maximum": 100,
                                    "minimum": 1,
                                    "type": "integer",
                                    "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                                    "example": 50
                                  },
                                  "email_max_agent_load": {
                                    "maximum": 100,
                                    "minimum": 1,
                                    "type": "integer",
                                    "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                                    "example": 50
                                  }
                                },
                                "description": "Information about the setting's multi-channel engagements."
                              },
                              "concurrent_message_capacity": {
                                "maximum": 20,
                                "minimum": 0,
                                "type": "integer",
                                "description": "The maximum number of concurrent messaging conversations that can be assigned to a user.",
                                "example": 4
                              },
                              "concurrent_email_capacity": {
                                "maximum": 20,
                                "minimum": 0,
                                "type": "integer",
                                "description": "The maximum number of concurrent email conversations that can be assigned to a user.",
                                "example": 4
                              }
                            },
                            "description": "Information about the channel settings."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:write:admin",
              "contact_center:write:batch_users:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_user:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:batch_users:admin"
          ]
        }
      }
    },
    "/contact_center/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's profile",
        "description": "Retrieve a user's profile information.\n\n**Scopes:** `contact_center_user:read:admin`\n\n**Granular Scopes:** `contact_center:read:user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "userGet",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nUser profile returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "description": "The user's ID.",
                      "example": "IGTRVt3gQ2i-WjoUIjeZxw"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The user's name.",
                      "example": "Jill"
                    },
                    "user_email": {
                      "type": "string",
                      "description": "The user's email address.",
                      "format": "email",
                      "example": "jchill@example.com"
                    },
                    "role_id": {
                      "type": "string",
                      "description": "The user's role ID.",
                      "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                    },
                    "role_name": {
                      "type": "string",
                      "description": "The user's role name.",
                      "example": "Admin"
                    },
                    "client_integration": {
                      "type": "string",
                      "description": "The contact center's client integration. \n* `Default` \n* `Salesforce` \n* `Zendesk` \n* `ServiceNow` \n* `Microsoft_Dynamics_365`",
                      "example": "Salesforce",
                      "enum": [
                        "Default",
                        "Salesforce",
                        "Zendesk",
                        "ServiceNow",
                        "Microsoft_Dynamics_365"
                      ]
                    },
                    "client_integration_name": {
                      "type": "string",
                      "description": "The client integration connection name to be assigned to the user.",
                      "example": "integration-test"
                    },
                    "status_id": {
                      "type": "string",
                      "description": "The user's status ID.",
                      "example": "2"
                    },
                    "status_name": {
                      "type": "string",
                      "description": "The user's [availability status](https://support.zoom.us/hc/en-us/articles/4470584918541-Setting-availability-status). \n* Offline (ID = `0`) \n* Ready (ID = `1`) \n* Not Ready (ID = `2`) \n* Occupied (ID = `3`) \n* A custom user status (ID = `4`), such as &quot;Lunch&quot; or &quot;Away until Monday&quot;",
                      "example": "Not Ready",
                      "enum": [
                        "Offline",
                        "Ready",
                        "Not Ready",
                        "Occupied"
                      ]
                    },
                    "sub_status_id": {
                      "type": "string",
                      "description": "The user's reason ID when the user status is `Not Ready`.",
                      "example": "21"
                    },
                    "sub_status_name": {
                      "type": "string",
                      "description": "The user's reason when the user status is `Not Ready`.\n\n To query a list of default and custom `Not Ready` reasons, call [List System Statuses](https://developers.zoom.us/docs/contact-center/apis/#operation/listSystemStatus) (filter by `queue_opt_out_and_not_ready_status` status_category)\n\n Default `Not Ready` reasons:\n * Break (ID = `20`) \n* Meal (ID = `21`) \n* Training (ID = `22`) \n* Meeting (ID = `23`) \n* End Shift (ID = `24`) \n* Forced (ID = `25`) \n",
                      "example": "Meal",
                      "enum": [
                        "Break",
                        "End Shift",
                        "Forced",
                        "Meal",
                        "Meeting",
                        "Training"
                      ]
                    },
                    "user_access": {
                      "type": "string",
                      "description": "The user's access status. \n* `active` - The user's role permissions allow them to access the Contact Center. \n* `inactive` - The user cannot access the Contact Center.",
                      "example": "active",
                      "enum": [
                        "active",
                        "inactive"
                      ]
                    },
                    "country_iso_code": {
                      "type": "string",
                      "description": "Two-letter country [code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
                      "example": "US"
                    },
                    "region_id": {
                      "type": "string",
                      "description": "The user's region ID.",
                      "example": "8f71O6rWT8KFUGQmJIFAdQ"
                    },
                    "region_name": {
                      "type": "string",
                      "description": "The user's region name.",
                      "example": "Main Region"
                    },
                    "channel_settings": {
                      "type": "object",
                      "properties": {
                        "multi_channel_engagements": {
                          "type": "object",
                          "properties": {
                            "enable": {
                              "type": "boolean",
                              "description": "Whether to allow users to receive voice or video engagements while handling chat and SMS engagements, based on the `max_agent_load` value.",
                              "example": true
                            },
                            "max_agent_load": {
                              "maximum": 100,
                              "minimum": 1,
                              "type": "integer",
                              "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                              "example": 50
                            },
                            "email_max_agent_load": {
                              "maximum": 100,
                              "minimum": 1,
                              "type": "integer",
                              "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                              "example": 50
                            }
                          },
                          "description": "Information about the setting's multi-channel engagements."
                        },
                        "concurrent_message_capacity": {
                          "maximum": 20,
                          "minimum": 0,
                          "type": "integer",
                          "description": "The maximum number of concurrent messaging conversations that can be assigned to a user.",
                          "example": 4
                        },
                        "concurrent_email_capacity": {
                          "maximum": 20,
                          "minimum": 0,
                          "type": "integer",
                          "description": "The maximum number of concurrent email conversations that can be assigned to a user.",
                          "example": 4
                        }
                      },
                      "description": "Information about the channel settings."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `300` <br>\n Invalid user ID. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:read:admin",
              "contact_center:read:user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "docfix-DEVELOPERS-4829-LS",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_user:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:user:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user's profile",
        "description": "Delete the specified user's profile. \n\n \n\n**Scopes:** `contact_center_user:write:admin`\n\n**Granular Scopes:** `contact_center:delete:user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "userDelete",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nUser profile deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1001` <br>\nUser does not exist: $userId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:write:admin",
              "contact_center:delete:user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_user:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:user:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's profile",
        "description": "Update information in a user's profile.\n\n**Scopes:** `contact_center_user:write:admin`\n\n**Granular Scopes:** `contact_center:update:user:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "userUpdate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_integration": {
                    "type": "string",
                    "description": "The contact center's client integration. \n* `Default` \n* `Salesforce` \n* `Zendesk` \n* `ServiceNow` \n* `Microsoft_Dynamics_365`",
                    "example": "Salesforce",
                    "enum": [
                      "Default",
                      "Salesforce",
                      "Zendesk",
                      "ServiceNow",
                      "Microsoft_Dynamics_365"
                    ]
                  },
                  "client_integration_name": {
                    "type": "string",
                    "description": "The client integration connection name to be assigned to the user.",
                    "example": "integration-test"
                  },
                  "role_id": {
                    "type": "string",
                    "description": "The user's role ID.",
                    "example": "27302393-4784-11ec-a3cd-122e3e29bb87"
                  },
                  "status_id": {
                    "type": "string",
                    "description": "The user's status ID.",
                    "example": "1"
                  },
                  "sub_status_id": {
                    "type": "string",
                    "description": "The user's reason ID when the user status is `Not Ready`.",
                    "example": "21"
                  },
                  "user_access": {
                    "type": "string",
                    "description": "The user's access status. \n* `active` &mdash; The user's role permissions allow them to access the Contact Center. \n* `inactive` &mdash; The user cannot access the Contact Center.",
                    "example": "active",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  },
                  "country_iso_code": {
                    "type": "string",
                    "description": "Two-letter country [code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).",
                    "example": "US"
                  },
                  "region_id": {
                    "type": "string",
                    "description": "The region's ID.",
                    "example": "8f71O6rWT8KFUGQmJIFAdQ"
                  },
                  "channel_settings": {
                    "type": "object",
                    "properties": {
                      "multi_channel_engagements": {
                        "type": "object",
                        "properties": {
                          "enable": {
                            "type": "boolean",
                            "description": "Whether to allow users to receive voice or video engagements while handling chat and SMS engagements, based on the `max_agent_load` value.",
                            "example": true
                          },
                          "max_agent_load": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                            "example": 50
                          },
                          "email_max_agent_load": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "description": "If the `multi_channel_engagements` value is `true`, this is the maximum load percentage that a user needs to take in order to receive voice and video calls. This value is based on the engagements the user is currently handling.",
                            "example": 50
                          }
                        },
                        "description": "Information about the settings' multi-channel engagements."
                      },
                      "concurrent_message_capacity": {
                        "maximum": 20,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The maximum number of concurrent messaging conversations that can be assigned to a user.",
                        "example": 4
                      },
                      "concurrent_email_capacity": {
                        "maximum": 20,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The maximum number of concurrent email conversations that can be assigned to a user.",
                        "example": 4
                      }
                    },
                    "description": "Information about the channel settings."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` User profile updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `300` <br>\n Validation failed. <br>\n**Error Code:** `1001` <br>\n User does not exist: $userId. <br>\n**Error Code:** `1101` <br>\n Status does not exist: $status_id. <br>\n**Error Code:** `1102` <br>\n Sub status does not exist: $sub_status_id. <br>\n**Error Code:** `1006` <br>\n The account \"$client_integration\" client integration does not exist. Add it to the \"Integrations\" function module. <br>\n**Error Code:** `2201` <br>\n Role does not exist: $role_id. <br>\n**Error Code:** `2202` <br>\n Country ISO code does not exist: $country_iso_code. <br>\n**Error Code:** `1017` <br>\n Region does not exist. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:write:admin",
              "contact_center:update:user:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_user:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:user:admin"
          ]
        }
      }
    },
    "/contact_center/users/{userId}/queues": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List user's queues",
        "description": "List a user's queues. \n\n \n\n**Scopes:** `contact_center_user:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_user_queues:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "listUserQueues",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nUser list returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "queues": {
                      "type": "array",
                      "description": "Information about the task queues.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "queue_id": {
                            "type": "string",
                            "description": "The task queue's ID.",
                            "example": "Ql3qxUWXSHes4PmcOmzyOg",
                            "deprecated": true
                          },
                          "queue_name": {
                            "type": "string",
                            "description": "The task queue's name.",
                            "example": "queue_661c6e4b-89fc-4b0d-9978-c7394725462"
                          },
                          "cc_queue_id": {
                            "type": "string",
                            "description": "The Contact Center queue's ID.",
                            "example": "a4lCNeq2SzKbgkcDVbjCZQ"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_user:read:admin",
              "contact_center:read:list_user_queues:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 3.5.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_user:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_user_queues:admin"
          ]
        }
      }
    },
    "/contact_center/users/{userId}/skills": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List user's skills",
        "description": "Get a list of skills assigned to a given user. \n\n \n\n**Scopes:** `contact_center_skill:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_user_skills:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "ListAUserSkills",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          },
          {
            "name": "skill_category_id",
            "in": "query",
            "description": "The skill category's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Mu_IEZZHQZGMY9avK74kwA"
            }
          },
          {
            "name": "skill_type",
            "in": "query",
            "description": "The skill category's type.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The skill category's type. \n* 'text' &mdash; A text-based skill, such as a geographic location. Skills in this category do not have assigned skill levels. \n* 'proficiency' &mdash; A proficiency-based skill, such as a second language. Skills in this type of category have assigned proficiency levels.",
              "example": "text",
              "enum": [
                "text",
                "proficiency"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nUser's assigned skills returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "skills": {
                      "type": "array",
                      "description": "Information about the user's skills",
                      "items": {
                        "type": "object",
                        "properties": {
                          "skill_id": {
                            "type": "string",
                            "description": "The skill's ID.",
                            "example": "s51M536ZjSgi8o_rzmgQBrA"
                          },
                          "skill_name": {
                            "type": "string",
                            "description": "The skill's name.",
                            "example": "assign-skill6b6c864b-474a-4843-afed-81bd26b03952"
                          },
                          "skill_type": {
                            "type": "string",
                            "description": "The skill's type.",
                            "example": "proficiency"
                          },
                          "max_proficiency_level": {
                            "type": "integer",
                            "description": "The maximum proficiency level in a skill.",
                            "example": 5
                          },
                          "user_proficiency_level": {
                            "type": "integer",
                            "description": "A user's proficiency level in a skill.",
                            "example": 3
                          },
                          "skill_category_id": {
                            "type": "string",
                            "description": "The skill category's ID.",
                            "example": "s51M536ZjSgi8o_rzmgQBrA"
                          },
                          "skill_category_name": {
                            "type": "string",
                            "description": "The skill category's name.",
                            "example": "Language"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:read:admin",
              "contact_center:read:list_user_skills:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_user_skills:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Assign user's skills",
        "description": "Assign [skills](https://support.zoom.us/hc/en-us/articles/4423986613261) to a user. Skills are user traits that ensure that a given agent is the best person to handle a given customer interaction. Proficiency ratings indicate the user's level of expertise or knowledge of that skill. \n\n \n\n**Scopes:** `contact_center_skill:write:admin`\n\n**Granular Scopes:** `contact_center:write:user_skill:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "assignSkills",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "skills": {
                    "maxItems": 20,
                    "minItems": 1,
                    "type": "array",
                    "description": "Information about the skills.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "skill_id": {
                          "type": "string",
                          "description": "The skill ID.",
                          "example": "1"
                        },
                        "max_proficiency_level": {
                          "type": "integer",
                          "description": "The skill's assigned proficiency level.",
                          "example": 5
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nSkills assigned."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "401": {
            "description": "**HTTP Status Code:** `401` <br>\n Unauthorized\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:write:admin",
              "contact_center:write:user_skill:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:user_skill:admin"
          ]
        }
      }
    },
    "/contact_center/users/{userId}/skills/{skillId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Unassign user's skill",
        "description": "Delete a skill assigned to a given user. \n\n \n\n**Scopes:** `contact_center_skill:write:admin`\n\n**Granular Scopes:** `contact_center:delete:user_skill:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteASkill",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IGTRVt3gQ2i-WjoUIjeZxw"
            }
          },
          {
            "name": "skillId",
            "in": "path",
            "description": "The skill's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "saaHWgVMGQU69soco456oNA"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204 `  \n \nSkill deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `1401` <br>\nSkill does not exist: $skillId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_skill:write:admin",
              "contact_center:delete:user_skill:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_skill:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:user_skill:admin"
          ]
        }
      }
    },
    "/contact_center/variable_logs": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "List variable logs",
        "description": "Return a list of variable logs.\n\n \n\n**Scopes:** `contact_center_variable_log:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_variable_logs:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`",
        "operationId": "listVariableLogs",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start time and date in yyyy-mm-dd or ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss&rsquo;TZD&rsquo;). The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "**Required** only when the `from` parameter is specified. The end time and date in yyyy-mm-dd or ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss&rsquo;TZD&rsquo;).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-12-10"
            }
          },
          {
            "name": "group_type",
            "in": "query",
            "description": "The variable group's type.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "system",
              "enum": [
                "system",
                "custom"
              ]
            }
          },
          {
            "name": "data_type",
            "in": "query",
            "description": "The variable data's type.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "boolean",
              "enum": [
                "boolean",
                "currency",
                "date",
                "email",
                "number",
                "percent",
                "phone",
                "string",
                "time",
                "url"
              ]
            }
          },
          {
            "name": "engagement_id",
            "in": "query",
            "description": "The engagement's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "3XilEfOvQEKRIWMWhX1jDg"
            }
          },
          {
            "name": "flow_id",
            "in": "query",
            "description": "The flow's ID.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "zeYjXoDOS_eV1QmTpj63PQ"
            }
          },
          {
            "name": "widget_name",
            "in": "query",
            "description": "The widget's name.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "HttpCall1"
            }
          },
          {
            "name": "variable_name",
            "in": "query",
            "description": "The variable's name.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "body"
            }
          },
          {
            "name": "variable_value",
            "in": "query",
            "description": "The variable's value.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "demo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nVariable logs returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 100,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 10,
                      "default": 10
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "from": {
                      "type": "string",
                      "description": "The start time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD'. The defined date range should be a month, as the response only includes one month's worth of data. If no start date is specified, return data from the past 24 hours.",
                      "format": "date-time",
                      "example": "2021-12-10T08:00:00Z"
                    },
                    "to": {
                      "type": "string",
                      "description": "**Required** only when the `from` parameter is specified. The end time and date in ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss'Z', or yyyy-MM-dd'T'HH:mm:ss'TZD', the same format as the `from` parameter.",
                      "format": "date-time",
                      "example": "2021-12-10T08:15:00Z"
                    },
                    "variable_logs": {
                      "type": "array",
                      "description": "Information about the variable logs.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "variable_log_id": {
                            "type": "string",
                            "description": "The variable log's ID",
                            "example": "ebe83be-3579-4dc9-8e6e-67dd65a010fe"
                          },
                          "engagement_id": {
                            "type": "string",
                            "description": "The engagement's ID",
                            "example": "3XilEfOvQEKRIWMWhX1jDg"
                          },
                          "flow_id": {
                            "type": "string",
                            "description": "The flow's ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "flow_name": {
                            "type": "string",
                            "description": "The flow's name.",
                            "example": "Demo"
                          },
                          "widget_name": {
                            "type": "string",
                            "description": "The widget's name.",
                            "example": "HttpCall1"
                          },
                          "variable_name": {
                            "type": "string",
                            "description": "The variable's name.",
                            "example": "body"
                          },
                          "variable_value": {
                            "type": "string",
                            "description": "The variable's value.",
                            "example": "demo"
                          },
                          "group_type": {
                            "type": "string",
                            "description": "The variable group's type. The type can be either system or custom.",
                            "example": "system",
                            "enum": [
                              "system",
                              "custom"
                            ]
                          },
                          "data_type": {
                            "type": "string",
                            "description": "The variable data's type.",
                            "example": "boolean",
                            "enum": [
                              "boolean",
                              "currency",
                              "date",
                              "email",
                              "number",
                              "percent",
                              "phone",
                              "string",
                              "time",
                              "url"
                            ]
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Time of creation in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss&rsquo;TZD&rsquo;).",
                            "format": "date-time",
                            "example": "2023-01-01T08:00:00Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `2901` <br>\nEngagement  does not exist: $engagementId.\n\n**Error Code:** `3201` <br>\nFlow does not exist: $flowId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable_log:read:admin",
              "contact_center:read:list_variable_logs:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_variable_log:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_variable_logs:admin"
          ]
        }
      }
    },
    "/contact_center/variable_logs/{variableLogId}": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get a variable log",
        "description": "Get information about a variable log.\n\n \n\n**Scopes:** `contact_center_variable_log:read:admin`\n\n**Granular Scopes:** `contact_center:read:variable_log:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getVariableLog",
        "parameters": [
          {
            "name": "variableLogId",
            "in": "path",
            "description": "The variable log's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nVariable log returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "variable_log_id": {
                      "type": "string",
                      "description": "The variable log's ID",
                      "example": "ebe83be-3579-4dc9-8e6e-67dd65a010fe"
                    },
                    "engagement_id": {
                      "type": "string",
                      "description": "The engagement's ID",
                      "example": "3XilEfOvQEKRIWMWhX1jDg"
                    },
                    "flow_id": {
                      "type": "string",
                      "description": "The flow's ID.",
                      "example": "zeYjXoDOS_eV1QmTpj63PQ"
                    },
                    "flow_name": {
                      "type": "string",
                      "description": "The flow's name.",
                      "example": "Demo"
                    },
                    "widget_name": {
                      "type": "string",
                      "description": "The widget's name.",
                      "example": "HttpCall1"
                    },
                    "variable_name": {
                      "type": "string",
                      "description": "The variable's name.",
                      "example": "body"
                    },
                    "variable_value": {
                      "type": "string",
                      "description": "The variable's value.",
                      "example": "demo"
                    },
                    "group_type": {
                      "type": "string",
                      "description": "The variable group's type. The type can be either system or custom.",
                      "example": "system",
                      "enum": [
                        "system",
                        "custom"
                      ]
                    },
                    "data_type": {
                      "type": "string",
                      "description": "The variable data's type.",
                      "example": "boolean",
                      "enum": [
                        "boolean",
                        "currency",
                        "date",
                        "email",
                        "number",
                        "percent",
                        "phone",
                        "string",
                        "time",
                        "url"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Time of creation in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z' or yyyy-MM-dd'T'HH:mm:ss&rsquo;TZD&rsquo;).",
                      "format": "date-time",
                      "example": "2023-01-01T08:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3301` <br>\nVariable log does not exist: $variableLogId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable_log:read:admin",
              "contact_center:read:variable_log:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_variable_log:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:variable_log:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Variables"
        ],
        "summary": "Delete a variable log",
        "description": "Delete a variable log. \n\n \n\n**Scopes:** `contact_center_variable_log:write:admin`\n\n**Granular Scopes:** `contact_center:delete:variable_log:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "deleteVariableLog",
        "parameters": [
          {
            "name": "variableLogId",
            "in": "path",
            "description": "The variable log's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nVariable log deleted."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3301` <br>\nVariable log does not exist: $variableLogId\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable_log:write:admin",
              "contact_center:delete:variable_log:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.5.0",
          "x-permissions": [
            "VecVariablesLogDelete:Edit"
          ],
          "x-macro-scopes": [
            "contact_center_variable_log:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:variable_log:admin"
          ]
        }
      }
    },
    "/contact_center/variables": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "List variables",
        "description": "Returns a list of variables for a specific variable group. \n\n \n\n**Scopes:** `contact_center_variable:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_variables:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "variables",
        "parameters": [
          {
            "name": "variable_group_id",
            "in": "query",
            "description": "The variable's group ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "35216bdf-e1d5-4a78-bf58-03cef264a643"
            }
          },
          {
            "name": "data_type",
            "in": "query",
            "description": "The data's type. \n* `string` \n* `number` \n* `boolean` \n* `date_time` \n* `currency` \n* `percentage` \n* `email` \n* `url` \n* `phone` - ([E.164 format](https://en.wikipedia.org/wiki/E.164))",
            "required": false,
            "schema": {
              "type": "string",
              "example": "boolean",
              "enum": [
                "string",
                "number",
                "boolean",
                "date_time",
                "currency",
                "percentage",
                "email",
                "url",
                "phone"
              ]
            }
          },
          {
            "name": "variable_type",
            "in": "query",
            "description": "The variable's type. \n* `global_variable` \n* `address_book_variable`",
            "required": false,
            "schema": {
              "type": "string",
              "example": "global_variable",
              "enum": [
                "global_variable",
                "address_book_variable"
              ]
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nVariables list returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned in a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "variables": {
                      "type": "array",
                      "description": "Information about the variables.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "variable_id": {
                            "type": "string",
                            "description": "The variable's unique ID.",
                            "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                          },
                          "variable_group_id": {
                            "type": "string",
                            "description": "The variable group's ID.",
                            "example": "afececcd-0c9f-48de-9d19-0c84e8bdfeca"
                          },
                          "variable_name": {
                            "type": "string",
                            "description": "The variable's name.",
                            "example": "variable demo name"
                          },
                          "default_value": {
                            "type": "string",
                            "description": "The variable's default value.",
                            "example": "test_value"
                          },
                          "variable_type": {
                            "type": "string",
                            "description": "The variable's type. \n* `global_variable` \n* `address_book_variable`",
                            "example": "address_book_variable.",
                            "enum": [
                              "global_variable",
                              "address_book_variable"
                            ]
                          },
                          "data_type": {
                            "type": "string",
                            "description": "The data's type. \n* `string` \n* `number` \n* `boolean` \n* `date_time` \n* `currency` \n* `percentage` \n* `email` \n* `url` \n* `phone`",
                            "example": "string",
                            "enum": [
                              "string",
                              "number",
                              "boolean",
                              "date_time",
                              "currency",
                              "percentage",
                              "email",
                              "url",
                              "phone"
                            ]
                          },
                          "variable_description": {
                            "type": "string",
                            "description": "The variable's description.",
                            "example": "This is a variable description"
                          },
                          "mask_variable_data": {
                            "type": "boolean",
                            "description": "Mask variable data, for sensitive information.",
                            "example": true,
                            "default": false
                          },
                          "values": {
                            "type": "array",
                            "description": "The variable's values.",
                            "items": {
                              "type": "string",
                              "example": "test_value"
                            }
                          },
                          "value_category": {
                            "type": "string",
                            "description": "The variable value's category. Returned only if `variable_type:global_variable` \n* `undefined` &mdash; Each engagement starts without a pre-set value. \n* `default_value` &mdash; Each engagement starts with the default value. \n* `linked_value` &mdash; The value links across flows, and each engagement uses the latest value.",
                            "example": "default_value"
                          },
                          "used_in_address_book_count": {
                            "type": "integer",
                            "description": "The number of times the address book used the variable.",
                            "example": 3
                          }
                        },
                        "description": "Information about the variable."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:read:admin",
              "contact_center:read:list_variables:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_variable:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_variables:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Variables"
        ],
        "summary": "Create a variable",
        "description": "Create a new variable.\n\n**Scopes:** `contact_center_variable:write:admin`\n\n**Granular Scopes:** `contact_center:write:variable:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createVariable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data_type",
                  "variable_group_id",
                  "variable_name",
                  "variable_type"
                ],
                "type": "object",
                "properties": {
                  "variable_group_id": {
                    "type": "string",
                    "description": "The variable group's ID.",
                    "example": "afececcd-0c9f-48de-9d19-0c84e8bdfeca"
                  },
                  "variable_name": {
                    "maxLength": 30,
                    "type": "string",
                    "description": "The variable's name.",
                    "example": "variable demo name"
                  },
                  "variable_description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "The variable's description.",
                    "example": "This is a variable description."
                  },
                  "variable_type": {
                    "type": "string",
                    "description": "The variable's type. \n* `global_variable` \n* `address_book_variable`",
                    "example": "address_book_variable.",
                    "enum": [
                      "global_variable",
                      "address_book_variable"
                    ]
                  },
                  "address_book_ids": {
                    "type": "array",
                    "description": "The address book IDs. Only valid when `variable_type` is `address_book_variable`, and cannot be empty.",
                    "items": {
                      "type": "string",
                      "example": "X2e_jsLNRkCjI0sQg2kRQQ"
                    }
                  },
                  "use_in_reporting": {
                    "type": "boolean",
                    "description": "Whether to use in reporting. Only valid when `variable_type` is `global_variable`.",
                    "example": false,
                    "default": false
                  },
                  "mask_variable_data": {
                    "type": "boolean",
                    "description": "Mask variable data, for sensitive information. Only valid when `variable_type` is `global_variable` and the value of data_type is not `boolean`, `date_time`, or `percentage`.",
                    "example": false,
                    "default": false
                  },
                  "use_as_routing_profile_parameters": {
                    "type": "boolean",
                    "description": "Whether to use in the routing profile. Only valid when `variable_type` is `address_book_variable`. \n* `true` &mdash; Values are used as routing profile parameters.\n* `false` &mdash; Not used as a value for routing configuration file parameters.",
                    "example": false,
                    "default": false
                  },
                  "data_type": {
                    "type": "string",
                    "description": "The data's type. `variable_type:address_book_variable` only applies to data types with `*`. \n* `string` `*` \n* `number` \n* `boolean` `*` \n* `date_time` \n* `currency` \n* `percentage` \n* `email` \n* `url` \n* `phone` - ([E.164 format](https://en.wikipedia.org/wiki/E.164))",
                    "example": "number",
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time",
                      "currency",
                      "percentage",
                      "email",
                      "url",
                      "phone"
                    ]
                  },
                  "value_category": {
                    "type": "string",
                    "description": " \n The variable value's category. Only valid when `variable_type` is `global_variable`.\n* `undefined` &mdash; Each engagement starts without a pre-set value. \n* `default_value` &mdash; Each engagement starts with the default value. \n* `linked_value` &mdash; The value links across flows, and each engagement uses the latest value.",
                    "example": "default_value"
                  },
                  "values": {
                    "maximum": 20,
                    "type": "array",
                    "description": "The variable's values. Take only the first value in the array when `variable_type` is `global_variable`.",
                    "items": {
                      "maxLength": 300,
                      "type": "string",
                      "example": "test-value"
                    }
                  },
                  "linked_value_lock": {
                    "type": "boolean",
                    "description": "The variable linked value's lock. Only valid when `value_category` is `linked_value`. \n* `true` &mdash; The variable can't be updated in a flow. It is the same for each engagement. \n* `false` &mdash; The variable value can be updated in a flow. Each engagement uses the latest value.",
                    "example": false,
                    "default": false
                  },
                  "default_value": {
                    "maxLength": 300,
                    "type": "string",
                    "description": "The variable's default value. Only used when `variable_type` is `address_book_variable` and `data_type` is `string`.",
                    "example": "test-value"
                  },
                  "use_in_external_url_parameters": {
                    "type": "boolean",
                    "description": "Lets you use the parameter value in defining external URLs launched for each engagement. \r\n\r\n* global\r\n* address book",
                    "example": true
                  },
                  "client_show_in_client_profile_section": {
                    "type": "boolean",
                    "description": "Whether this variable will be shown in the Zoom client's Profile section.\r\n* global",
                    "example": true
                  },
                  "client_show_in_client_engagement_section": {
                    "type": "boolean",
                    "description": "Whether this variable will be shown in the Zoom client's Engagement section.\r\n* global",
                    "example": true
                  },
                  "client_show_in_inbound_call_notifications": {
                    "type": "boolean",
                    "description": "Whether this variable will be shown as an inbound call notification on the Zoom client.\r\n* global\r\n* address book",
                    "example": true
                  }
                },
                "description": "Information about the variable."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   \n \nVariable created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "variable_id": {
                      "type": "string",
                      "description": "The variable's unique ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "variable_group_id": {
                      "type": "string",
                      "description": "The variable group's ID.",
                      "example": "afececcd-0c9f-48de-9d19-0c84e8bdfeca"
                    },
                    "variable_name": {
                      "type": "string",
                      "description": "The variable's name.",
                      "example": "variable demo name"
                    },
                    "variable_description": {
                      "type": "string",
                      "description": "The variable's description.",
                      "example": "This is a variable description"
                    },
                    "variable_type": {
                      "type": "string",
                      "description": "The variable's type. \n* `global_variable` \n* `address_book_variable`",
                      "example": "global_variable.",
                      "enum": [
                        "global_variable",
                        "address_book_variable"
                      ]
                    },
                    "address_books": {
                      "type": "array",
                      "description": "The address book list. This field is only returned when `variable_type` is `address_book_variable`.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address_book_id": {
                            "type": "string",
                            "description": "The address book's ID.",
                            "example": "X2e_jsLNRkCjI0sQg2kRQQ"
                          },
                          "address_book_name": {
                            "type": "string",
                            "description": "The address book's name.",
                            "example": "Jill's address book"
                          },
                          "unit_id": {
                            "type": "string",
                            "description": "The address book's unit ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "unit_name": {
                            "type": "string",
                            "description": "The address book unit's name.",
                            "example": "Address Book Unit"
                          },
                          "total_contacts": {
                            "type": "integer",
                            "description": "The address book's total number of contacts.",
                            "example": 3
                          }
                        }
                      }
                    },
                    "use_in_reporting": {
                      "type": "boolean",
                      "description": "Whether to use in reporting.",
                      "example": false,
                      "default": false
                    },
                    "mask_variable_data": {
                      "type": "boolean",
                      "description": "Mask variable data, for sensitive information.",
                      "example": true,
                      "default": false
                    },
                    "use_as_routing_profile_parameters": {
                      "type": "boolean",
                      "description": "Whether to use in the routing profile. \n* `true` &mdash; Values used as routing profile parameters.\n* `false` &mdash; Not used as a value for routing configuration file parameters.",
                      "example": false,
                      "default": false
                    },
                    "data_type": {
                      "type": "string",
                      "description": "The data's type. \n* `string` \n* `number` \n* `boolean` \n* `date_time` \n* `currency` \n* `percentage` \n* `email` \n* `url` \n* `phone`",
                      "example": "number",
                      "enum": [
                        "string",
                        "number",
                        "boolean",
                        "date_time",
                        "currency",
                        "percentage",
                        "email",
                        "url",
                        "phone"
                      ]
                    },
                    "value_category": {
                      "type": "string",
                      "description": "The variable value's category. Returned only if `variable_type` is `global_variable`. \n* `undefined` &mdash; Each engagement starts without a pre-set value. \n* `default_value` &mdash; Each engagement starts with the default value. \n* `linked_value` &mdash; The value links across flows, and each engagement uses the latest value.",
                      "example": "default_value"
                    },
                    "values": {
                      "type": "array",
                      "description": "The variable's values.",
                      "items": {
                        "type": "string",
                        "example": "X2e_jsLNRkCjI0sQg2kRQQ"
                      }
                    },
                    "linked_value_lock": {
                      "type": "boolean",
                      "description": "The variable linked value's lock. \n* `true` &mdash; The variable can't be updated in a flow. It is the same for each engagement. \n* `false` &mdash; the variable value can be updated in a flow. Each engagement will use the latest value.",
                      "example": false,
                      "default": false
                    },
                    "default_value": {
                      "type": "string",
                      "description": "The variable's default value.",
                      "example": "test-value"
                    },
                    "use_in_external_url_parameters": {
                      "type": "boolean",
                      "description": "Lets you use the parameter value in defining external URLs launched for each engagement. \r\n\r\n* global\r\n* address book",
                      "example": true
                    },
                    "client_show_in_client_profile_section": {
                      "type": "boolean",
                      "description": "Whether this variable will be shown in the Zoom client's Profile section.\r\n* global",
                      "example": true
                    },
                    "client_show_in_client_engagement_section": {
                      "type": "boolean",
                      "description": "Whether this variable will be shown in the Zoom client's Engagement section.\r\n* global",
                      "example": true
                    },
                    "client_show_in_inbound_call_notifications": {
                      "type": "boolean",
                      "description": "Whether this variable will be shown as an inbound call notification on the Zoom client.\r\n* global\r\n* address book",
                      "example": true
                    }
                  },
                  "description": "Information about the variable."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3402` <br>\n The \"address_book_ids\" field cannot be empty. <br>\n**Error Code:** `3403` <br>\n The variable already exists in the current custom group: $variable_name. <br>\n**Error Code:** `3404` <br>\n The \"values\" does not match \"data_type\". <br>\n**Error Code:** `3405` <br>\n Invalid date format. <br>\n**Error Code:** `3406` <br>\n This \"data_type\":$data_type is not supported when \"variable_type\" is $variable_type. <br>\n**Error Code:** `3407` <br>\n The \"values\" field cannot be empty. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `3301` <br>\n Variable group does not exist: $group_id. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:write:admin",
              "contact_center:write:variable:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_variable:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:variable:admin"
          ]
        }
      }
    },
    "/contact_center/variables/groups": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "List variable groups",
        "description": "Use thi API to return a list of variable groups.\n\n \n\n**Scopes:** `contact_center_variable:read:admin`\n\n**Granular Scopes:** `contact_center:read:list_variable_groups:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`",
        "operationId": "listVariableGroups",
        "parameters": [
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through large result sets. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items returned per page.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "variable_group_type",
            "in": "query",
            "description": "The variable group's type.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "system",
              "enum": [
                "system",
                "custom"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nVariable groups returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42"
                    },
                    "page_size": {
                      "maximum": 300,
                      "type": "integer",
                      "description": "The number of records returned within a single API call.",
                      "example": 30,
                      "default": 30
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of all the records available across pages.",
                      "example": 1
                    },
                    "variable_groups": {
                      "type": "array",
                      "description": "Information about the variable groups.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "variable_group_id": {
                            "type": "string",
                            "description": "The variable group's ID.",
                            "example": "71ec9348-27db-4fe6-81b9-5b8637ca299b"
                          },
                          "variable_group_name": {
                            "type": "string",
                            "description": "The variable group's name.",
                            "example": "Agent"
                          },
                          "variable_group_description": {
                            "type": "string",
                            "description": "The variable group's description.",
                            "example": "Agent's first custom group."
                          },
                          "variable_group_type": {
                            "type": "string",
                            "description": "The variable group's type. The type can be either system or custom.",
                            "example": "system",
                            "enum": [
                              "system",
                              "custom"
                            ]
                          },
                          "variable_group_variables_count": {
                            "type": "integer",
                            "description": "The number of the variables in the group.",
                            "example": 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:read:admin",
              "contact_center:read:list_variable_groups:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_variable:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:list_variable_groups:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Variables"
        ],
        "summary": "Create a variable group",
        "description": "Create a custom variable group. \n\n \n\n**Scopes:** `contact_center_variable:write:admin`\n\n**Granular Scopes:** `contact_center:write:variable_group:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "createVariableGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variable_group_name": {
                    "type": "string",
                    "description": "The variable group's name.",
                    "example": "us.group"
                  },
                  "variable_group_description": {
                    "type": "string",
                    "description": "The variable group's description.",
                    "example": "The first custom group."
                  },
                  "variable_group_type": {
                    "type": "string",
                    "description": "The variable group's type. The type can only be custom.",
                    "example": "custom",
                    "default": "custom",
                    "enum": [
                      "custom"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "variable_group_id": {
                      "type": "string",
                      "description": "The variable group's ID.",
                      "example": "71ec9348-27db-4fe6-81b9-5b8637ca299b"
                    },
                    "variable_group_name": {
                      "type": "string",
                      "description": "The variable group's name.",
                      "example": "us.group"
                    },
                    "variable_group_description": {
                      "type": "string",
                      "description": "The variable group's description.",
                      "example": "The first custom group."
                    },
                    "variable_group_type": {
                      "type": "string",
                      "description": "The variable group's type. The type can only be custom.",
                      "example": "custom",
                      "default": "custom",
                      "enum": [
                        "custom"
                      ]
                    },
                    "variable_group_variables_count": {
                      "type": "integer",
                      "description": "The number of variables in the created group.",
                      "example": 0,
                      "default": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `3415` <br>\nThe number of variable groups has reached the maximum.\n\n**Error Code:** `3416` <br>\nThe variable group already exists.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:write:admin",
              "contact_center:write:variable_group:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_variable:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:write:variable_group:admin"
          ]
        }
      }
    },
    "/contact_center/variables/groups/{variableGroupId}": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get a variable group",
        "description": "Get information about a variable group.\n\n \n\n**Scopes:** `contact_center_variable:read:admin`\n\n**Granular Scopes:** `contact_center:read:variable_group:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "getAVariableGroup",
        "parameters": [
          {
            "name": "variableGroupId",
            "in": "path",
            "description": "The variable group's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "71ec9348-27db-4fe6-81b9-5b8637ca299b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nVariable group returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "variable_group_id": {
                      "type": "string",
                      "description": "The variable group's ID.",
                      "example": "71ec9348-27db-4fe6-81b9-5b8637ca299b"
                    },
                    "variable_group_name": {
                      "type": "string",
                      "description": "The variable group's name.",
                      "example": "Agent"
                    },
                    "variable_group_description": {
                      "type": "string",
                      "description": "The variable group's description.",
                      "example": "Agent's first custom group."
                    },
                    "variable_group_type": {
                      "type": "string",
                      "description": "The variable group's type. The type can be either system or custom.",
                      "example": "system",
                      "enum": [
                        "system",
                        "custom"
                      ]
                    },
                    "variable_group_variables_count": {
                      "type": "integer",
                      "description": "The number of the variables in the group.",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3409` <br>\nVariable group does not exist.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:read:admin",
              "contact_center:read:variable_group:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_variable:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:variable_group:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Variables"
        ],
        "summary": "Delete a variable group",
        "description": "Delete a specified variable group. \n\n \n\n**Scopes:** `contact_center_variable:write:admin`\n\n**Granular Scopes:** `contact_center:delete:variable_group:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "DeleteGroup",
        "parameters": [
          {
            "name": "variableGroupId",
            "in": "path",
            "description": "The variable group's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "71ec9348-27db-4fe6-81b9-5b8637ca299b"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nVariable group deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `300` <br>\nInvalid variable group type: only Custom group can be deleted/updated.\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3409` <br>\nVariable group does not exist.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:write:admin",
              "contact_center:delete:variable_group:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_variable:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:variable_group:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Variables"
        ],
        "summary": "Update a variable group",
        "description": "Update a variable group. \n\n \n\n**Scopes:** `contact_center_variable:write:admin`\n\n**Granular Scopes:** `contact_center:update:variable_group:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "updateVariableGroup",
        "parameters": [
          {
            "name": "variableGroupId",
            "in": "path",
            "description": "The variable group's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "71ec9348-27db-4fe6-81b9-5b8637ca299b"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variable_group_name": {
                    "type": "string",
                    "description": "The variable group's name.",
                    "example": "us.group.dev"
                  },
                  "variable_group_description": {
                    "type": "string",
                    "description": "The variable group's description.",
                    "example": "Update this group."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nVariable group updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n**Error Code:** `3416` <br>\nThe variable group already exists.\n\n**Error Code:** `300` <br>\nInvalid variable group type: only Custom group can be deleted/updated.\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3409` <br>\nVariable group does not exist.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:write:admin",
              "contact_center:update:variable_group:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-macro-scopes": [
            "contact_center_variable:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:variable_group:admin"
          ]
        }
      }
    },
    "/contact_center/variables/{variableId}": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get a variable",
        "description": "Retrieve a variable. \n\n \n\n**Scopes:** `contact_center_variable:read:admin`\n\n**Granular Scopes:** `contact_center:read:variable:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "variableGet",
        "parameters": [
          {
            "name": "variableId",
            "in": "path",
            "description": "The variable's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "a0afcf93-4ff6-4e22-8217-69b7a5862b6f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   \n \nVariable returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "variable_id": {
                      "type": "string",
                      "description": "The variable's unique ID.",
                      "example": "W_VATTk_Q5aW6z5rZtBxAQ"
                    },
                    "variable_group_id": {
                      "type": "string",
                      "description": "The variable group's ID.",
                      "example": "afececcd-0c9f-48de-9d19-0c84e8bdfeca"
                    },
                    "variable_name": {
                      "type": "string",
                      "description": "The variable's name.",
                      "example": "variable demo name"
                    },
                    "variable_description": {
                      "type": "string",
                      "description": "The variable's description.",
                      "example": "This is a variable description"
                    },
                    "variable_type": {
                      "type": "string",
                      "description": "The variable's type. \n* `global_variable` \n* `address_book_variable`",
                      "example": "global_variable.",
                      "enum": [
                        "global_variable",
                        "address_book_variable"
                      ]
                    },
                    "address_books": {
                      "type": "array",
                      "description": "The address book list. This field is only returned when `variable_type:address_book_variable`.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address_book_id": {
                            "type": "string",
                            "description": "The address book's ID.",
                            "example": "X2e_jsLNRkCjI0sQg2kRQQ"
                          },
                          "address_book_name": {
                            "type": "string",
                            "description": "The address book's name.",
                            "example": "Jill's address book"
                          },
                          "unit_id": {
                            "type": "string",
                            "description": "The address book's unit ID.",
                            "example": "zeYjXoDOS_eV1QmTpj63PQ"
                          },
                          "unit_name": {
                            "type": "string",
                            "description": "The address book unit's name.",
                            "example": "Address Book Unit"
                          },
                          "total_contacts": {
                            "type": "integer",
                            "description": "The address book's total number of contacts.",
                            "example": 3
                          }
                        }
                      }
                    },
                    "use_in_reporting": {
                      "type": "boolean",
                      "description": "Whether to use in reporting.",
                      "example": false,
                      "default": false
                    },
                    "mask_variable_data": {
                      "type": "boolean",
                      "description": "Mask variable data, for sensitive information.",
                      "example": true,
                      "default": false
                    },
                    "use_as_routing_profile_parameters": {
                      "type": "boolean",
                      "description": "Whether to use in routing profile. \n* `true` &mdash; Values used as routing profile parameters.\n* `false` &mdash; Not used as a value for routing configuration file parameters.",
                      "example": false,
                      "default": false
                    },
                    "data_type": {
                      "type": "string",
                      "description": "The data's type. \n* `string` \n* `number` \n* `boolean` \n* `date_time` \n* `currency` \n* `percentage` \n* `email` \n* `url` \n* `phone`",
                      "example": "number",
                      "enum": [
                        "string",
                        "number",
                        "boolean",
                        "date_time",
                        "currency",
                        "percentage",
                        "email",
                        "url",
                        "phone"
                      ]
                    },
                    "value_category": {
                      "type": "string",
                      "description": "The variable value's category. Returned only if `variable_type:global_variable`. \n* `undefined` &mdash; Each engagement starts without a pre-set value. \n* `default_value` &mdash; Each engagement starts with the default value. \n* `linked_value` &mdash; The value links across flows, and each engagement uses the latest value.",
                      "example": "default_value"
                    },
                    "values": {
                      "type": "array",
                      "description": "The variable's values.",
                      "items": {
                        "type": "string",
                        "example": "X2e_jsLNRkCjI0sQg2kRQQ"
                      }
                    },
                    "linked_value_lock": {
                      "type": "boolean",
                      "description": "The variable linked value's lock. \n* `true` &mdash; The variable cannot be updated in a flow. it will be the same for each engagement. \n* `false` &mdash; the variable value can be updated in a flow. each engagement will use the latest value.",
                      "example": false,
                      "default": false
                    },
                    "default_value": {
                      "type": "string",
                      "description": "The variable's default value.",
                      "example": "test-value"
                    },
                    "use_in_external_url_parameters": {
                      "type": "boolean",
                      "description": "Lets you use the parameter value in defining external URLs launched for each engagement. Variable types: global, address book",
                      "example": true
                    },
                    "client_show_in_client_profile_section": {
                      "type": "boolean",
                      "description": "Whether this variable will be shown in the Zoom client's Profile section. Variable types: global",
                      "example": true
                    },
                    "client_show_in_client_engagement_section": {
                      "type": "boolean",
                      "description": "Whether this variable will be shown in the Zoom client's Engagement section. Variable types: global",
                      "example": true
                    },
                    "client_show_in_inbound_call_notifications": {
                      "type": "boolean",
                      "description": "Whether this variable will be shown as an inbound call notification on the Zoom client. Variable types: global, address book",
                      "example": true
                    }
                  },
                  "description": "Information about the variable."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `3401` <br>\n Variable does not exist: $variableId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:read:admin",
              "contact_center:read:variable:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_variable:read:admin"
          ],
          "x-granular-scopes": [
            "contact_center:read:variable:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Variables"
        ],
        "summary": "Delete a variable",
        "description": "Delete a variable. \n\n \n\n**Scopes:** `contact_center_variable:write:admin`\n\n**Granular Scopes:** `contact_center:delete:variable:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`",
        "operationId": "variableDelete",
        "parameters": [
          {
            "name": "variableId",
            "in": "path",
            "description": "The variable's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "a0afcf93-4ff6-4e22-8217-69b7a5862b6f"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nVariable deleted."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request\n\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found\n\n**Error Code:** `3401` <br>\nVariable does not exist: $variableId.\n\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:write:admin",
              "contact_center:delete:variable:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "InitFixVersion",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_variable:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:delete:variable:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Variables"
        ],
        "summary": "Update a variable",
        "description": "Update a variable. \n\n \n\n**Scopes:** `contact_center_variable:write:admin`\n\n**Granular Scopes:** `contact_center:update:variable:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "variableUpdate",
        "parameters": [
          {
            "name": "variableId",
            "in": "path",
            "description": "The variable's ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "a0afcf93-4ff6-4e22-8217-69b7a5862b6f"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variable_name": {
                    "maxLength": 30,
                    "type": "string",
                    "description": "The variable's name.",
                    "example": "variable demo name"
                  },
                  "variable_description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "The variable's description.",
                    "example": "This is a variable description"
                  },
                  "address_book_ids": {
                    "type": "array",
                    "description": "The address book IDs. Only valid when `variable_type:address_book_variable`.",
                    "items": {
                      "type": "string",
                      "example": "X2e_jsLNRkCjI0sQg2kRQQ"
                    }
                  },
                  "use_in_reporting": {
                    "type": "boolean",
                    "description": "Whether to use in reporting. Only valid when `variable_type:global_variable`.",
                    "example": false,
                    "default": false
                  },
                  "mask_variable_data": {
                    "type": "boolean",
                    "description": "Mask variable data (for sensitive information). Only valid when `variable_type:global_variable` and the value of data_type is not `boolean`, `date_time`, `percentage`.",
                    "example": false,
                    "default": false
                  },
                  "use_as_routing_profile_parameters": {
                    "type": "boolean",
                    "description": "Whether to use in routing profile. Only valid when `variable_type:address_book_variable`. \n* `true` &mdash; Values used as routing profile parameters.\n* `false` &mdash; Not used as a value for routing configuration file parameters.",
                    "example": false,
                    "default": false
                  },
                  "data_type": {
                    "type": "string",
                    "description": "The data's type. `variable_type:address_book_variable` only applies to data types with `*`\n* `string` `*` \n* `number` \n* `boolean` `*` \n* `date_time` \n* `currency` \n* `percentage` \n* `email` \n* `url` \n* `phone` - ([E.164 format](https://en.wikipedia.org/wiki/E.164))",
                    "example": "number",
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time",
                      "currency",
                      "percentage",
                      "email",
                      "url",
                      "phone"
                    ]
                  },
                  "value_category": {
                    "type": "string",
                    "description": "The variable value's category. Only valid when `variable_type:global_variable`. \n* `undefined` &mdash; Each engagement starts without a pre-set value. \n* `default_value` &mdash; Each engagement starts with the default value. \n* `linked_value` &mdash; The value links across flows, and each engagement uses the latest value.",
                    "example": "default_value"
                  },
                  "values": {
                    "maximum": 20,
                    "type": "array",
                    "description": "The variable's values. Take only the first value in the array when `variable_type:global_variable`.",
                    "items": {
                      "maxLength": 300,
                      "type": "string",
                      "example": "test-value-1"
                    }
                  },
                  "linked_value_lock": {
                    "type": "boolean",
                    "description": "The variable linked value's lock. Only valid when `value_category:linked_value`. \n* `true` &mdash; The variable cannot be updated in a flow. it will be the same for each engagement. \n* `false` &mdash; The variable value can be updated in a flow. each engagement will use the latest value.",
                    "example": false,
                    "default": false
                  },
                  "default_value": {
                    "maxLength": 300,
                    "type": "string",
                    "description": "The variable's default value. Only used when `variable_type:address_book_variable` and `data_type:string`.",
                    "example": "test-value-1"
                  },
                  "use_in_external_url_parameters": {
                    "type": "boolean",
                    "description": "Lets you use the parameter value in defining external URLs launched for each engagement. Variable types: global, address book",
                    "example": true
                  },
                  "client_show_in_client_profile_section": {
                    "type": "boolean",
                    "description": "Whether this variable will be shown in the Zoom client's Profile section. Variable types: global",
                    "example": true
                  },
                  "client_show_in_client_engagement_section": {
                    "type": "boolean",
                    "description": "Whether this variable will be shown in the Zoom client's Engagement section. Variable types: global",
                    "example": true
                  },
                  "client_show_in_inbound_call_notifications": {
                    "type": "boolean",
                    "description": "Whether this variable will be shown as an inbound call notification on the Zoom client. Variable types: global, address book",
                    "example": true
                  }
                },
                "description": "Information about the variable."
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   \n \nVariable updated."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request \n\n **Error Code:** `3403` <br>\n The variable already exists in the current custom group: $variable_name. <br>\n**Error Code:** `3404` <br>\n The \"values\" does not match \"data_type\". <br>\n**Error Code:** `3405` <br>\n Invalid date format. <br>\n**Error Code:** `3406` <br>\n This \"data_type\":$data_type is not supported when \"variable_type\" is $variable_type. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found \n\n **Error Code:** `300` <br>\n Validation failed <br>\n**Error Code:** `3401` <br>\n Variable does not exist: $variableId. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "contact_center_variable:write:admin",
              "contact_center:update:variable:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "ZCC 2.6.0",
          "x-permissions": [],
          "x-macro-scopes": [
            "contact_center_variable:write:admin"
          ],
          "x-granular-scopes": [
            "contact_center:update:variable:admin"
          ]
        }
      }
    }
  },
  "components": {}
}
