{
  "openapi": "3.0.0",
  "info": {
    "title": "Zoom Events API",
    "description": "Zoom Events API enables seamless integration, granting developers access to Zoom's data. Empower your apps with private services or public offerings on the [Zoom App Marketplace](https://marketplace.zoom.us/). Dive into [OAuth documentation](https://developers.zoom.us/docs/zoom-rooms/oauth/) for credential acquisition and app creation.",
    "termsOfService": "https://zoom.us/docs/en-us/zoom_api_license_and_tou.html",
    "contact": {
      "name": "Zoom Developers",
      "url": "https://developer.zoom.us/"
    },
    "version": "2"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "https://swagger.io"
  },
  "servers": [
    {
      "url": "https://api.zoom.us/v2"
    }
  ],
  "paths": {
    "/zoom_events/events/{eventId}/attendee_action": {
      "get": {
        "tags": [
          "Attendee Actions"
        ],
        "summary": "List Event Attendee Actions",
        "description": "Retrieves the attendee actions performed by host for an event.\n\n**Scopes:** `zoom_events_attendee_actions:read`,`zoom_events_attendee_actions:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_attendee_actions`,`zoom_events:read:list_attendee_actions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "ListEventAttendeeActions",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email of attendee.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test@example.com"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`    Attendee check-in Information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Attendee checkins pagination result",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records in the response.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token.",
                      "example": "yqT59YnBSHqvDdNnkeHQsA"
                    },
                    "attendees": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "The email address of the checked-in attendee.",
                            "example": "email@zoom.us"
                          },
                          "source": {
                            "type": "string",
                            "description": "The source of the action. Any information that can be used for tracking the source of this action.",
                            "example": "Console-1"
                          },
                          "action": {
                            "type": "string",
                            "description": "The action name.",
                            "example": "Check-in",
                            "enum": [
                              "check-in"
                            ]
                          }
                        },
                        "description": "The attendee and the action performed."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_attendee_actions:read",
              "zoom_events_attendee_actions:read:admin",
              "zoom_events:read:list_attendee_actions",
              "zoom_events:read:list_attendee_actions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_attendee_actions:read",
            "zoom_events_attendee_actions:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_attendee_actions",
            "zoom_events:read:list_attendee_actions:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Attendee Actions"
        ],
        "summary": "Update Event Attendee Actions",
        "description": "Retrieves attendee onsite action for an event. You can perform actions such as onsite check-in for a single attendee or up to 300 attendees in a batch operation. In the case of a batch operation, the API response can be partial success.  Any errors are returned in the **errors** object.\n\n**Scopes:** `zoom_events_attendee_actions:write`,`zoom_events_attendee_actions:write:admin`\n\n**Granular Scopes:** `zoom_events:update:batch_attendee_actions`,`zoom_events:update:batch_attendee_actions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "UpdateEventAttendeeActions",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attendees": {
                    "type": "array",
                    "items": {
                      "required": [
                        "action",
                        "email"
                      ],
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The email address of the attendee.",
                          "example": "email@zoom.us"
                        },
                        "action": {
                          "type": "string",
                          "description": "The action name.",
                          "example": "check-in",
                          "enum": [
                            "check-in"
                          ]
                        }
                      },
                      "description": "The attendee and the action performed."
                    }
                  },
                  "source": {
                    "type": "string",
                    "description": "The source of the action. Any information that can be used for tracking the source of this action.",
                    "example": "console-1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`    Attendee check-in Information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Attendee checkins result",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "The email address of the failed checked-in attendee.",
                            "example": "email@zoom.us"
                          },
                          "message": {
                            "type": "string",
                            "description": "Error message.",
                            "example": "User doesn't have an on-site ticket"
                          }
                        },
                        "description": "The list of check-in failures."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_attendee_actions:write",
              "zoom_events_attendee_actions:write:admin",
              "zoom_events:update:batch_attendee_actions",
              "zoom_events:update:batch_attendee_actions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_attendee_actions:write",
            "zoom_events_attendee_actions:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:batch_attendee_actions",
            "zoom_events:update:batch_attendee_actions:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/sessions/{sessionId}/attendee_action": {
      "get": {
        "tags": [
          "Attendee Actions"
        ],
        "summary": "List Session Attendee Actions",
        "description": "Retrieves the attendee actions performed by host for an event session.\n\n**Scopes:** `zoom_events_attendee_actions:read`,`zoom_events_attendee_actions:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_session_attendee_actions`,`zoom_events:read:list_session_attendee_actions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "ListSessionAttendeeActions",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email of attendee.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test@example.com"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`    Attendee check-in Information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Attendee checkins pagination result",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records in the response.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token.",
                      "example": "yqT59YnBSHqvDdNnkeHQsA"
                    },
                    "attendees": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "The email address of the checked-in attendee.",
                            "example": "email@zoom.us"
                          },
                          "source": {
                            "type": "string",
                            "description": "The source of the action. Any information that can be used for tracking the source of this action.",
                            "example": "Console-1"
                          },
                          "action": {
                            "type": "string",
                            "description": "The action name.",
                            "example": "Check-in",
                            "enum": [
                              "check-in"
                            ]
                          }
                        },
                        "description": "The attendee and the action performed."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_attendee_actions:read",
              "zoom_events_attendee_actions:read:admin",
              "zoom_events:read:list_session_attendee_actions",
              "zoom_events:read:list_session_attendee_actions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_attendee_actions:read",
            "zoom_events_attendee_actions:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_session_attendee_actions",
            "zoom_events:read:list_session_attendee_actions:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Attendee Actions"
        ],
        "summary": "Update Session Attendee Actions",
        "description": "Use this API to perform attendee onsite action for an event session. You can perform actions such as onsite check-in for a single attendee or up to 300 attendees in a batch operation.In the case of a batch operation, the API response can be partial success.  Any errors are returned in the **errors** object.\n\n**Scopes:** `zoom_events_attendee_actions:write`,`zoom_events_attendee_actions:write:admin`\n\n**Granular Scopes:** `zoom_events:update:batch_session_attendee_actions`,`zoom_events:update:batch_session_attendee_actions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "UpdateSessionAttendeeActions",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attendees": {
                    "type": "array",
                    "items": {
                      "required": [
                        "action",
                        "email"
                      ],
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The email address of the attendee.",
                          "example": "email@zoom.us"
                        },
                        "action": {
                          "type": "string",
                          "description": "The action name.",
                          "example": "Check-in",
                          "enum": [
                            "check-in"
                          ]
                        }
                      },
                      "description": "The attendee and the action performed."
                    }
                  },
                  "source": {
                    "type": "string",
                    "description": "The source of the action. Any information that can be used for tracking the source of this action.",
                    "example": "Console-1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`    Attendee check-in Information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Attendee checkins result",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "The email address of the failed checked-in attendee.",
                            "example": "email@zoom.us"
                          },
                          "message": {
                            "type": "string",
                            "description": "The error message.",
                            "example": "User doesn't have an on-site ticket."
                          }
                        },
                        "description": "The list of check-in failures."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_attendee_actions:write",
              "zoom_events_attendee_actions:write:admin",
              "zoom_events:update:batch_session_attendee_actions",
              "zoom_events:update:batch_session_attendee_actions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_attendee_actions:write",
            "zoom_events_attendee_actions:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:batch_session_attendee_actions",
            "zoom_events:update:batch_session_attendee_actions:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/coeditors": {
      "get": {
        "tags": [
          "Co Editors"
        ],
        "summary": "  List coeditors",
        "description": "Retrieves the list of co-editors and their edit permissions for an event.   Co-editors can make changes to the event details. Co-editors have view permission to all sections of the event.\n\n**Scopes:** `zoom_events_coeditors:read`,`zoom_events_coeditors:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_coeditors`,`zoom_events:read:list_coeditors:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getCoEditors",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n List of co-editors returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of co-editors",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records in the response.",
                      "example": 1
                    },
                    "coeditors": {
                      "type": "array",
                      "description": "Co-editors",
                      "items": {
                        "title": "Co-editor",
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "The co-editor's email address.",
                            "example": "coeditor@example.com"
                          },
                          "permission_groups": {
                            "type": "array",
                            "description": "Permission Groups",
                            "items": {
                              "type": "string",
                              "description": "The permissions given for the co-editor to edit particular sections of the event: \n * `Publish` Event publish access \n * `EventConfiguration` Event Configuration page \n * `EventBranding` Event Branding page \n * `Registration & Join` Registration & Join page \n * `Venue` Event Experience page \n * `EventExperience` Event Experience page \n * `EventPlanning` Event Content page \n * `SpecialRole` Special Roles page \n * `PostEvent` Post Event page \n * `Analytics` Analytics page \n * `Email` Communications page \n * `Integrations` Integrations page",
                              "example": "EventConfiguration",
                              "enum": [
                                "Publish",
                                "EventConfiguration",
                                "EventBranding",
                                "Registration & Join",
                                "Venue",
                                "EventExperience",
                                "EventPlanning",
                                "SpecialRole",
                                "PostEvent",
                                "Analytics",
                                "Email",
                                "Integrations"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_coeditors:read",
              "zoom_events_coeditors:read:admin",
              "zoom_events:read:list_coeditors",
              "zoom_events:read:list_coeditors:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_coeditors:read",
            "zoom_events_coeditors:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_coeditors",
            "zoom_events:read:list_coeditors:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/access_links": {
      "get": {
        "tags": [
          "Event Access"
        ],
        "summary": "List event access links",
        "description": "Retrieves a list of all the event's access links associated with the event.\n\n**Scopes:** `zoom_events_access_links:read:admin`,`zoom_events_access_links:read`\n\n**Granular Scopes:** `zoom_events:read:list_access_links`,`zoom_events:read:list_access_links:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getEventAccessLinks",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n List of Events Access Links.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Event's Access",
                  "type": "object",
                  "properties": {
                    "access_links": {
                      "type": "array",
                      "description": "The list of event's access links.",
                      "items": {
                        "title": "Access Link information",
                        "type": "object",
                        "properties": {
                          "access_link_id": {
                            "type": "string",
                            "description": "The event access link ID.",
                            "example": "234kjhg23kl4jhlaksjdh3"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the access link.",
                            "example": "Event Access Link 1"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of access link of the event. \n * `registration` - Attendees will be required to authenticate with the email that was used at registration when joining. \n * `group-join` - The attendee group specified by the chosen authentication will join without registration.",
                            "example": "registration",
                            "enum": [
                              "registration",
                              "group-join"
                            ]
                          },
                          "is_default": {
                            "type": "boolean",
                            "description": "The default link ensures compatibility with the event links that are used throughout the attendee experience. These existing event links will operate as a registration link or group join link based upon the default setting.. It will be set to false by default.",
                            "example": true
                          },
                          "url": {
                            "type": "string",
                            "description": "The event access link.",
                            "example": "https://gobranding.zipow.com/ev/Ar7HuZc3rtKwaVqLz0QdBYN-2jTOMeGGgLe-G7JzOUQZTIBOpBaH~Aq9NeHNgGwwg2eyFH7eEtP4bXRXiiYCM8pDiTuTbrigbqJ1uK2K6Ga-Ghg"
                          },
                          "authentication_method": {
                            "type": "string",
                            "description": "The event authentication method during registration or during join, depending on the access link type: \n * `zoom_account` Zoom account holder  * `zoom_account_otp` Sign in with Zoom account or with an email OTP  * `corporate_idp` Sign in to external Single Sign-On (SSO)  * `no_auth` No authentication * `accelerated_auth` Authentication through vanity url",
                            "example": "no_auth",
                            "enum": [
                              "zoom_account",
                              "zoom_account_otp",
                              "corporate_idp",
                              "no_auth",
                              "accelerated_auth"
                            ]
                          },
                          "allow_domain_list": {
                            "type": "array",
                            "description": "The registration restricted to these specific domains. This array returns a maximum of 50 domains.",
                            "items": {
                              "type": "string",
                              "example": "zoom.us"
                            }
                          },
                          "email_restrict_list": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "The registration restricted to users by email addresses. Only these users are allowed to register and these email addresses will receive an email invitation.",
                            "items": {
                              "type": "string",
                              "example": "example1@email.com"
                            }
                          },
                          "security_at_join": {
                            "type": "object",
                            "properties": {
                              "email_authentication": {
                                "type": "boolean",
                                "description": "Attendees will be required to authenticate with the email that was used at registration when joining.",
                                "example": true
                              },
                              "security_code_verification": {
                                "type": "boolean",
                                "description": "Require additional authentication through a security code.",
                                "example": true
                              }
                            }
                          },
                          "ticket_type_id": {
                            "type": "string",
                            "description": "Ticket Type ID. This establishes the access permissions of the user within the event.",
                            "example": "234kjhg23kl4jhlaksjdh3"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  Not a host. \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n  Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_access_links:read:admin",
              "zoom_events_access_links:read",
              "zoom_events:read:list_access_links",
              "zoom_events:read:list_access_links:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_access_links:read:admin",
            "zoom_events_access_links:read"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_access_links",
            "zoom_events:read:list_access_links:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Event Access"
        ],
        "summary": "Create event access link",
        "description": "Create an access link for an event.\n\n**Scopes:** `zoom_events_access_links:write`,`zoom_events_access_links:write:admin`\n\n**Granular Scopes:** `zoom_events:write:access_links`,`zoom_events:write:access_links:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createEventAccessLink",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Event Access",
                "required": [
                  "authentication_method",
                  "name",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The access link's name.",
                    "example": "Event Access Link 1"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of access link of the event. \n * `registration` - Attendees will be required to authenticate with the email that was used at registration when joining. \n * `group-join` - The attendee group specified by the chosen authentication will join without registration.",
                    "example": "registration",
                    "enum": [
                      "registration",
                      "group-join"
                    ]
                  },
                  "is_default": {
                    "type": "boolean",
                    "description": "The default link ensures compatibility with the event links that are used throughout the attendee experience. These existing event links will operate as a registration link or group join link based upon the default setting. It will be set to false by default. Only one link is set to default, at any time.",
                    "example": false
                  },
                  "authentication_method": {
                    "type": "string",
                    "description": "The event authentication method during registration or during join, depending on the access link type. \n * `zoom_account` - Zoom account holder.  * `zoom_account_otp` - Sign in with Zoom account or with an email OTP.  * `corporate_idp` - Sign in to external single sign-on (SSO).  * `no_auth` - No authentication. * `accelerate_auth` - Authentication through vanity URL.",
                    "example": "no_auth",
                    "enum": [
                      "zoom_account",
                      "zoom_account_otp",
                      "corporate_idp",
                      "no_auth",
                      "accelerate_auth"
                    ]
                  },
                  "allow_domain_list": {
                    "maxItems": 50,
                    "type": "array",
                    "description": "The registration restricted to these specific domains. This array returns a maximum of 50 domains.",
                    "items": {
                      "type": "string",
                      "example": "zoom.us"
                    }
                  },
                  "email_restrict_list": {
                    "maxItems": 50000,
                    "uniqueItems": true,
                    "type": "array",
                    "description": "The registration restricted to users by email addresses. Only these users are allowed to register and these email addresses will receive an email invitation.",
                    "items": {
                      "type": "string",
                      "example": "example1@email.com"
                    }
                  },
                  "security_at_join": {
                    "type": "object",
                    "properties": {
                      "email_authentication": {
                        "type": "boolean",
                        "description": "This field applies only to registration link type. Attendees will be required to authenticate with the email that was used at registration when joining.",
                        "example": true
                      },
                      "security_code_verification": {
                        "type": "boolean",
                        "description": "Require additional authentication through a security code.",
                        "example": true
                      }
                    },
                    "description": "security at the time of joining."
                  },
                  "ticket_type_id": {
                    "type": "string",
                    "description": "The ticket type ID. This field applies only to group-join link type. This establishes the access permissions of the user within the event.",
                    "example": "PTYwAknYQXaDStOP7O3ExA"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`  \n \n Event access link created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Event Access Link",
                  "type": "object",
                  "properties": {
                    "access_link_id": {
                      "type": "string",
                      "description": "The event access link ID.",
                      "example": "234kjhg23kl4jhlaksjdh3"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the access link.",
                      "example": "Event Access Link 1"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of access link of the event. \n * `registration` - Attendees will be required to authenticate with the email that was used at registration when joining. \n * `group-join` - The attendee group specified by the chosen authentication will join without registration.",
                      "example": "registration",
                      "enum": [
                        "registration",
                        "group-join"
                      ]
                    },
                    "is_default": {
                      "type": "boolean",
                      "description": "The default link ensures compatibility with the event links that are used throughout the attendee experience. These existing event links will operate as a registration link or group join link based upon the default setting. It will be set to false by default.",
                      "example": true
                    },
                    "authentication_method": {
                      "type": "string",
                      "description": "The event authentication method during registration or during join, depending on the access link type. \n * `zoom_account` Zoom account holder.  * `zoom_account_otp` Sign in with Zoom account or with an email OTP. * `corporate_idp` - Sign in to external single sign-on (SSO).  * `no_auth` - No authentication. * `accelerate_auth` - Authentication through vanity URL.",
                      "example": "no_auth",
                      "enum": [
                        "zoom_account",
                        "zoom_account_otp",
                        "corporate_idp",
                        "no_auth",
                        "accelerate_auth"
                      ]
                    },
                    "allow_domain_list": {
                      "type": "array",
                      "description": "The registration restricted to these specific domains. This array returns a maximum of 50 domains.",
                      "items": {
                        "type": "string",
                        "example": "zoom.us"
                      }
                    },
                    "email_restrict_list": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "The registration restricted to users by email addresses. Only these users are allowed to register and these email addresses will receive an email invitation.",
                      "items": {
                        "type": "≈",
                        "example": "example1@example.com"
                      }
                    },
                    "security_at_join": {
                      "type": "object",
                      "properties": {
                        "email_authentication": {
                          "type": "boolean",
                          "description": "This field applies only to registration link type. Attendees will be required to authenticate with the email that was used at registration when joining.",
                          "example": true
                        },
                        "security_code_verification": {
                          "type": "boolean",
                          "description": "Require additional authentication through a security code.",
                          "example": true
                        }
                      },
                      "description": "Security at the time of joining."
                    },
                    "ticket_type_id": {
                      "type": "string",
                      "description": "The ticket type ID. This field applies only to group-join link type. This establishes the access permissions of the user within the event.",
                      "example": "PTYwAknYQXaDStOP7O3ExA"
                    }
                  },
                  "description": "Information about the event access link."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `261202` <br>\n The ticket type could not be found. <br>\n**Error Code:** `261203` <br>\n Please ensure that each join link has a unique name. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_access_links:write",
              "zoom_events_access_links:write:admin",
              "zoom_events:write:access_links",
              "zoom_events:write:access_links:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_access_links:write",
            "zoom_events_access_links:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:write:access_links",
            "zoom_events:write:access_links:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/access_links/{accessLinkId}": {
      "get": {
        "tags": [
          "Event Access"
        ],
        "summary": "Get event access link",
        "description": "Get event access link information.\n\n**Scopes:** `zoom_events_access_links:read`,`zoom_events_access_links:read:admin`\n\n**Granular Scopes:** `zoom_events:read:access_links`,`zoom_events:read:access_links:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "GetEventAccessLink",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "accessLinkId",
            "in": "path",
            "description": "The event access link ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n Requested session details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Event access link",
                  "type": "object",
                  "properties": {
                    "access_link_id": {
                      "type": "string",
                      "description": "The event access link ID.",
                      "example": "234kjhg23kl4jhlaksjdh3"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the access link.",
                      "example": "Event Access Link 1"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of access link of the event. \n * `registration` - Attendees will be required to authenticate with the email that was used at registration when joining. \n * `group-join` - The attendee group specified by the chosen authentication will join without registration.",
                      "example": "registration",
                      "enum": [
                        "registration",
                        "group-join"
                      ]
                    },
                    "is_default": {
                      "type": "boolean",
                      "description": "The default link ensures compatibility with the event links that are used throughout the attendee experience. These existing event links will operate as a registration link or group join link based upon the default setting. It will be set to false by default.",
                      "example": true
                    },
                    "authentication_method": {
                      "type": "string",
                      "description": "The event authentication method during registration or during join, depending on the access link type. \n * `zoom_account` - Zoom account holder.  * `zoom_account_otp` - Sign in with Zoom account or with an email OTP.  * `corporate_idp` - Sign in to external single sign-on (SSO).  * `no_auth` - No authentication. * `accelerate_auth` - Authentication through vanity URL.",
                      "example": "no_auth",
                      "enum": [
                        "zoom_account",
                        "zoom_account_otp",
                        "corporate_idp",
                        "no_auth",
                        "accelerate_auth"
                      ]
                    },
                    "allow_domain_list": {
                      "type": "array",
                      "description": "The registration restricted to these specific domains. This array returns a maximum of 50 domains.",
                      "items": {
                        "type": "string",
                        "example": "zoom.us"
                      }
                    },
                    "email_restrict_list": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "The registration restricted to users by email addresses. Only these users are allowed to register and these email addresses will receive an email invitation.",
                      "items": {
                        "type": "string",
                        "example": "example1@example.com"
                      }
                    },
                    "security_at_join": {
                      "type": "object",
                      "properties": {
                        "email_authentication": {
                          "type": "boolean",
                          "description": "This field applies only to registration link type. Attendees will be required to authenticate with the email that was used at registration when joining.",
                          "example": true
                        },
                        "security_code_verification": {
                          "type": "boolean",
                          "description": "Require additional authentication through a security code.",
                          "example": true
                        }
                      },
                      "description": "Security at the time of joining."
                    },
                    "ticket_type_id": {
                      "type": "string",
                      "description": "The ticket type ID. This field applies only to group-join link type. This establishes the access permissions of the user within the event.",
                      "example": "PTYwAknYQXaDStOP7O3ExA"
                    }
                  },
                  "description": "The information about the event access link."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n**Error Code:** `261201` <br>\n Event access link not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_access_links:read",
              "zoom_events_access_links:read:admin",
              "zoom_events:read:access_links",
              "zoom_events:read:access_links:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_access_links:read",
            "zoom_events_access_links:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:access_links",
            "zoom_events:read:access_links:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Event Access"
        ],
        "summary": "Delete event access link",
        "description": "Deletes an event access link.\n\n**Scopes:** `zoom_events_access_links:write`,`zoom_events_access_links:write:admin`\n\n**Granular Scopes:** `zoom_events:delete:access_links`,`zoom_events:delete:access_links:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteEventAccessLink",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "accessLinkId",
            "in": "path",
            "description": "The event access link ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`   Event access deleted successfully."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n**Error Code:** `261201` <br>\n Event access link not found <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_access_links:write",
              "zoom_events_access_links:write:admin",
              "zoom_events:delete:access_links",
              "zoom_events:delete:access_links:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_access_links:write",
            "zoom_events_access_links:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:delete:access_links",
            "zoom_events:delete:access_links:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Event Access"
        ],
        "summary": "Update Event Access",
        "description": "Updates the event access for an event ID.\n\n**Scopes:** `zoom_events_access_links:write`,`zoom_events_access_links:write:admin`\n\n**Granular Scopes:** `zoom_events:update:access_links`,`zoom_events:update:access_links:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateEventAccess",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "accessLinkId",
            "in": "path",
            "description": "The event access link ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Event Access information",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the access link.",
                    "example": "Event Access Link 1"
                  },
                  "is_default": {
                    "type": "boolean",
                    "description": "The default link ensures compatibility with the event links that are used throughout the attendee experience. These existing event links will operate as a registration link or group join link based upon the default setting. It will be set to false by default. Only one link is set to default, at any time. On;y `true` is considered for update.",
                    "example": true
                  },
                  "authentication_method": {
                    "type": "string",
                    "description": "The event authentication method during registration or during join, depending on the access link type: \n * `zoom_account` Zoom account holder  * `zoom_account_otp` Sign in with Zoom account or with an email OTP  * `corporate_idp` Sign in to external Single Sign-On (SSO)  * `no_auth` No authentication * `accelerate_auth` Authentication through vanity url",
                    "example": "no_auth",
                    "enum": [
                      "zoom_account",
                      "zoom_account_otp",
                      "corporate_idp",
                      "no_auth",
                      "accelerate_auth"
                    ]
                  },
                  "allow_domain_list": {
                    "type": "array",
                    "description": "The registration restricted to these specific domains. This array returns a maximum of 50 domains.",
                    "items": {
                      "maxItems": 50,
                      "type": "string",
                      "example": "zoom.us"
                    }
                  },
                  "email_restrict_list": {
                    "maxItems": 50000,
                    "uniqueItems": true,
                    "type": "array",
                    "description": "The registration restricted to users by email addresses. Only these users are allowed to register and these email addresses will receive an email invitation.",
                    "items": {
                      "type": "string",
                      "example": "example1@email.com"
                    }
                  },
                  "security_at_join": {
                    "type": "object",
                    "properties": {
                      "email_authentication": {
                        "type": "boolean",
                        "description": "This field applies only to registration link type. Attendees will be required to authenticate with the email that was used at registration when joining.",
                        "example": true
                      },
                      "security_code_verification": {
                        "type": "boolean",
                        "description": "Require additional authentication through a security code.",
                        "example": true
                      }
                    },
                    "description": "security at the time of joining."
                  },
                  "ticket_type_id": {
                    "type": "string",
                    "description": "The ticket type ID. This field applies only to group-join link type. This establishes the access permissions of the user within the event.",
                    "example": "PTYwAknYQXaDStOP7O3ExA"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \n Event access link updated successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `261202` <br>\n The ticket type could not be found. <br>\n**Error Code:** `261203` <br>\n Please ensure that each join link has a unique name. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n**Error Code:** `261201` <br>\n Event access link not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_access_links:write",
              "zoom_events_access_links:write:admin",
              "zoom_events:update:access_links",
              "zoom_events:update:access_links:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_access_links:write",
            "zoom_events_access_links:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:access_links",
            "zoom_events:update:access_links:admin"
          ]
        }
      }
    },
    "/zoom_events/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List events",
        "description": "Retrieves all events associated with the user.\n\n\n\n**Scopes:** `zoom_events_basic:read`,`zoom_events_basic:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_events`,`zoom_events:read:list_events:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getEvents",
        "parameters": [
          {
            "name": "role_type",
            "in": "query",
            "description": "The user role type:\n* `Host` - All hosted events.\n* `Attendee` - All non-hosted ticketed events.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "host",
              "default": "attendee",
              "enum": [
                "host",
                "attendee"
              ]
            }
          },
          {
            "name": "event_status_type",
            "in": "query",
            "description": "The type of event status:\n* `Upcoming` - All upcoming events.\n* `Past` - All past events.\n* `Draft` - All events marked as draft.\n* `Cancelled` - All cancelled events.\n\nFor the `ATTENDEE` role type, only `upcoming` and `past` are valid status types. As a `HOST`, all status types are valid.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "upcoming",
              "default": "upcoming",
              "enum": [
                "upcoming",
                "past",
                "draft",
                "cancelled"
              ]
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. The maximum is 300.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \nList of requested events.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Events pagination",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through a large set results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "oLVRGBTZXI6Kt7zv0gb8Qy4h8cLNbzK1ig2"
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "title": "Event information",
                        "type": "object",
                        "properties": {
                          "event_id": {
                            "type": "string",
                            "description": "The ID of the event.",
                            "example": "234kj2h34kljgh23lkhj3"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the event.",
                            "example": "OpenAPI Conference Name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the event.",
                            "example": "This event was created with the OpenAPI"
                          },
                          "timezone": {
                            "type": "string",
                            "description": "The timezone of the event.",
                            "example": "America/Indianapolis"
                          },
                          "event_type": {
                            "type": "string",
                            "description": "The event types as enum:\n * `CONFERENCE` - Multi session event\n * `SIMPLE_EVENT` - Single session event\n * `RECURRING` - Recurring session event",
                            "example": "CONFERENCE"
                          },
                          "recurrence": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "integer",
                                "description": "The type of recurring session: \n* `1` — Daily. \n* `2` — Weekly. \n* `3` — Monthly.",
                                "enum": [
                                  1,
                                  2,
                                  3
                                ]
                              },
                              "repeat_interval": {
                                "type": "integer",
                                "description": "The session's repeat interval: \n* For daily intervals, a max of `90` days. \n* For a weekly interval, a max of `12` weeks. \n* For monthly intervals, a max of `3` months."
                              },
                              "weekly_days": {
                                "type": "string",
                                "description": "A comma-separated list of the days of the week on which the recurring weekly session occurs: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday"
                              },
                              "monthly_days": {
                                "maximum": 31,
                                "minimum": 1,
                                "type": "integer",
                                "description": "The day of the month on which the recurring monthly session occurs. The value ranges from 1 to 31."
                              },
                              "monthly_week_day": {
                                "type": "integer",
                                "description": "The day of the week on which the recurring monthly session is scheduled: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday",
                                "enum": [
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  6,
                                  7
                                ]
                              },
                              "end_times": {
                                "type": "integer",
                                "description": "The number of times the recurring session will occur before it is canceled."
                              },
                              "end_date_time": {
                                "type": "string",
                                "description": "The recurring session's final ending date and time before it is canceled, in UTC format.",
                                "format": "date-time"
                              },
                              "monthly_week": {
                                "type": "integer",
                                "description": "The week of the month on which a recurring session occurs: \n* `-1` — The last week of the month. \n* `1` — The first week. \n* `2` — The second week. \n* `3` — The third week. \n* `4` — The fourth week.",
                                "enum": [
                                  -1,
                                  1,
                                  2,
                                  3,
                                  4
                                ]
                              },
                              "duration": {
                                "type": "integer",
                                "description": "Session duration in minutes."
                              }
                            },
                            "description": "Information about [recurring sessions](https://marketplace.zoom.us/docs/api-reference/other-references/recurrence-object-definitions)."
                          },
                          "access_level": {
                            "type": "string",
                            "description": " The type of [access level](https://support.zoom.us/hc/en-us/articles/13471207223437-Managing-the-Event-Access-tab): * `PUBLIC` - Public events\n* `PRIVATE_UNRESTRICTED` - Private and unrestricted.\n* `PRIVATE_RESTRICTED` - Private and restricted.\n",
                            "example": "PRIVATE_RESTRICTED"
                          },
                          "meeting_type": {
                            "type": "string",
                            "description": "The type of meeting (for single session and recurring session events): * `MEETING` - Meeting\n * `WEBINAR` - Webinar.",
                            "example": "MEETING"
                          },
                          "categories": {
                            "type": "array",
                            "description": "The category of the event.\n\n**Example:**\n* Education and Family.\n* Business and Networking.\n* Entertainment and Visual Arts.\n* Food and Drinks.\n",
                            "items": {
                              "type": "string",
                              "example": "Food and Drinks"
                            }
                          },
                          "tags": {
                            "type": "array",
                            "description": "The tags for the event.",
                            "items": {
                              "type": "string",
                              "example": "Event tag1"
                            }
                          },
                          "calendar": {
                            "type": "array",
                            "description": "The start and end time of the calendar invitations in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ",
                            "items": {
                              "type": "object",
                              "properties": {
                                "start_time": {
                                  "type": "string",
                                  "format": "date-time",
                                  "example": "2022-06-03T20:51:00Z"
                                },
                                "end_time": {
                                  "type": "string",
                                  "format": "date-time",
                                  "example": "2022-06-03T20:51:00Z"
                                }
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "The event status: \nOptions:\n * `PUBLISHED` - Published event\n * `DRAFT` - Draft event",
                            "example": "PUBLISHED"
                          },
                          "hub_id": {
                            "type": "string",
                            "description": "The ID of the event hub.",
                            "example": "23asdfasdf3asdf"
                          },
                          "start_time": {
                            "type": "string",
                            "description": "The start time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ",
                            "format": "date-time",
                            "example": "2022-06-03T20:51:00Z"
                          },
                          "end_time": {
                            "type": "string",
                            "description": "The end time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ",
                            "format": "date-time",
                            "example": "2022-06-03T20:51:00Z"
                          },
                          "contact_name": {
                            "type": "string",
                            "description": "The contact person's name for the event.",
                            "example": "user contact name"
                          },
                          "contact_email": {
                            "type": "string",
                            "description": "The contact person's email address for the event.",
                            "example": "user@zoom.us"
                          },
                          "lobby_start_time": {
                            "type": "string",
                            "description": "The start time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ",
                            "format": "date-time",
                            "example": "2022-06-03T20:51:00Z"
                          },
                          "lobby_end_time": {
                            "type": "string",
                            "description": "The end time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ",
                            "format": "date-time",
                            "example": "2022-06-03T20:51:00Z"
                          },
                          "event_url": {
                            "type": "string",
                            "description": "The defaul event access link.",
                            "example": "www.example.com/zoomEvents"
                          },
                          "blocked_countries": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "The [country's code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists/#countries).",
                              "example": "US"
                            }
                          },
                          "attendance_type": {
                            "type": "string",
                            "description": "The type of attendee experience for the event. \n * `virtual`  virtual attendees only \n * `in-person` in-person attendees only \n * `hybrid`  both in-person and virtual attendees",
                            "example": "hybrid",
                            "enum": [
                              "virtual",
                              "in-person",
                              "hybrid"
                            ]
                          },
                          "physical_location": {
                            "type": "string",
                            "description": "The physical location of the event. This field is applicable for Hybrid and in-person events only.",
                            "example": "801 Mt Vernon Pl NW, Washington, DC 20001"
                          },
                          "tagline": {
                            "type": "string",
                            "description": "This field displays under the event detail page image.",
                            "example": "Unlocking Innovation: Join Us for the Day of Insipiration and Insight!"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_basic:read",
              "zoom_events_basic:read:admin",
              "zoom_events:read:list_events",
              "zoom_events:read:list_events:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_basic:read",
            "zoom_events_basic:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_events",
            "zoom_events:read:list_events:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Create an event",
        "description": "Creates an event.\n\n**Scopes:** `zoom_events_basic:write`,`zoom_events_basic:write:admin`\n\n**Granular Scopes:** `zoom_events:write:event`,`zoom_events:write:event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Event information",
                "required": [
                  "access_level",
                  "attendance_type",
                  "description",
                  "event_type",
                  "hub_id",
                  "name",
                  "timezone"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event.",
                    "example": "OpenAPI Conference Name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the event.",
                    "example": "This event was created with the OpenAPI."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "The timezone of the event.   For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).",
                    "example": "America/Indianapolis"
                  },
                  "event_type": {
                    "type": "string",
                    "description": "The event types as enum:\n * `CONFERENCE` - Multi session events.\n * `SIMPLE_EVENT` - Single session event.\n * `RECURRING` - Recurring sessions event.\n",
                    "example": "CONFERENCE",
                    "enum": [
                      "SIMPLE_EVENT",
                      "CONFERENCE",
                      "RECURRING"
                    ]
                  },
                  "recurrence": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "integer",
                        "description": "The type of recurring session: \n* `1` — Daily. \n* `2` — Weekly. \n* `3` — Monthly.",
                        "example": 1,
                        "enum": [
                          1,
                          2,
                          3
                        ]
                      },
                      "repeat_interval": {
                        "type": "integer",
                        "description": "The session's repeat interval: \n* For daily intervals, a max of `90` days. \n* For a weekly interval, a max of `12` weeks. \n* For monthly intervals, a max of `3` months.",
                        "example": 1
                      },
                      "weekly_days": {
                        "type": "string",
                        "description": "A comma-separated list of the days of the week on which the recurring weekly session occurs: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday",
                        "example": "[6, 1, 3, 2]"
                      },
                      "monthly_days": {
                        "maximum": 31,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The day of the month on which the recurring monthly session occurs. The value ranges from 1 to 31.",
                        "example": 1
                      },
                      "monthly_week_day": {
                        "type": "integer",
                        "description": "The day of the week on which the recurring monthly session is scheduled: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday",
                        "example": 1,
                        "enum": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7
                        ]
                      },
                      "end_times": {
                        "type": "integer",
                        "description": "The number of times the recurring session will occur before it is canceled.",
                        "example": 7
                      },
                      "end_date_time": {
                        "type": "string",
                        "description": "The recurring session's final ending date and time before it is canceled, in UTC format.",
                        "format": "date-time",
                        "example": "2022-04-02T15:59:00Z"
                      },
                      "monthly_week": {
                        "type": "integer",
                        "description": "The week of the month on which a recurring session occurs: \n* `-1` — The last week of the month. \n* `1` — The first week. \n* `2` — The second week. \n* `3` — The third week. \n* `4` — The fourth week.",
                        "example": 1,
                        "enum": [
                          -1,
                          1,
                          2,
                          3,
                          4
                        ]
                      },
                      "duration": {
                        "type": "integer",
                        "description": "Session duration in minutes.",
                        "example": 15
                      }
                    },
                    "description": "Information about [recurring sessions](https://marketplace.zoom.us/docs/api-reference/other-references/recurrence-object-definitions)."
                  },
                  "access_level": {
                    "type": "string",
                    "description": " * `PRIVATE_UNRESTRICTED` - Private and unrestricted.\n * `PRIVATE_RESTRICTED` - Private and restricted.\n",
                    "example": "PRIVATE_RESTRICTED"
                  },
                  "meeting_type": {
                    "type": "string",
                    "description": "This value is required only for a single session event. \n * `MEETING` - Meeting.\n * `WEBINAR` - Webinar. \n",
                    "example": "MEETING"
                  },
                  "categories": {
                    "type": "array",
                    "description": "The category of the event.\n* Education & Family.\n* Business & Networking.\n* Entertainment & Visual Arts.\n* Food & Drinks. \n* Fitness & Health. \n* Home & Lifestyle \n* Community & Spirituality. \n* Other",
                    "items": {
                      "type": "string",
                      "example": "Food & Drink"
                    },
                    "enum": [
                      "Education & Family",
                      "Business & Networking",
                      "Entertainment & Visual Arts",
                      "Food & Drink",
                      "Fitness & Health",
                      "Home & Lifestyle",
                      "Community & Spirituality",
                      "Other"
                    ]
                  },
                  "tags": {
                    "type": "array",
                    "description": "The tags for the event.",
                    "items": {
                      "type": "string",
                      "example": "Event tag1"
                    }
                  },
                  "calendar": {
                    "type": "array",
                    "description": "The start and end time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                    "items": {
                      "required": [
                        "end_time",
                        "start_time"
                      ],
                      "type": "object",
                      "properties": {
                        "start_time": {
                          "type": "string",
                          "description": "The start time of the event in UTC.",
                          "format": "date-time",
                          "example": "2024-07-28T13:00:00Z"
                        },
                        "end_time": {
                          "type": "string",
                          "description": "The start time of the event in UTC.",
                          "format": "date-time",
                          "example": "2024-07-30T13:00:00Z"
                        }
                      },
                      "description": "Event's start and end time."
                    }
                  },
                  "hub_id": {
                    "type": "string",
                    "description": "The ID of the event hub.",
                    "example": "23asdfasdf3asdf"
                  },
                  "start_time": {
                    "type": "string",
                    "description": "The start time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ` this is read only field.",
                    "format": "date-time",
                    "example": "2022-06-03T20:51:00Z",
                    "deprecated": true
                  },
                  "end_time": {
                    "type": "string",
                    "description": "The end time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ` this is a read only field.",
                    "format": "date-time",
                    "example": "2022-06-03T20:51:00Z",
                    "deprecated": true
                  },
                  "contact_name": {
                    "type": "string",
                    "description": "The contact person's name for the event.",
                    "example": "user contact name"
                  },
                  "lobby_start_time": {
                    "type": "string",
                    "description": "The start time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                    "format": "date-time",
                    "example": "2022-06-03T20:51:00Z"
                  },
                  "lobby_end_time": {
                    "type": "string",
                    "description": "The end time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                    "format": "date-time",
                    "example": "2022-06-03T20:51:00Z"
                  },
                  "blocked_countries": {
                    "type": "array",
                    "description": "Attendees from the countries listed here will not be allowed to register to the event.",
                    "items": {
                      "type": "string",
                      "description": "The [country's code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists/#countries).",
                      "example": "US"
                    }
                  },
                  "attendance_type": {
                    "type": "string",
                    "description": "The type of attendee experience for the event. \n * `VIRTUAL` - virtual attendees only. \n * `IN-PERSON` - in-person attendees only.\n * `HYBRID` - both in-person and virtual attendees.",
                    "example": "hybrid",
                    "enum": [
                      "virtual",
                      "in-person",
                      "hybrid"
                    ]
                  },
                  "physical_location": {
                    "type": "string",
                    "description": "The physical location of the event. This field is applicable for hybrid and in-person events only.",
                    "example": "801 Mt Vernon Pl NW, Washington, DC 20001",
                    "deprecated": true
                  },
                  "tagline": {
                    "type": "string",
                    "description": "This field displays under the event detail page image.",
                    "example": "Unlocking Innovation: Join Us for the Day of Insipiration and Insight!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`  \n \nSuccessfully created an event.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Event information",
                  "type": "object",
                  "properties": {
                    "event_id": {
                      "type": "string",
                      "description": "The ID of the event.",
                      "example": "234kj2h34kljgh23lkhj3"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the event.",
                      "example": "OpenAPI Conference Name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the event.",
                      "example": "This event was created with the OpenAPI"
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The timezone of the event.",
                      "example": "America/Indianapolis"
                    },
                    "event_type": {
                      "type": "string",
                      "description": "The event types as enum:\n * `CONFERENCE` - Multi session event.\n * `SIMPLE_EVENT` - Single session event.\n",
                      "example": "CONFERENCE"
                    },
                    "recurrence": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "integer",
                          "description": "The type of recurring session: \n* `1` — Daily. \n* `2` — Weekly. \n* `3` — Monthly.",
                          "enum": [
                            1,
                            2,
                            3
                          ]
                        },
                        "repeat_interval": {
                          "type": "integer",
                          "description": "The session's repeat interval: \n* For daily intervals, a max of `90` days. \n* For a weekly interval, a max of `12` weeks. \n* For monthly intervals, a max of `3` months."
                        },
                        "weekly_days": {
                          "type": "string",
                          "description": "A comma-separated list of the days of the week on which the recurring weekly session occurs: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday"
                        },
                        "monthly_days": {
                          "maximum": 31,
                          "minimum": 1,
                          "type": "integer",
                          "description": "The day of the month on which the recurring monthly session occurs. The value ranges from 1 to 31."
                        },
                        "monthly_week_day": {
                          "type": "integer",
                          "description": "The day of the week on which the recurring monthly session is scheduled: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7
                          ]
                        },
                        "end_times": {
                          "type": "integer",
                          "description": "The number of times the recurring session will occur before it is canceled."
                        },
                        "end_date_time": {
                          "type": "string",
                          "description": "The recurring session's final ending date and time before it is canceled, in UTC format.",
                          "format": "date-time"
                        },
                        "monthly_week": {
                          "type": "integer",
                          "description": "The week of the month on which a recurring session occurs: \n* `-1` — The last week of the month. \n* `1` — The first week. \n* `2` — The second week. \n* `3` — The third week. \n* `4` — The fourth week.",
                          "enum": [
                            -1,
                            1,
                            2,
                            3,
                            4
                          ]
                        },
                        "duration": {
                          "type": "integer",
                          "description": "Session duration in minutes."
                        }
                      },
                      "description": "Information about [recurring sessions](https://marketplace.zoom.us/docs/api-reference/other-references/recurrence-object-definitions)."
                    },
                    "access_level": {
                      "type": "string",
                      "description": "* `PRIVATE_UNRESTRICTED` - Private and unrestricted.\n* `PRIVATE_RESTRICTED` - Private and restricted.\n",
                      "example": "PRIVATE_RESTRICTED"
                    },
                    "meeting_type": {
                      "type": "string",
                      "description": "*This value is required only for single session Event `MEETING` - Meeting.\n* `WEBINAR` - Webinar. \n",
                      "example": "MEETING"
                    },
                    "categories": {
                      "type": "array",
                      "description": "The category of the event.\n\n**Example:**\n* Education and Family.\n* Business and Networking.\n* Entertainment and Visual Arts.\n* Food and Drinks.\n",
                      "items": {
                        "type": "string",
                        "example": "Food and Drinks"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "The tags for the event.",
                      "items": {
                        "type": "string",
                        "example": "Event tag1"
                      }
                    },
                    "calendar": {
                      "type": "array",
                      "description": "The start and end time of the calendar invitations in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start_time": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-07-28T13:00:00Z"
                          },
                          "end_time": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-07-30T13:00:00Z"
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "The event status options:\n * `PUBLISHED` - Published event.\n * `DRAFT` - Draft event.",
                      "example": "PUBLISHED"
                    },
                    "hub_id": {
                      "type": "string",
                      "description": "The ID of the event hub.",
                      "example": "23asdfasdf3asdf"
                    },
                    "start_time": {
                      "type": "string",
                      "description": "The start time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "format": "date-time",
                      "example": "2022-06-03T20:51:00Z"
                    },
                    "end_time": {
                      "type": "string",
                      "description": "The end time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "format": "date-time",
                      "example": "2022-06-03T20:51:00Z"
                    },
                    "contact_name": {
                      "type": "string",
                      "description": "The contact person's name for the event.",
                      "example": "user contact name"
                    },
                    "lobby_start_time": {
                      "type": "string",
                      "description": "The start time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "format": "date-time",
                      "example": "2022-06-03T20:51:00Z"
                    },
                    "lobby_end_time": {
                      "type": "string",
                      "description": "The end time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "format": "date-time",
                      "example": "2022-06-03T20:51:00Z"
                    },
                    "event_url": {
                      "type": "string",
                      "description": "The default event access link.",
                      "example": "www.example.com/zoomEvents"
                    },
                    "blocked_countries": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "The [country's code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists/#countries).",
                        "example": "US"
                      }
                    },
                    "attendance_type": {
                      "type": "string",
                      "description": "The type of attendee experience for the event. \n * `VIRTUAL` - virtual attendees only. \n * `IN-PERSON` - in-person attendees only. \n * `HYBRID` - both in-person and virtual attendees.",
                      "example": "hybrid",
                      "enum": [
                        "virtual",
                        "in-person",
                        "hybrid"
                      ]
                    },
                    "physical_location": {
                      "type": "string",
                      "description": "The physical location of the event. This field is applicable for hybrid and in-person events only.",
                      "example": "801 Mt Vernon Pl NW, Washington, DC 20001",
                      "deprecated": true
                    },
                    "tagline": {
                      "type": "string",
                      "description": "This field displays under the event detail page image.",
                      "example": "Unlocking Innovation: Join Us for the Day of Insipiration and Insight!"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `26202` <br>\n Event schedule cannot be more than 6 days. <br>\n**Error Code:** `26203` <br>\n Event end_time must be after event start_time. <br>\n**Error Code:** `26204` <br>\n Calender must contains start_time and end_time. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `26201` <br>\n No permission to create the event under the hub ID. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_basic:write",
              "zoom_events_basic:write:admin",
              "zoom_events:write:event",
              "zoom_events:write:event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_basic:write",
            "zoom_events_basic:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:write:event",
            "zoom_events:write:event:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get an event",
        "description": "Returns information on a specified event.\n\n \n\n**Scopes:** `zoom_events_basic:read`,`zoom_events_basic:read:admin`\n\n**Granular Scopes:** `zoom_events:read:event`,`zoom_events:read:event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getEventInfo",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \nEvent returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Event information",
                  "type": "object",
                  "properties": {
                    "event_id": {
                      "type": "string",
                      "description": "The ID of the event.",
                      "example": "234kj2h34kljgh23lkhj3"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the event.",
                      "example": "OpenAPI Conference Name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the event.",
                      "example": "This event was created with the OpenAPI."
                    },
                    "timezone": {
                      "type": "string",
                      "description": "The timezone of the event.",
                      "example": "America/Indianapolis"
                    },
                    "event_type": {
                      "type": "string",
                      "description": "The event types as enum:\n * `CONFERENCE` - Multi session event.\n * `SIMPLE_EVENT` - Single session event. \n * `RECURRING` - Recurring session event.",
                      "example": "CONFERENCE"
                    },
                    "recurrence": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "integer",
                          "description": "The type of recurring session: \n* `1` — Daily. \n* `2` — Weekly. \n* `3` — Monthly.",
                          "enum": [
                            1,
                            2,
                            3
                          ]
                        },
                        "repeat_interval": {
                          "type": "integer",
                          "description": "The session's repeat interval: \n* For daily intervals, a max of `90` days. \n* For a weekly interval, a max of `12` weeks. \n* For monthly intervals, a max of `3` months."
                        },
                        "weekly_days": {
                          "type": "string",
                          "description": "A comma-separated list of the days of the week on which the recurring weekly session occurs: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday"
                        },
                        "monthly_days": {
                          "maximum": 31,
                          "minimum": 1,
                          "type": "integer",
                          "description": "The day of the month on which the recurring monthly session occurs. The value ranges from 1 to 31."
                        },
                        "monthly_week_day": {
                          "type": "integer",
                          "description": "The day of the week on which the recurring monthly session is scheduled: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7
                          ]
                        },
                        "end_times": {
                          "type": "integer",
                          "description": "The number of times the recurring session will occur before it is canceled."
                        },
                        "end_date_time": {
                          "type": "string",
                          "description": "The recurring session's final ending date and time before it is canceled, in UTC format.",
                          "format": "date-time"
                        },
                        "monthly_week": {
                          "type": "integer",
                          "description": "The week of the month on which a recurring session occurs: \n* `-1` — The last week of the month. \n* `1` — The first week. \n* `2` — The second week. \n* `3` — The third week. \n* `4` — The fourth week.",
                          "enum": [
                            -1,
                            1,
                            2,
                            3,
                            4
                          ]
                        },
                        "duration": {
                          "type": "integer",
                          "description": "Session duration in minutes."
                        }
                      },
                      "description": "Information about [recurring sessions](https://marketplace.zoom.us/docs/api-reference/other-references/recurrence-object-definitions)."
                    },
                    "access_level": {
                      "type": "string",
                      "description": "The type of [access level](https://support.zoom.us/hc/en-us/articles/13471207223437-Managing-the-Event-Access-tab):\n* `PUBLIC` - Public events.\n* `PRIVATE_UNRESTRICTED` - Private and unrestricted.\n* `PRIVATE_RESTRICTED` - Private and restricted.\n",
                      "example": "PRIVATE_RESTRICTED"
                    },
                    "meeting_type": {
                      "type": "string",
                      "description": " The type of meeting (for single session and recurring session events):\n * `MEETING` - Meeting.\n * `WEBINAR` - Webinar.",
                      "example": "MEETING"
                    },
                    "categories": {
                      "type": "array",
                      "description": "The category of the event.\n\n**Example:**\n* Education and Family.\n* Business and Networking.\n* Entertainment and Visual Arts.\n* Food and Drinks.\n",
                      "items": {
                        "type": "string",
                        "example": "Food and Drinks"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "The tags for the event.",
                      "items": {
                        "type": "string",
                        "example": "Event tag1"
                      }
                    },
                    "calendar": {
                      "type": "array",
                      "description": "The start and end time of the calendar invitations in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start_time": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2022-06-03T20:51:00Z"
                          },
                          "end_time": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2022-06-03T20:51:00Z"
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "The event status options:\n * `PUBLISHED` - Published event.\n * `DRAFT` - Draft event.",
                      "example": "PUBLISHED"
                    },
                    "hub_id": {
                      "type": "string",
                      "description": "The ID of the event hub.",
                      "example": "23asdfasdf3asdf"
                    },
                    "start_time": {
                      "type": "string",
                      "description": "The start time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "format": "date-time",
                      "example": "2022-06-03T20:51:00Z"
                    },
                    "end_time": {
                      "type": "string",
                      "description": "The end time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "format": "date-time",
                      "example": "2022-06-03T20:51:00Z"
                    },
                    "contact_name": {
                      "type": "string",
                      "description": "The contact person's name for the event.",
                      "example": "user contact name"
                    },
                    "contact_email": {
                      "type": "string",
                      "description": "The contact person's email address for the event.",
                      "example": "user@zoom.us"
                    },
                    "lobby_start_time": {
                      "type": "string",
                      "description": "The start time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "format": "date-time",
                      "example": "2022-06-03T20:51:00Z"
                    },
                    "lobby_end_time": {
                      "type": "string",
                      "description": "The end time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                      "format": "date-time",
                      "example": "2022-06-03T20:51:00Z"
                    },
                    "event_url": {
                      "type": "string",
                      "description": "The default event access link.",
                      "example": "www.example.com/zoomEvents"
                    },
                    "blocked_countries": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "The [country's code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists/#countries).",
                        "example": "US"
                      }
                    },
                    "attendance_type": {
                      "type": "string",
                      "description": "The type of attendee experience for the event. \n * `VIRTUAL` - virtual attendees only. \n * `IN-PERSON` - in-person attendees only. \n * `HYBRID` - both in-person and virtual attendees.",
                      "example": "hybrid",
                      "enum": [
                        "virtual",
                        "in-person",
                        "hybrid"
                      ]
                    },
                    "physical_location": {
                      "type": "string",
                      "description": "The physical location of the event. This field is applicable for hybrid and in-person events only.",
                      "example": "801 Mt Vernon Pl NW, Washington, DC 20001",
                      "deprecated": true
                    },
                    "tagline": {
                      "type": "string",
                      "description": "This field displays under the event detail page image.",
                      "example": "Unlocking Innovation: Join Us for the Day of Insipiration and Insight!"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_basic:read",
              "zoom_events_basic:read:admin",
              "zoom_events:read:event",
              "zoom_events:read:event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_basic:read",
            "zoom_events_basic:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:event",
            "zoom_events:read:event:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Delete an event",
        "description": "Delete a draft event.\n\n**Scopes:** `zoom_events_basic:write`,`zoom_events_basic:write:admin`\n\n**Granular Scopes:** `zoom_events:delete:event`,`zoom_events:delete:event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nEvent deleted successfully."
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_basic:write",
              "zoom_events_basic:write:admin",
              "zoom_events:delete:event",
              "zoom_events:delete:event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_basic:write",
            "zoom_events_basic:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:delete:event",
            "zoom_events:delete:event:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Events"
        ],
        "summary": "Update an event",
        "description": "Updates an event.\n\n**Scopes:** `zoom_events_basic:write`,`zoom_events_basic:write:admin`\n\n**Granular Scopes:** `zoom_events:update:event`,`zoom_events:update:event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Event information",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event.",
                    "example": "OpenAPI Conference Name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the event.",
                    "example": "This event was created with the OpenAPI"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "The timezone of the event.  \n For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).",
                    "example": "America/Indianapolis"
                  },
                  "event_type": {
                    "type": "string",
                    "description": "The event types as enum:\n * `CONFERENCE` &mdash; Multi session events.\n * `SIMPLE_EVENT` &mdash; Single session event.\n * `RECURRING` &mdash; Recurring Sessions event.\n",
                    "example": "CONFERENCE",
                    "enum": [
                      "SIMPLE_EVENT",
                      "CONFERENCE",
                      "RECURRING"
                    ]
                  },
                  "recurrence": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "integer",
                        "description": "The type of recurring session: \n* `1` — Daily. \n* `2` — Weekly. \n* `3` — Monthly.",
                        "example": 3,
                        "enum": [
                          1,
                          2,
                          3
                        ]
                      },
                      "repeat_interval": {
                        "type": "integer",
                        "description": "The session's repeat interval: \n* For daily intervals, a max of `90` days. \n* For a weekly interval, a max of `12` weeks. \n* For monthly intervals, a max of `3` months.",
                        "example": 2
                      },
                      "weekly_days": {
                        "type": "string",
                        "description": "A comma-separated list of the days of the week on which the recurring weekly session occurs: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday",
                        "example": "2"
                      },
                      "monthly_days": {
                        "maximum": 31,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The day of the month on which the recurring monthly session occurs. The value ranges from 1 to 31.",
                        "example": 3
                      },
                      "monthly_week_day": {
                        "type": "integer",
                        "description": "The day of the week on which the recurring monthly session is scheduled: \n* `1` — Sunday \n* `2` — Monday \n* `3` — Tuesday \n* `4` — Wednesday \n* `5` — Thursday \n* `6` — Friday \n* `7` — Saturday",
                        "enum": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7
                        ]
                      },
                      "end_times": {
                        "type": "integer",
                        "description": "The number of times the recurring session will occur before it is canceled.",
                        "example": 3
                      },
                      "end_date_time": {
                        "type": "string",
                        "description": "The recurring session's final ending date and time before it is canceled, in UTC format.",
                        "format": "date-time",
                        "example": "2022-06-03T20:51:00Z"
                      },
                      "monthly_week": {
                        "type": "integer",
                        "description": "The week of the month on which a recurring session occurs: \n* `-1` — The last week of the month. \n* `1` — The first week. \n* `2` — The second week. \n* `3` — The third week. \n* `4` — The fourth week.",
                        "example": 3,
                        "enum": [
                          -1,
                          1,
                          2,
                          3,
                          4
                        ]
                      },
                      "duration": {
                        "type": "integer",
                        "description": "Session duration in minutes.",
                        "example": 30
                      }
                    },
                    "description": "The information about [recurring sessions](https://marketplace.zoom.us/docs/api-reference/other-references/recurrence-object-definitions)."
                  },
                  "access_level": {
                    "type": "string",
                    "description": "The type of access level:\n* `PRIVATE_UNRESTRICTED` &mdash; Private and unrestricted.\n* `PRIVATE_RESTRICTED` &mdash; Private and restricted.\n",
                    "example": "PRIVATE_RESTRICTED"
                  },
                  "meeting_type": {
                    "type": "string",
                    "description": "*This value is required only for single session event: `MEETING`.\n* `WEBINAR` - Webinar. \n  Use session API to update the meeting type.",
                    "example": "MEETING",
                    "deprecated": true
                  },
                  "categories": {
                    "type": "array",
                    "description": "The category of the event.\n\n**Example:**\n* Education and Family.\n* Business and Networking.\n* Entertainment and Visual Arts.\n* Food and Drinks.\n",
                    "items": {
                      "type": "string",
                      "example": "Food and Drinks"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "The tags for the event.",
                    "items": {
                      "type": "string",
                      "example": "Event tag1"
                    }
                  },
                  "calendar": {
                    "type": "array",
                    "description": "The start and end time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "start_time": {
                          "type": "string",
                          "description": "The start time of the event in UTC.",
                          "format": "date-time",
                          "example": "2022-06-28T20:00:00Z"
                        },
                        "end_time": {
                          "type": "string",
                          "description": "The start time of the event in UTC.",
                          "format": "date-time",
                          "example": "2022-06-30T20:00:00Z"
                        }
                      }
                    }
                  },
                  "hub_id": {
                    "type": "string",
                    "description": "The ID of the Event Hub.",
                    "example": "23asdfasdf3asdf"
                  },
                  "start_time": {
                    "type": "string",
                    "description": "The start time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ` this is a read only field.",
                    "format": "date-time",
                    "example": "2022-06-03T20:51:00Z",
                    "deprecated": true
                  },
                  "end_time": {
                    "type": "string",
                    "description": "The end time of the event in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ` this is a read only field.",
                    "format": "date-time",
                    "example": "2022-06-03T20:51:00Z",
                    "deprecated": true
                  },
                  "contact_name": {
                    "type": "string",
                    "description": "The contact name for the event.",
                    "example": "user contact name"
                  },
                  "lobby_start_time": {
                    "type": "string",
                    "description": "The start time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                    "format": "date-time",
                    "example": "2022-06-03T20:51:00Z"
                  },
                  "lobby_end_time": {
                    "type": "string",
                    "description": "The end time of the lobby in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                    "format": "date-time",
                    "example": "2022-06-03T20:51:00Z"
                  },
                  "blocked_countries": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "The blocked countries for the event. [country's code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists/#countries).",
                      "example": "US"
                    }
                  },
                  "attendance_type": {
                    "type": "string",
                    "description": "The type of attendee experience for the event:\n * `VIRTUAL` &mdash; virtual attendees only. \n * `IN-PERSON` &mdash; in-person attendees only. \n * `HYBRID` &mdash; both in-person and virtual attendees.",
                    "example": "hybrid",
                    "enum": [
                      "virtual",
                      "in-person",
                      "hybrid"
                    ]
                  },
                  "physical_location": {
                    "type": "string",
                    "description": "The physical location of the event. This field is applicable for hybrid and in-person events only.",
                    "example": "801 Mt Vernon Pl NW, Washington, DC 20001",
                    "deprecated": true
                  },
                  "tagline": {
                    "type": "string",
                    "description": "This field displays under the event detail page image.",
                    "example": "Unlocking Innovation: Join Us for the Day of Insipiration and Insight!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nEvent updated successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_basic:write",
              "zoom_events_basic:write:admin",
              "zoom_events:update:event",
              "zoom_events:update:event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_basic:write",
            "zoom_events_basic:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:event",
            "zoom_events:update:event:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/event_actions": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Event Actions",
        "description": "Updates the event actions that the host performs for an event.\n\n**Scopes:** `zoom_events_basic:write`,`zoom_events_basic:write:admin`\n\n**Granular Scopes:** `zoom_events:write:event`,`zoom_events:write:event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "EventActions",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operation": {
                    "type": "string",
                    "description": "The host actions for the event. \n* `Publish` &mdash; Publish the event.\n* `Duplicate` &mdash; Duplicate existing event.\n* `Cancel` &mdash; Cancel the published  event.",
                    "example": "publish",
                    "enum": [
                      "publish",
                      "duplicate",
                      "cancel"
                    ]
                  },
                  "cancel_message": {
                    "type": "string",
                    "description": "The cancellation message. This field is mandatory if the event has any registrants.",
                    "example": "This event is canceled due to conflict with other events."
                  },
                  "duplicate_event": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of event that have duplicate events.",
                        "example": "OpenAPI Conference Name"
                      },
                      "start_time": {
                        "type": "string",
                        "description": "The start time of the duplicated event in UTC.",
                        "format": "date-time",
                        "example": "2024-07-28T13:00:00Z"
                      },
                      "timezone": {
                        "type": "string",
                        "description": "The timezone of the duplicated event.  \n For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).",
                        "example": "America/Indianapolis"
                      }
                    },
                    "description": "This field contains duplicated event configuration. It's only required when the operation is duplicate."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The event operation processed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the event operation. \n* `Duplicated`  &mdash; Duplicated the event from source event.\n* `Published` &mdash; Event successfully published.\n* `Cancelled` &mdash; Event successfully cancelled.",
                      "example": "Duplicated",
                      "enum": [
                        "duplicated",
                        "published",
                        "cancelled"
                      ]
                    },
                    "event_id": {
                      "type": "string",
                      "description": "The ID of the event will return a new duplicated event ID, if the operation is a duplicate event.",
                      "example": "kNqLPC6hSFiZ9NpgjA549w"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1001` <br>\n Invalid Event ID. <br>\n**Error Code:** `1002` <br>\n Invalid duplicated event name. <br>\n**Error Code:** `1002` <br>\n Invalid duplicated event start time. <br>\n**Error Code:** `1003` <br>\n Invalid duplicate event timezone. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_basic:write",
              "zoom_events_basic:write:admin",
              "zoom_events:write:event",
              "zoom_events:write:event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_basic:write",
            "zoom_events_basic:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:write:event",
            "zoom_events:write:event:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/exhibitors": {
      "get": {
        "tags": [
          "Exhibitors"
        ],
        "summary": "List Exhibitors",
        "description": "Lists all exhibitors associated with an event.\n\n\n\n**Scopes:** `zoom_events_exhibitors:read:admin`,`zoom_events_exhibitors:read`\n\n**Granular Scopes:** `zoom_events:read:list_exhibitors`,`zoom_events:read:list_exhibitors:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getExhibitors",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n A list of exhibitors.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Exhibitor pagination",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records.",
                      "example": 1
                    },
                    "exhibitors": {
                      "type": "array",
                      "description": "The list of exhibitors for the event.",
                      "items": {
                        "title": "List of all exhibitors associated with the event.",
                        "type": "object",
                        "properties": {
                          "exhibitor_id": {
                            "type": "string",
                            "description": "The exhibitors's ID.",
                            "example": "kNqLPC6hSFiZ9NpgjA549w"
                          },
                          "name": {
                            "type": "string",
                            "description": "The exhibitors's name.",
                            "example": "Fletchie Doe"
                          },
                          "is_sponsor": {
                            "type": "boolean",
                            "description": "The sponsorer's flag. It will be set to true by default.",
                            "example": true
                          },
                          "tier_id": {
                            "type": "string",
                            "description": "The sponsor tier ID for a particular event. This field only applies to a sponsor.",
                            "example": "4fgRIOXjQGmoH6raAzJf8g"
                          },
                          "description": {
                            "type": "string",
                            "description": "The exhibitor's description.",
                            "example": ""
                          },
                          "associated_sessions": {
                            "type": "array",
                            "description": "The sessions associated with the exhibitor or sponsor. The value is an array of sessionIds.",
                            "items": {
                              "type": "string",
                              "example": "[QnjbUW7ORu2sjvjNfjf_zQ, iERy5vUPRW259kk9l0zNbQ]"
                            }
                          },
                          "contact_name": {
                            "type": "string",
                            "description": "The contact's full name.",
                            "example": "John Doe"
                          },
                          "contact_email": {
                            "type": "string",
                            "description": "The contact's email address.",
                            "example": "abc.def@email.com"
                          },
                          "website": {
                            "type": "string",
                            "description": "The website URL.",
                            "example": "https://mywebsite.com/example"
                          },
                          "privacy_policy": {
                            "type": "string",
                            "description": "The privacy policy link.",
                            "example": "https://mywebsite.com/example"
                          },
                          "linkedin_url": {
                            "type": "string",
                            "description": "The link to the LinkedIn profile.",
                            "example": "https://linkedin.com/example"
                          },
                          "twitter_url": {
                            "type": "string",
                            "description": "The link to the Twitter profile.",
                            "example": "https://twitter.com/example"
                          },
                          "youtube_url": {
                            "type": "string",
                            "description": "The link to the YouTube profile.",
                            "example": "https://youtube.com/example"
                          },
                          "instagram_url": {
                            "type": "string",
                            "description": "The link to the Instagram profile.",
                            "example": "https://instagram.com/profile"
                          },
                          "facebook_url": {
                            "type": "string",
                            "description": "The link to the Facebook page.",
                            "example": "https://facebook.com/profile"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1006` <br>\n Operation is not supported for this event type.  <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `3011` <br>\n User is not a host. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_exhibitors:read:admin",
              "zoom_events_exhibitors:read",
              "zoom_events:read:list_exhibitors",
              "zoom_events:read:list_exhibitors:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_exhibitors:read:admin",
            "zoom_events_exhibitors:read"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_exhibitors",
            "zoom_events:read:list_exhibitors:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Exhibitors"
        ],
        "summary": "Create a Exhibitor",
        "description": "Creates an exhibitor for a multi-session and conference type event.\n\n**Scopes:** `zoom_events_exhibitors:write`,`zoom_events_exhibitors:write:admin`\n\n**Granular Scopes:** `zoom_events:write:exhibitor`,`zoom_events:write:exhibitor:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createExhibitor",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Exhibitor",
                "required": [
                  "contact_email",
                  "contact_name",
                  "is_sponsor",
                  "name",
                  "tier_id"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The exhibitors's name.",
                    "example": "Fletchie Doe"
                  },
                  "is_sponsor": {
                    "type": "boolean",
                    "description": "The sponsorer's flag. It will be set to true by default.",
                    "example": true
                  },
                  "tier_id": {
                    "type": "string",
                    "description": "The sponsor tier ID for a particular event. This field only applies to a sponsor.",
                    "example": "4fgRIOXjQGmoH6raAzJf8g"
                  },
                  "description": {
                    "type": "string",
                    "description": "The exhibitor's description.",
                    "example": ""
                  },
                  "associated_sessions": {
                    "type": "array",
                    "description": "The sessions associated with the exhibitor or sponsor. The value is an array of sessionIds.",
                    "items": {
                      "type": "string",
                      "example": "[QnjbUW7ORu2sjvjNfjf_zQ, iERy5vUPRW259kk9l0zNbQ]"
                    }
                  },
                  "contact_name": {
                    "type": "string",
                    "description": "The contact's full name.",
                    "example": "John Doe"
                  },
                  "contact_email": {
                    "type": "string",
                    "description": "The contact's email address.",
                    "example": "abc.def@email.com"
                  },
                  "website": {
                    "type": "string",
                    "description": "The website's URL.",
                    "example": "https://mywebsite.com/example"
                  },
                  "privacy_policy": {
                    "type": "string",
                    "description": "The privacy policy link.",
                    "example": "https://mywebsite.com/example"
                  },
                  "linkedin_url": {
                    "type": "string",
                    "description": "The link to the LinkedIn profile.",
                    "example": "https://linkedin.com/example"
                  },
                  "twitter_url": {
                    "type": "string",
                    "description": "The link to the Twitter profile.",
                    "example": "https://twitter.com/example"
                  },
                  "youtube_url": {
                    "type": "string",
                    "description": "The link to the YouTube profile.",
                    "example": "https://youtube.com/example"
                  },
                  "instagram_url": {
                    "type": "string",
                    "description": "The link to the Instagram profile.",
                    "example": "https://instagram.com/profile"
                  },
                  "facebook_url": {
                    "type": "string",
                    "description": "The link to the Facebook page.",
                    "example": "https://facebook.com/profile"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`   Speakers returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Exhibitor",
                  "type": "object",
                  "properties": {
                    "exhibitor_id": {
                      "type": "string",
                      "description": "The exhibitors's ID.",
                      "example": "kNqLPC6hSFiZ9NpgjA549w"
                    },
                    "name": {
                      "type": "string",
                      "description": "The exhibitors's name.",
                      "example": "John Doe"
                    },
                    "is_sponsor": {
                      "type": "boolean",
                      "description": "The sponsorer's flag. It will be set to true by default.",
                      "example": true
                    },
                    "tier_id": {
                      "type": "string",
                      "description": "The sponsor tier ID for a particular event. This field only applies to a sponsor.",
                      "example": "4fgRIOXjQGmoH6raAzJf8g"
                    },
                    "description": {
                      "type": "string",
                      "description": "The exhibitor's description.",
                      "example": ""
                    },
                    "associated_sessions": {
                      "type": "array",
                      "description": "The sessions associated with the exhibitor or sponsor. The value is an array of sessionIds.",
                      "items": {
                        "type": "string",
                        "example": "[QnjbUW7ORu2sjvjNfjf_zQ, iERy5vUPRW259kk9l0zNbQ]"
                      }
                    },
                    "contact_name": {
                      "type": "string",
                      "description": "The contact's full name.",
                      "example": "John Doe"
                    },
                    "contact_email": {
                      "type": "string",
                      "description": "The contact's email address.",
                      "example": "abc.def@email.com"
                    },
                    "website": {
                      "type": "string",
                      "description": "The website's URL.",
                      "example": "https://mywebsite.com/example"
                    },
                    "privacy_policy": {
                      "type": "string",
                      "description": "The privacy policy link.",
                      "example": "https://mywebsite.com/example"
                    },
                    "linkedin_url": {
                      "type": "string",
                      "description": "The link to the LinkedIn profile.",
                      "example": "https://linkedin.com/example"
                    },
                    "twitter_url": {
                      "type": "string",
                      "description": "The link to the Twitter profile.",
                      "example": "https://twitter.com/example"
                    },
                    "youtube_url": {
                      "type": "string",
                      "description": "The link to the YouTube profile.",
                      "example": "https://youtube.com/example"
                    },
                    "instagram_url": {
                      "type": "string",
                      "description": "The link to the Instagram profile.",
                      "example": "https://instagram.com/profile"
                    },
                    "facebook_url": {
                      "type": "string",
                      "description": "The link to the Facebook page.",
                      "example": "https://facebook.com/profile"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1006` <br>\n Operation is not supported for this event type.  <br>\n**Error Code:** `1020` <br>\n Exhibitor ID is invalid. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `3011` <br>\n User is not a host. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2006` <br>\n Exhibitor not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_exhibitors:write",
              "zoom_events_exhibitors:write:admin",
              "zoom_events:write:exhibitor",
              "zoom_events:write:exhibitor:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_exhibitors:write",
            "zoom_events_exhibitors:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:write:exhibitor",
            "zoom_events:write:exhibitor:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/exhibitors/{exhibitorId}": {
      "get": {
        "tags": [
          "Exhibitors"
        ],
        "summary": "Get an Exhibitor",
        "description": "Returns the exhibitor information of a specified event.\n\n \n\n**Scopes:** `zoom_events_exhibitors:read`,`zoom_events_exhibitors:read:admin`\n\n**Granular Scopes:** `zoom_events:read:exhibitor`,`zoom_events:read:exhibitor:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getExhibitorInfo",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "exhibitorId",
            "in": "path",
            "description": "The ID of the exhibitor.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \nEvent returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Exhibitor information",
                  "type": "object",
                  "properties": {
                    "exhibitor_id": {
                      "type": "string",
                      "description": "The exhibitors's ID.",
                      "example": "kNqLPC6hSFiZ9NpgjA549w"
                    },
                    "name": {
                      "type": "string",
                      "description": "The exhibitors's name.",
                      "example": "Fletchie Doe"
                    },
                    "is_sponsor": {
                      "type": "boolean",
                      "description": "A sponsorer's flag. It will be set to true by default.",
                      "example": true
                    },
                    "tier_id": {
                      "type": "string",
                      "description": "The sponsor tier ID for a particular event. This field only applies to a sponsor.",
                      "example": "4fgRIOXjQGmoH6raAzJf8g"
                    },
                    "description": {
                      "type": "string",
                      "description": "The exhibitor's description.",
                      "example": ""
                    },
                    "associated_sessions": {
                      "type": "array",
                      "description": "The sessions associated with the exhibitor or sponsor. The value is an array of sessionIds.",
                      "items": {
                        "type": "string",
                        "example": "[QnjbUW7ORu2sjvjNfjf_zQ, iERy5vUPRW259kk9l0zNbQ]"
                      }
                    },
                    "contact_name": {
                      "type": "string",
                      "description": "The contact's full name.",
                      "example": "John Doe"
                    },
                    "contact_email": {
                      "type": "string",
                      "description": "The contact's email address.",
                      "example": "abc.def@email.com"
                    },
                    "website": {
                      "type": "string",
                      "description": "The website's URL.",
                      "example": "https://mywebsite.com/example"
                    },
                    "privacy_policy": {
                      "type": "string",
                      "description": "The privacy policy link.",
                      "example": "https://mywebsite.com/example"
                    },
                    "linkedin_url": {
                      "type": "string",
                      "description": "The link to the LinkedIn profile.",
                      "example": "https://linkedin.com/example"
                    },
                    "twitter_url": {
                      "type": "string",
                      "description": "The link to the Twitter profile.",
                      "example": "https://twitter.com/example"
                    },
                    "youtube_url": {
                      "type": "string",
                      "description": "The link to the YouTube profile.",
                      "example": "https://youtube.com/example"
                    },
                    "instagram_url": {
                      "type": "string",
                      "description": "The link to the Instagram profile.",
                      "example": "https://instagram.com/profile"
                    },
                    "facebook_url": {
                      "type": "string",
                      "description": "The link to the Facebook page.",
                      "example": "https://facebook.com/profile"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1006` <br>\n Operation is not supported for this event type.  <br>\n**Error Code:** `1020` <br>\n Exhibitor ID is invalid. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `3011` <br>\n User is not a host. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2006` <br>\n Exhibitor not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_exhibitors:read",
              "zoom_events_exhibitors:read:admin",
              "zoom_events:read:exhibitor",
              "zoom_events:read:exhibitor:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_exhibitors:read",
            "zoom_events_exhibitors:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:exhibitor",
            "zoom_events:read:exhibitor:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Exhibitors"
        ],
        "summary": "Delete an exhibitor",
        "description": "Deletes an exhibitor.\n\n\n\n**Scopes:** `zoom_events_exhibitors:write`,`zoom_events_exhibitors:write:admin`\n\n**Granular Scopes:** `zoom_events:delete:exhibitor`,`zoom_events:delete:exhibitor:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteExhibitor",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "exhibitorId",
            "in": "path",
            "description": "The ID of the exhibitor.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nExhibitor deleted successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1006` <br>\n Operation is not supported for this event type.  <br>\n**Error Code:** `1020` <br>\n Exhibitor ID is invalid. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `3011` <br>\n User is not a host. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2006` <br>\n Exhibitor not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_exhibitors:write",
              "zoom_events_exhibitors:write:admin",
              "zoom_events:delete:exhibitor",
              "zoom_events:delete:exhibitor:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_exhibitors:write",
            "zoom_events_exhibitors:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:delete:exhibitor",
            "zoom_events:delete:exhibitor:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Exhibitors"
        ],
        "summary": "Update exhibitor for an event",
        "description": "Updates the exhibitor for an event ID. This operation is only allowed for multi session event type.\n\n**Scopes:** `zoom_events_exhibitors:write`,`zoom_events_exhibitors:write:admin`\n\n**Granular Scopes:** `zoom_events:update:exhibitor`,`zoom_events:update:exhibitor:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateExhibitor",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "exhibitorId",
            "in": "path",
            "description": "The ID of the exhibitor.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W38C8g0_SfmIzp5toOLoLQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Exhibitor information",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The exhibitors's name.",
                    "example": "Exhibitor name"
                  },
                  "is_sponsor": {
                    "type": "boolean",
                    "description": "The sponsor's flag. It will be set to true by default.",
                    "example": true
                  },
                  "sponsor_tier": {
                    "type": "string",
                    "description": "The sponsor tier ID for a particular event. This field only applies to sponsor.",
                    "example": "4fgRIOXjQGmoH6raAzJf8g"
                  },
                  "description": {
                    "type": "string",
                    "description": "The exhibitor's description.",
                    "example": ""
                  },
                  "associated_sessions": {
                    "type": "array",
                    "description": "The sessions associated the exhibitor or sponsorer. The value is an array of sessionIds.",
                    "items": {
                      "type": "string",
                      "example": "[QnjbUW7ORu2sjvjNfjf_zQ,iERy5vUPRW259kk9l0zNbQ]"
                    }
                  },
                  "contact_name": {
                    "type": "string",
                    "description": "The full name of the contact.",
                    "example": "John Doe"
                  },
                  "contact_email": {
                    "type": "string",
                    "description": "The contact email address.",
                    "example": "abc.def@email.com"
                  },
                  "website": {
                    "type": "string",
                    "description": "The website URL.",
                    "example": "https://mywebsite.com/example"
                  },
                  "privacy_policy": {
                    "type": "string",
                    "description": "The privacy policy link.",
                    "example": "https://mywebsite.com/example"
                  },
                  "linkedin_url": {
                    "type": "string",
                    "description": "The link to the LinkedIn profile.",
                    "example": "https://linkedin.com/example"
                  },
                  "twitter_url": {
                    "type": "string",
                    "description": "The link to the Twitter profile.",
                    "example": "https://twitter.com/example"
                  },
                  "youtube_url": {
                    "type": "string",
                    "description": "The link to the YouTube profile.",
                    "example": "https://youtube.com/example"
                  },
                  "instagram_url": {
                    "type": "string",
                    "description": "The link to the Instagram profile.",
                    "example": "https://instagram.com/profile"
                  },
                  "facebook_url": {
                    "type": "string",
                    "description": "The link to the Facebook page.",
                    "example": "https://facebook.com/profile"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSuccessfully updated the exhibitor."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1006` <br>\n Operation is not supported for this event type.  <br>\n**Error Code:** `1020` <br>\n Exhibitor ID is invalid. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `3011` <br>\n User is not a host. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2006` <br>\n Exhibitor not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_exhibitors:write",
              "zoom_events_exhibitors:write:admin",
              "zoom_events:update:exhibitor",
              "zoom_events:update:exhibitor:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_exhibitors:write",
            "zoom_events_exhibitors:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:exhibitor",
            "zoom_events:update:exhibitor:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/sponsor_tiers": {
      "get": {
        "tags": [
          "Exhibitors"
        ],
        "summary": "List Sponsor Tiers",
        "description": "Lists all sponsor tiers associated with an event.\n\n\n**Scopes:** `zoom_events_exhibitors:read:admin`,`zoom_events_exhibitors:read`\n\n**Granular Scopes:** `zoom_events:read:list_sponsor_tiers`,`zoom_events:read:list_sponsor_tiers:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "ListSponsorTiers",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n A list of sponsor_tiers.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Sponsor tiers pagination",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records.",
                      "example": 1
                    },
                    "sponsor_tiers": {
                      "type": "array",
                      "description": "The list of sponsor tiers for the event.",
                      "items": {
                        "title": "List of all sponsor tiers associated with the event.",
                        "type": "object",
                        "properties": {
                          "tier_id": {
                            "type": "string",
                            "description": "The sponsor tier ID.",
                            "example": "CvY9Azb0QwGid19eI1IlyQ"
                          },
                          "name": {
                            "type": "string",
                            "description": "The sponsor tier name after update.",
                            "example": "Updated Sponsor Tier name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The sponsor tier description.",
                            "example": "Platinum Sponsor Tier"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1006` <br>\n Operation is not supported for this event type.  <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `3011` <br>\n User is not a host. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_exhibitors:read:admin",
              "zoom_events_exhibitors:read",
              "zoom_events:read:list_sponsor_tiers",
              "zoom_events:read:list_sponsor_tiers:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_exhibitors:read:admin",
            "zoom_events_exhibitors:read"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_sponsor_tiers",
            "zoom_events:read:list_sponsor_tiers:admin"
          ]
        }
      }
    },
    "/zoom_events/hubs": {
      "get": {
        "tags": [
          "Hubs"
        ],
        "summary": "List hubs",
        "description": "Retrieve a list of event hubs.\n\n**Scopes:** `zoom_events_hubs:read`,`zoom_events_hubs:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_hubs`,`zoom_events:read:list_hubs:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getHubList",
        "parameters": [
          {
            "name": "role_type",
            "in": "query",
            "description": "The user role type:\n* `Host` &mdash; All hosted Hubs.\n* `Attendee` &mdash; All related Hubs.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "host",
              "default": "host",
              "enum": [
                "host",
                "attendee"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n A list of hubs.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Hubs Pagination Result",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records.",
                      "example": 1
                    },
                    "hubs": {
                      "type": "array",
                      "items": {
                        "title": "Hub",
                        "type": "object",
                        "properties": {
                          "hub_id": {
                            "type": "string",
                            "description": "The ID of the hub.",
                            "example": "4uzfv3JwTeyR5QpC3PXwMg"
                          },
                          "access_level": {
                            "type": "string",
                            "description": "The access level of the hub. \n*  `INTERNAL` -  internal organization\n* `PUBLIC` - the public hub ",
                            "example": "PUBLIC",
                            "enum": [
                              "INTERNAL",
                              "PUBLIC"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the hub.",
                            "example": "Example Hub Name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the hub.",
                            "example": "Test hub"
                          },
                          "public_url": {
                            "type": "string",
                            "description": "The public URL of the hub.",
                            "example": "https://example.zoom.us/myhub"
                          },
                          "hidden_hub": {
                            "type": "boolean",
                            "description": "This hub will be hidden from the Zoom Events details page and from the hub listings view for attendees.",
                            "example": true
                          },
                          "hub_active": {
                            "type": "boolean",
                            "description": "This hub will be active to create the Zoom Events.",
                            "example": true
                          },
                          "auto_list_events": {
                            "type": "boolean",
                            "description": "A list of submitted hub events.",
                            "example": true
                          },
                          "landing_hub": {
                            "type": "boolean",
                            "description": "Whether this Hub is landing Hub",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_hubs:read",
              "zoom_events_hubs:read:admin",
              "zoom_events:read:list_hubs",
              "zoom_events:read:list_hubs:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_hubs:read",
            "zoom_events_hubs:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_hubs",
            "zoom_events:read:list_hubs:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/registrants": {
      "get": {
        "tags": [
          "Registrants"
        ],
        "summary": "List registrants",
        "description": "Retrieves event registrants.\n\n**Scopes:** `zoom_events_registrants:read`,`zoom_events_registrants:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_registrants`,`zoom_events:read:list_registrants:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getRegistrants",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \nList of event registrants.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Registrants info PageToken pagination result",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of registrants.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "oLVRGBTZXI6Kt7zv0gb8Qy4h8cLNbzK1ig2"
                    },
                    "registrants": {
                      "type": "array",
                      "description": "Registrants",
                      "items": {
                        "title": "Registrant information",
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "The email address of the registrant.",
                            "example": "email@zoom.us"
                          },
                          "registration_status": {
                            "type": "string",
                            "description": "Registration status.",
                            "example": "INVITED",
                            "enum": [
                              "REGISTERED",
                              "INVITED",
                              "GIFTED",
                              "DIRECT_JOIN",
                              "PRE_REGISTERED",
                              "PRE_REGISTER_INVITED"
                            ]
                          },
                          "tickets": {
                            "type": "array",
                            "description": "Tickets list.",
                            "items": {
                              "title": "Ticket details",
                              "type": "object",
                              "properties": {
                                "ticket_id": {
                                  "type": "string",
                                  "description": "Ticket ID.",
                                  "example": "1234567"
                                },
                                "role": {
                                  "type": "string",
                                  "description": "Ticket Role.",
                                  "example": "INTERPRETER",
                                  "enum": [
                                    "ATTENDEE",
                                    "SPEAKER",
                                    "ALTERNATIVE_HOST",
                                    "PANELIST",
                                    "INTERPRETER",
                                    "SPONSOR",
                                    "EXPO_BOOTH_OWNER",
                                    "MODERATOR",
                                    "GUEST",
                                    "ORIGINAL_HOST"
                                  ]
                                },
                                "authentication_method": {
                                  "type": "string",
                                  "description": "The event authentication method for the ticket: \n * `zoom_account` Zoom account holder  * `zoom_account_otp` Sign in with Zoom account or with an email OTP  * `corporate_idp` Sign in to external Single Sign-On (SSO)  * `no_auth` No authentication",
                                  "example": "no_auth",
                                  "enum": [
                                    "zoom_account",
                                    "zoom_account_otp",
                                    "corporate_idp",
                                    "no_auth"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_registrants:read",
              "zoom_events_registrants:read:admin",
              "zoom_events:read:list_registrants",
              "zoom_events:read:list_registrants:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_registrants:read",
            "zoom_events_registrants:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_registrants",
            "zoom_events:read:list_registrants:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/sessions/{sessionId}/attendees": {
      "get": {
        "tags": [
          "Registrants"
        ],
        "summary": "List session attendees",
        "description": "Retrieves session attendees.\n\n**Scopes:** `zoom_events_registrants:read`,`zoom_events_registrants:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_session_attendees`,`zoom_events:read:list_session_attendees:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getSessionAttendeeList",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n List of requested session attendees.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of attendees",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of attendees.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "oLVRGBTZXI6Kt7zv0gb8Qy4h8cLNbzK1ig2"
                    },
                    "attendees": {
                      "type": "array",
                      "description": "Attendees",
                      "items": {
                        "title": "Attendees",
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "The email address of the attendee.",
                            "example": "email@zoom.us"
                          },
                          "authentication_method": {
                            "type": "string",
                            "description": "The event authentication method for the ticket: \n * `zoom_account` Zoom account holder  * `zoom_account_otp` Sign in with Zoom account or with an email OTP  * `corporate_idp` Sign in to external Single Sign-On (SSO)  * `no_auth` No authentication",
                            "example": "no_auth",
                            "enum": [
                              "zoom_account",
                              "zoom_account_otp",
                              "corporate_idp",
                              "no_auth"
                            ]
                          }
                        },
                        "description": "The session attendee."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n**Error Code:** `2003` <br>\n Session not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_registrants:read",
              "zoom_events_registrants:read:admin",
              "zoom_events:read:list_session_attendees",
              "zoom_events:read:list_session_attendees:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_registrants:read",
            "zoom_events_registrants:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_session_attendees",
            "zoom_events:read:list_session_attendees:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/reports/chat_transcripts": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get chat transcripts report",
        "description": "Retrieves the chat transcripts report for an event.  \n At this present time, this API returns data only for users who enabled [meeting and webinar cloud archiving feature](https://support.zoom.us/hc/en-us/articles/360061037572-Configuring-archival-settings-for-meetings-and-webinars).  \n Whether users can download in-meeting, private 1:1 and private group chats depends on the meeting and webinar cloud archiving feature.  \n Below chat types data is returned based on the event type and the archiving feature.  \n  * `If cloud archiving is enabled`:  \n **For multi-session events** - Lobby Chat, Private Lobby Chat, Event Staff Chat, Exhibitor Chat, Expo Booth Chat, Private 1: 1 Chat, Private Group Chat, In-meeting and webinar Chat .  \n  **For single session & recurring events** - In-meeting or webinar chat.  \n  * `If cloud archiving is not enabled`  :\n **For multi-session events** - Lobby Chat, Private Lobby Chat, Event Staff Chat, Exhibitor Chat, Expo Booth Chat.  \n  **For single session & recurring events** - None. \n \n\n**Scopes:** `zoom_events_reports:read`,`zoom_events_reports:read:admin`\n\n**Granular Scopes:** `zoom_events:read:chat_transcripts`,`zoom_events:read:chat_transcripts:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "ChatTranscriptsReport",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Use the next page token to paginate through a set of large results. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat transcription.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of Chat Transcripts",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records in the response.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "Use the next page token to paginate through a set of large results. A next page token returns whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.",
                      "example": "oLVRGBTZXI6Kt7zv0gb8Qy4h8cLNbzK1ig2"
                    },
                    "chat_transcripts": {
                      "type": "array",
                      "description": "The chat transcripts array.",
                      "items": {
                        "title": "Chat Transcripts",
                        "type": "object",
                        "properties": {
                          "chat_type": {
                            "type": "string",
                            "description": "The type of the chat. \n * `Lobby Chat` \n *  `Private Lobby Chat` \n *  `Event Staff Chat` \n * `Exhibitor Chat` \n * `Expo Booth Chat` \n * `Private 1:1 Chat` \n * `Private Group Chat` \n * `In-meeting/webinar Chat`",
                            "example": "Lobby Chat",
                            "enum": [
                              "Lobby Chat",
                              "Private Lobby Chat",
                              "Event Staff Chat",
                              "Exhibitor Chat",
                              "Expo Booth Chat",
                              "Private 1:1 Chat",
                              "Private Group Chat",
                              "In-meeting/webinar Chat"
                            ]
                          },
                          "chat_name": {
                            "type": "string",
                            "description": "The name of the chat.",
                            "example": "Lobby Chat - 1"
                          },
                          "sender": {
                            "type": "string",
                            "description": "The name of the message sender.",
                            "example": "James Brown"
                          },
                          "sender_email": {
                            "type": "string",
                            "description": "The email of the message sender.",
                            "example": "james.brown@zoomtest.us"
                          },
                          "message_time": {
                            "type": "string",
                            "description": "The message sent time in UTC time. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`",
                            "example": "2023-08-22T02:58:56Z"
                          },
                          "message": {
                            "type": "string",
                            "description": "The content of the message.",
                            "example": "Hi, How are you doing?"
                          },
                          "reset_time": {
                            "type": "string",
                            "description": "The chat reset time in UTC time. A host can reset/clear the chat. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`",
                            "example": "2023-08-22T02:58:56Z"
                          },
                          "reset_by_whom": {
                            "type": "string",
                            "description": "The name of the user who did the chat reset. A host can reset/clear the chat.",
                            "example": "Tom Brown"
                          },
                          "chat_channel_id": {
                            "type": "string",
                            "description": "Chat channel ID ",
                            "example": "asfasdfasdf12312"
                          },
                          "message_id": {
                            "type": "string",
                            "description": "Message ID: Unique Identifier of the chat message.",
                            "example": "d1231241sfdsdfs"
                          }
                        },
                        "description": "The chat transcripts."
                      }
                    }
                  },
                  "description": "The chat transcripts array."
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n **Error Code:** `5001` <br>\n Chat messages are not available for download now. Please try again later. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_reports:read",
              "zoom_events_reports:read:admin",
              "zoom_events:read:chat_transcripts",
              "zoom_events:read:chat_transcripts:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_reports:read",
            "zoom_events_reports:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:chat_transcripts",
            "zoom_events:read:chat_transcripts:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/reports/event_attendance": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Event Attendance Report",
        "description": "Retrieves event attendance report.\n\n**Scopes:** `zoom_events_reports:read`,`zoom_events_reports:read:admin`\n\n**Granular Scopes:** `zoom_events:read:event_attendance`,`zoom_events:read:event_attendance:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "EventAttendanceReport",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`<br>\n List of requested session attendees.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of Registrations",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "oLVRGBTZXI6Kt7zv0gb8Qy4h8cLNbzK1ig2"
                    },
                    "attendees": {
                      "type": "array",
                      "items": {
                        "title": "Registrations",
                        "type": "object",
                        "properties": {
                          "display_name": {
                            "type": "string",
                            "description": "The registrant display name.",
                            "example": "First Last"
                          },
                          "first_name": {
                            "type": "string",
                            "description": "The registrant first name.",
                            "example": "First"
                          },
                          "last_name": {
                            "type": "string",
                            "description": "The registrant Last name.",
                            "example": "Last"
                          },
                          "email": {
                            "type": "string",
                            "description": "The email address of the attendee.",
                            "example": "email@zoom.us"
                          },
                          "opt_in_marketing": {
                            "type": "number",
                            "description": "The marketing Opt in flag \n * `1. Opted for marketing`  \n *  `0 - Not opted for marketing` ",
                            "example": 1,
                            "enum": [
                              1,
                              0
                            ]
                          },
                          "marketing_consent_prechecked": {
                            "type": "number",
                            "description": "The marketing consent is pre-checked? \n * `1 - pre-checked`  \n *  `0 - Not pre-checked `\n *  `-1 - Not avaialable `",
                            "example": 1,
                            "enum": [
                              1,
                              0,
                              -1
                            ]
                          },
                          "event_attendance": {
                            "type": "string",
                            "description": "The registrant event attendance status \n * `attended - Attended`  \n *  `absent - Not attended `",
                            "example": "attended",
                            "enum": [
                              "attended",
                              "absent"
                            ]
                          },
                          "attendance_type": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "The registrant attendance type. \n * hybrid|virtual|in_person ",
                              "example": "hybrid",
                              "enum": [
                                "hybrid",
                                "virtual",
                                "in_person"
                              ]
                            }
                          },
                          "lobby_attendance": {
                            "type": "string",
                            "description": "The registrant lobby Attendance status. \n * `attended - Attended`  \n *  `absent - Not attended `",
                            "example": "attended",
                            "enum": [
                              "attended",
                              "absent"
                            ]
                          },
                          "lobby_chat_sent": {
                            "type": "number",
                            "description": "The number of lobby chat messages sent.",
                            "example": 2
                          },
                          "survey_taken": {
                            "type": "number",
                            "description": "The survey taken.",
                            "example": 0
                          },
                          "total_sessions_joined": {
                            "type": "number",
                            "description": "Total sessions joined.",
                            "example": 0
                          },
                          "number_of_tickets": {
                            "type": "number",
                            "description": "Total number of tickets.",
                            "example": 0
                          },
                          "role": {
                            "type": "string",
                            "description": "The attendee role.",
                            "example": "General"
                          },
                          "tickets": {
                            "type": "array",
                            "items": {
                              "title": "ticket",
                              "type": "object",
                              "properties": {
                                "ticket_type_name": {
                                  "type": "string",
                                  "description": "The ticket type name.",
                                  "example": "General Ticket"
                                },
                                "ticket_type_id": {
                                  "type": "string",
                                  "description": "The ticket type identifier.",
                                  "example": "Fn2rBZgJQzi6VIU--uWqnA"
                                },
                                "external_ticket_id": {
                                  "type": "string",
                                  "description": "A set of unique alphanumeric characters that references the external ticket ID.",
                                  "example": "iso9Djldop39dagjLj3j"
                                },
                                "ticket_id": {
                                  "type": "string",
                                  "description": "The ticket identifier.",
                                  "example": "Fn2rBZgJQzi6VIUABuWcqB"
                                },
                                "authentication_method": {
                                  "type": "string",
                                  "description": "The Authentication type for the event attendees \n * `zoom_account` Zoom Account Holder \n * `zoom_account_otp` Zoom Account Holder with OTP \n * `corporate_idp` Corporate IDP \n * `no_auth` No Auth",
                                  "example": "no_auth",
                                  "enum": [
                                    "zoom_account",
                                    "zoom_account_otp",
                                    "corporate_idp",
                                    "no_auth"
                                  ]
                                },
                                "questions": {
                                  "type": "array",
                                  "items": {
                                    "title": "TicketQuestionAnswers",
                                    "type": "object",
                                    "properties": {
                                      "title": {
                                        "type": "string",
                                        "description": "The question title.",
                                        "example": "First Name"
                                      },
                                      "answer": {
                                        "type": "string",
                                        "description": "The question answer.",
                                        "example": "Michael"
                                      }
                                    },
                                    "description": "The ticket registration questions and answers."
                                  }
                                }
                              },
                              "description": "The ticket registrations."
                            }
                          },
                          "session_attendance": {
                            "type": "array",
                            "items": {
                              "title": "SessionAttendance",
                              "type": "object",
                              "properties": {
                                "session_id": {
                                  "type": "string",
                                  "description": "The session identifier.",
                                  "example": "Pn9rBZgJQzi6RXUABmWcqB"
                                },
                                "session_name": {
                                  "type": "string",
                                  "description": "The session name.",
                                  "example": "Session one"
                                },
                                "session_attendance": {
                                  "type": "string",
                                  "description": "The session attendance status. \n * attended \n * absent",
                                  "example": "attended",
                                  "enum": [
                                    "absent",
                                    "attended"
                                  ]
                                },
                                "duration_spent_in_session": {
                                  "type": "number",
                                  "description": "The number of minutes spent in the session.",
                                  "example": 20
                                },
                                "chat_messages_sent": {
                                  "type": "number",
                                  "description": "The number of chat messages sent.",
                                  "example": 20
                                },
                                "connection_made": {
                                  "type": "number",
                                  "description": "The number of networking connections made.",
                                  "example": 20
                                },
                                "material_download": {
                                  "type": "boolean",
                                  "description": "The material downloaded status. \n * true \n * false",
                                  "example": true
                                },
                                "recording_view": {
                                  "type": "boolean",
                                  "description": "The recording view status. \n * true \n * false",
                                  "example": false
                                },
                                "live_stream_view": {
                                  "type": "boolean",
                                  "description": "The live stream view status. \n * true \n * false",
                                  "example": false
                                },
                                "recording_view_duration": {
                                  "type": "number",
                                  "description": "The recording view duration in minutes.",
                                  "example": 20
                                },
                                "live_streaming_view_duration": {
                                  "type": "number",
                                  "description": "The live streaming view duration in minutes.",
                                  "example": 30
                                }
                              },
                              "description": "The session attendance information."
                            }
                          },
                          "profile_created": {
                            "type": "boolean",
                            "description": "The attendee profile is created or not. \n * true \n * false",
                            "example": false
                          },
                          "personal_chats": {
                            "type": "number",
                            "description": "The number of chats.",
                            "example": 0
                          }
                        },
                        "description": "The ticket registrations."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_reports:read",
              "zoom_events_reports:read:admin",
              "zoom_events:read:event_attendance",
              "zoom_events:read:event_attendance:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_reports:read",
            "zoom_events_reports:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:event_attendance",
            "zoom_events:read:event_attendance:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/reports/survey": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Event Survey Report",
        "description": "Retrieves event and session survey information.\n\n**Scopes:** `zoom_events_reports:read`,`zoom_events_reports:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_session_surveys`,`zoom_events:read:list_session_surveys:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "EventSurveyReportApi",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`List of event survey information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of Survey records",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records in the current response.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 10 minutes.",
                      "example": "oLVRGBTZXI6Kt7zv0gb8Qy4h8cLNbzK1ig2"
                    },
                    "surveys": {
                      "type": "array",
                      "items": {
                        "title": "Surveys",
                        "type": "object",
                        "properties": {
                          "session_name": {
                            "type": "string",
                            "description": "The name of the session - both session ID and session name is not present, these surveys questions belongs to event.",
                            "example": "Introduction"
                          },
                          "session_id": {
                            "type": "string",
                            "description": "The ID of the session - both session ID and session name is not present, these surveys questions belongs to event.",
                            "example": "ZALMy1b8RRiK810bVL-wFg"
                          },
                          "email": {
                            "type": "string",
                            "description": "The email address of the person who took the survey. The email will not show  if the survey taken as anonymous user.",
                            "example": "ZALMy1b8RRiK810bVL-wFg"
                          },
                          "question_and_answers": {
                            "type": "array",
                            "items": {
                              "title": "question_and_answers",
                              "type": "object",
                              "properties": {
                                "question": {
                                  "type": "string",
                                  "description": "The question title.",
                                  "example": "What is your favorite type of ice cream flavor?"
                                },
                                "answer": {
                                  "type": "string",
                                  "description": "The survey answer.",
                                  "example": "Chocolate"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `400 ` <br>\n Invalid page_size/event_id/next_page_token. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `403` <br>\n Access denied. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `404` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_reports:read",
              "zoom_events_reports:read:admin",
              "zoom_events:read:list_session_surveys",
              "zoom_events:read:list_session_surveys:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_reports:read",
            "zoom_events_reports:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_session_surveys",
            "zoom_events:read:list_session_surveys:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/reports/ticket_registration": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Event Registrations Report",
        "description": "Retrieves event ticket registrations.\n\n**Scopes:** `zoom_events_reports:read`,`zoom_events_reports:read:admin`\n\n**Granular Scopes:** `zoom_events:read:event_registration`,`zoom_events:read:event_registration:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "EventRegistrationsReport",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`<br>\nList of event ticket registrations.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of Registrations",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
                      "example": "oLVRGBTZXI6Kt7zv0gb8Qy4h8cLNbzK1ig2"
                    },
                    "registrations": {
                      "type": "array",
                      "items": {
                        "title": "Registrations",
                        "type": "object",
                        "properties": {
                          "display_name": {
                            "type": "string",
                            "description": "The registrant display name.",
                            "example": "First Last"
                          },
                          "first_name": {
                            "type": "string",
                            "description": "The registrant first name.",
                            "example": "First"
                          },
                          "last_name": {
                            "type": "string",
                            "description": "The registrant Last name.",
                            "example": "Last"
                          },
                          "email": {
                            "type": "string",
                            "description": "The email address of the attendee.",
                            "example": "email@zoom.us"
                          },
                          "opt_in_marketing": {
                            "type": "number",
                            "description": "Marketing Opt in \n * `1. Opted for marketing`  \n *  `0 - Not opted for marketing` ",
                            "example": 0,
                            "enum": [
                              1,
                              0
                            ]
                          },
                          "marketing_consent_prechecked": {
                            "type": "number",
                            "description": "The marketing Opt is flag \n * `1. Opted for marketing`  \n *  `0 - Not opted for marketing` \n `-1 not available` ",
                            "example": 0,
                            "enum": [
                              1,
                              0,
                              -1
                            ]
                          },
                          "register_date": {
                            "type": "string",
                            "description": "The registrant date in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ",
                            "format": "date-time",
                            "example": "2022-03-24T22:30:00Z"
                          },
                          "event_attendance": {
                            "type": "string",
                            "description": "The registrant attendance status.\n * `attended - Attended`  \n *  `absent - Not attended `",
                            "example": "attended",
                            "enum": [
                              "attended",
                              "absent"
                            ]
                          },
                          "attendance_type": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "The registrant attendance type. \n * hybrid|virtual|in_person ",
                              "example": "hybrid",
                              "enum": [
                                "hybrid",
                                "virtual",
                                "in_person"
                              ]
                            }
                          },
                          "registration_method": {
                            "type": "string",
                            "description": "The registration method. \n * self-registration \n * Other ",
                            "example": "Self-registration",
                            "enum": [
                              "self-registration",
                              "other"
                            ]
                          },
                          "tickets": {
                            "type": "array",
                            "items": {
                              "title": "ticket",
                              "type": "object",
                              "properties": {
                                "ticket_type_name": {
                                  "type": "string",
                                  "description": "The ticket type name.",
                                  "example": "General Ticket"
                                },
                                "ticket_type_id": {
                                  "type": "string",
                                  "description": "The ticket type identifier.",
                                  "example": "Fn2rBZgJQzi6VIU--uWqnA"
                                },
                                "external_ticket_id": {
                                  "type": "string",
                                  "description": "A set of unique alphanumeric characters that references the external ticket ID.",
                                  "example": "iso9Djldop39dagjLj3j"
                                },
                                "ticket_id": {
                                  "type": "string",
                                  "description": "The ticket identifier.",
                                  "example": "Fn2rBZgJQzi6VIUABuWcqB"
                                },
                                "authentication_method": {
                                  "type": "string",
                                  "description": "The Authentication type for the event attendees \n * `zoom_account` Zoom Account Holder \n * `zoom_account_otp` Zoom Account Holder with OTP \n * `corporate_idp` Corporate IDP \n * `no_auth` No Auth",
                                  "example": "no_auth",
                                  "enum": [
                                    "zoom_account",
                                    "zoom_account_otp",
                                    "corporate_idp",
                                    "no_auth"
                                  ]
                                },
                                "questions": {
                                  "type": "array",
                                  "items": {
                                    "title": "TicketQuestionAnswers",
                                    "type": "object",
                                    "properties": {
                                      "title": {
                                        "type": "string",
                                        "description": "The question title.",
                                        "example": "First Name"
                                      },
                                      "answer": {
                                        "type": "string",
                                        "description": "The question answer.",
                                        "example": "Michael"
                                      }
                                    },
                                    "description": "The ticket registration questions and answers."
                                  }
                                }
                              },
                              "description": "The ticket registrations."
                            }
                          }
                        },
                        "description": "The ticket registrations."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_reports:read",
              "zoom_events_reports:read:admin",
              "zoom_events:read:event_registration",
              "zoom_events:read:event_registration:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_reports:read",
            "zoom_events_reports:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:event_registration",
            "zoom_events:read:event_registration:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/sessions": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "List sessions",
        "description": "Retrieves the sessions in an event.\n\n**Scopes:** `zoom_events_sessions:read`,`zoom_events_sessions:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_sessions`,`zoom_events:read:list_sessions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getEventSessionList",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n List of requested sessions.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of sessions",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of sessions.",
                      "example": 1
                    },
                    "sessions": {
                      "type": "array",
                      "items": {
                        "title": "Event Session",
                        "description": "The information about the event session.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "timezone": {
                                "type": "string",
                                "description": "The timezone of the event.",
                                "example": "America/New_York"
                              },
                              "type": {
                                "type": "integer",
                                "description": "The type of session:\n * `0` meeting\n * `2` webinar",
                                "format": "int32",
                                "example": 2,
                                "enum": [
                                  0,
                                  2
                                ]
                              },
                              "meeting_id": {
                                "type": "integer",
                                "description": "The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-) in **long** format(represented as int64 data type in JSON), also known as the meeting number. Applicable, if the session type is of meeting ( i.e type = 0). This id is null for an unpublished event.",
                                "format": "int64",
                                "example": 97763643886
                              },
                              "webinar_id": {
                                "type": "integer",
                                "description": "The webinar ID in **long** format(represented as int64 data type in JSON), also known as the webinar number. Applicable, if the session type is of webinar ( i.e type = 2). This id is null for an unpublished event.",
                                "format": "int64",
                                "example": 97871060099
                              }
                            }
                          },
                          {
                            "title": "Event Session",
                            "type": "object",
                            "properties": {
                              "session_id": {
                                "type": "string",
                                "description": "The ID of the session.",
                                "example": "4uzfv3JwTeyR5QpC3PXwMg"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the session.",
                                "example": "Session 1"
                              },
                              "description": {
                                "type": "string",
                                "description": "This is a description of the session.",
                                "example": "Educational Session on ZoomEvents"
                              },
                              "start_time": {
                                "type": "string",
                                "description": "The start time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`",
                                "format": "date-time",
                                "example": "2022-05-31T13:00:00Z"
                              },
                              "end_time": {
                                "type": "string",
                                "description": "The end time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`",
                                "format": "date-time",
                                "example": "2022-05-31T13:00:00Z"
                              },
                              "session_speakers": {
                                "maxItems": 200,
                                "minItems": 0,
                                "type": "array",
                                "description": "The speakers join as attendees in a meeting session and as panelists in a webinar session.",
                                "items": {
                                  "title": "The session speaker",
                                  "type": "object",
                                  "properties": {
                                    "speaker_id": {
                                      "type": "string",
                                      "description": "The ID of the session speaker.",
                                      "example": "4uzfv3JwTeyR5QpC3PXwMg"
                                    },
                                    "access_to_edit_session": {
                                      "type": "boolean",
                                      "description": "Whether the speaker has access to edit the session information.",
                                      "example": true
                                    },
                                    "show_in_session_detail": {
                                      "type": "boolean",
                                      "description": "Whether to show the speaker information under session details.",
                                      "example": true
                                    },
                                    "has_alternative_host_permission": {
                                      "type": "boolean",
                                      "description": "Whether the speaker can act as an alternative host for the session.",
                                      "example": true
                                    },
                                    "meeting_role": {
                                      "type": "integer",
                                      "description": "The role of the speaker in a meeting:\n * `0` ALTERNATIVE_HOST\n * `1` ATTENDEE\n * `2` PANELIST\n",
                                      "format": "int32",
                                      "example": 2,
                                      "enum": [
                                        0,
                                        1,
                                        2
                                      ]
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the speaker.",
                                      "example": "Speaker-1"
                                    },
                                    "company": {
                                      "type": "string",
                                      "description": "The company name of the speaker.",
                                      "example": "Zoom"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "The job title of the speaker.",
                                      "example": "Product Lead"
                                    }
                                  },
                                  "description": "The speaker joins a session as an attendee in a meeting session and as a panelist in a webinar session."
                                }
                              },
                              "featured": {
                                "type": "boolean",
                                "description": "Whether the session is featured.",
                                "example": true
                              },
                              "visible_in_landing_page": {
                                "type": "boolean",
                                "description": "Whether the session is visible in landing page.",
                                "example": true
                              },
                              "featured_in_lobby": {
                                "type": "boolean",
                                "description": "Whether the session is featured in the event lobby.",
                                "example": false
                              },
                              "visible_in_lobby": {
                                "type": "boolean",
                                "description": "Whether the session is visible in event lobby.",
                                "example": true
                              },
                              "is_simulive": {
                                "type": "boolean",
                                "description": "Whether the webinar is `simulive`.",
                                "example": true
                              },
                              "record_file_id": {
                                "type": "string",
                                "description": "The previously recorded file's ID for `simulive`.",
                                "example": "f09340e1-cdc3-4eae-9a74-98f9777ed908"
                              },
                              "chat_channel": {
                                "type": "boolean",
                                "description": "Whether session chat in lobby is enabled.\nAttendees need to have Zoom Chat enabled by their Account Admin to view and participate in the conference chat.",
                                "example": true
                              },
                              "led_by_sponsor": {
                                "type": "boolean",
                                "description": "Whether the session is led by a sponsor.",
                                "example": false
                              },
                              "track_labels": {
                                "type": "array",
                                "description": "The track or classification that separates events into different categories. Tickets for these tracks link to specific sessions. Only ticket holders can join these sessions.",
                                "items": {
                                  "type": "string",
                                  "example": "Technical Track"
                                }
                              },
                              "audience_labels": {
                                "type": "array",
                                "description": "The list of audience type tags for the session.",
                                "items": {
                                  "type": "string",
                                  "example": "Family"
                                }
                              },
                              "product_labels": {
                                "type": "array",
                                "description": "The list of product type tags for the session.",
                                "items": {
                                  "type": "string",
                                  "example": "zoomMeeting"
                                }
                              },
                              "level": {
                                "type": "array",
                                "description": "The list of level type tags for the session.",
                                "items": {
                                  "type": "string",
                                  "example": "Level-1"
                                }
                              },
                              "alternative_host": {
                                "type": "array",
                                "description": "The list of alternative hosts. Alternative hosts can start the session on the host&rsquo;s behalf. The &quot;Alternative Host&quot; ticket is auto-assigned to alternative hosts.",
                                "items": {
                                  "type": "string",
                                  "description": "The email address of the alternative host.",
                                  "example": "abc.cd@email.com"
                                }
                              },
                              "panelist": {
                                "type": "array",
                                "description": "The speaker joins session as an attendee in a meeting session and as a panelist in a webinar session.\n Panelist can mute or unmute themselves, start or stop their own video, view and respond to all questions and answers.",
                                "items": {
                                  "type": "string",
                                  "description": "The email address of the panelist.",
                                  "example": "abc.cd@email.com"
                                }
                              },
                              "interpreter_languages": {
                                "type": "array",
                                "description": "The languages available for interpretations.",
                                "items": {
                                  "title": "Interpretation Context",
                                  "type": "object",
                                  "properties": {
                                    "language_id": {
                                      "type": "string",
                                      "description": "The language ID for translation.",
                                      "example": "EN"
                                    },
                                    "language_display_name": {
                                      "type": "string",
                                      "description": "The name of the language.",
                                      "example": "English"
                                    }
                                  }
                                }
                              },
                              "sign_interpreter_languages": {
                                "type": "array",
                                "description": "The available sign interpretation languages.",
                                "items": {
                                  "title": "Interpretation Context",
                                  "type": "object",
                                  "properties": {
                                    "language_id": {
                                      "type": "string",
                                      "description": "The language ID for translation.",
                                      "example": "EN"
                                    },
                                    "language_display_name": {
                                      "type": "string",
                                      "description": "The name of the language.",
                                      "example": "English"
                                    }
                                  }
                                }
                              },
                              "attendance_type": {
                                "type": "string",
                                "description": "The type of attendee experience for the event. \n * `virtual`  virtual attendees only \n * `in-person` in-person attendees only \n * `hybrid`  both in-person and virtual attendees",
                                "example": "hybrid",
                                "enum": [
                                  "virtual",
                                  "in-person",
                                  "hybrid"
                                ]
                              },
                              "physical_location": {
                                "type": "string",
                                "description": "The physical location of the event. This field is applicable for Hybrid and in-person events only.",
                                "example": "801 Mt Vernon Pl NW, Washington, DC 20001"
                              }
                            },
                            "description": "The information about the event session."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:read",
              "zoom_events_sessions:read:admin",
              "zoom_events:read:list_sessions",
              "zoom_events:read:list_sessions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:read",
            "zoom_events_sessions:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_sessions",
            "zoom_events:read:list_sessions:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create a session",
        "description": "Creates a session. This operation is not available for single session event type.\n\n**Scopes:** `zoom_events_sessions:write:admin`,`zoom_events_sessions:write`\n\n**Granular Scopes:** `zoom_events:write:session`,`zoom_events:write:session:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createEventSession",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Event Session",
                "required": [
                  "end_time",
                  "name",
                  "start_time",
                  "timezone",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the session.",
                    "example": "Session 1"
                  },
                  "description": {
                    "type": "string",
                    "description": "This is a description of the session. This field does not support the Richtext Description field in the UI.",
                    "example": "Educational Session on ZoomEvents"
                  },
                  "start_time": {
                    "type": "string",
                    "description": "The start time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                    "format": "date-time",
                    "example": "2022-05-31T13:00:00Z"
                  },
                  "end_time": {
                    "type": "string",
                    "description": "The end time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`.",
                    "format": "date-time",
                    "example": "2022-05-31T13:00:00Z"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "The timezone of the event.  \n For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).",
                    "example": "America/New_York"
                  },
                  "type": {
                    "type": "integer",
                    "description": "The type of session:\n * `0`- meeting.\n * `2`- webinar.",
                    "format": "int32",
                    "example": 2,
                    "enum": [
                      0,
                      2
                    ]
                  },
                  "session_speakers": {
                    "maxItems": 200,
                    "minItems": 0,
                    "type": "array",
                    "description": "The speakers joins a session as an attendee in a meeting session and as panelists in a webinar session.",
                    "items": {
                      "title": "The session speaker",
                      "type": "object",
                      "properties": {
                        "speaker_id": {
                          "type": "string",
                          "description": "The ID of the session speaker.",
                          "example": "4uzfv3JwTeyR5QpC3PXwMg"
                        },
                        "access_to_edit_session": {
                          "type": "boolean",
                          "description": "Whether the speaker has access to edit the session information.",
                          "example": true
                        },
                        "show_in_session_detail": {
                          "type": "boolean",
                          "description": "Whether to show the speaker information under session details.",
                          "example": true
                        },
                        "has_alternative_host_permission": {
                          "type": "boolean",
                          "description": "Whether the speaker can act as an alternative host for the session.",
                          "example": true
                        }
                      },
                      "description": "The speaker joins a session as an attendee in a meeting session and as a panelist in a webinar session."
                    }
                  },
                  "featured": {
                    "type": "boolean",
                    "description": "Whether the session is featured.",
                    "example": true
                  },
                  "visible_in_landing_page": {
                    "type": "boolean",
                    "description": "Whether the session is visible in landing page.",
                    "example": true,
                    "default": true
                  },
                  "featured_in_lobby": {
                    "type": "boolean",
                    "description": "Whether the session is marked as featured in the event lobby.",
                    "example": false
                  },
                  "visible_in_lobby": {
                    "type": "boolean",
                    "description": "Whether the session is visible in event lobby.",
                    "example": true,
                    "default": true
                  },
                  "is_simulive": {
                    "type": "boolean",
                    "description": "Whether the webinar is `simulive`.",
                    "example": true
                  },
                  "record_file_id": {
                    "type": "string",
                    "description": "The previously recorded file's ID for `simulive`.",
                    "example": "f09340e1-cdc3-4eae-9a74-98f9777ed908"
                  },
                  "chat_channel": {
                    "type": "boolean",
                    "description": "Whether the session chat in the lobby is enabled.\n*Attendees need to have Zoom Chat enabled by their account admin to view and participate in the conference chat.",
                    "example": true
                  },
                  "led_by_sponsor": {
                    "type": "boolean",
                    "description": "Whether the session is hosted by a sponsor.",
                    "example": false
                  },
                  "track_labels": {
                    "type": "array",
                    "description": "The track or classification that separates events into different categories. Tickets for these tracks link to specific sessions. Only ticket holders can join these sessions.",
                    "items": {
                      "type": "string",
                      "example": "Technical Track"
                    }
                  },
                  "audience_labels": {
                    "type": "array",
                    "description": "The list of audience type tags for the session.",
                    "items": {
                      "type": "string",
                      "example": "Family"
                    }
                  },
                  "product_labels": {
                    "type": "array",
                    "description": "The list of product type tags for the session.",
                    "items": {
                      "type": "string",
                      "example": "zoomMeeting"
                    }
                  },
                  "level": {
                    "type": "array",
                    "description": "The list of level type tags for the session.",
                    "items": {
                      "type": "string",
                      "example": "Level-1"
                    }
                  },
                  "alternative_host": {
                    "type": "array",
                    "description": "The list of alternative hosts. Alternative hosts can start the session on the hosts behalf. The &quot;Alternative Host&quot; ticket is auto-assigned to alternative hosts.",
                    "items": {
                      "type": "string",
                      "description": "The email address of the alternative host.",
                      "example": "abc.cd@email.com"
                    }
                  },
                  "panelist": {
                    "type": "array",
                    "description": "The speaker joins session as an attendee in a meeting session and as a panelist in a webinar session.\n Panelist can mute or unmute themselves, start or stop their own video, view and respond to all questions and answers.",
                    "items": {
                      "type": "string",
                      "description": "The email address of the panelist.",
                      "example": "abc.cd@email.com"
                    }
                  },
                  "attendance_type": {
                    "type": "string",
                    "description": "The type of attendee experience for the event. \n * `Virtual` &mdash; virtual attendees only. \n * `In-person` &mdash; in-person attendees only. \n * `Hybrid` &mdash; both in-person and virtual attendees.",
                    "example": "hybrid",
                    "enum": [
                      "virtual",
                      "in-person",
                      "hybrid"
                    ]
                  },
                  "physical_location": {
                    "type": "string",
                    "description": "The physical location of the event. This field is applicable for hybrid and in-person events only.",
                    "example": "801 Mt Vernon Pl NW, Washington, DC 20001"
                  }
                },
                "description": "The information about the event session."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`  \n \nSession created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Event Session",
                  "description": "The information about the event session.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "timezone": {
                          "type": "string",
                          "description": "The timezone of the event.",
                          "example": "America/New_York"
                        },
                        "type": {
                          "type": "integer",
                          "description": "The type of session:\nEnum:\n * `0` - meeting.\n * `2`- webinar.",
                          "format": "int32",
                          "example": 2,
                          "enum": [
                            0,
                            2
                          ]
                        }
                      }
                    },
                    {
                      "title": "Event Session",
                      "type": "object",
                      "properties": {
                        "session_id": {
                          "type": "string",
                          "description": "The ID of the session.",
                          "example": "4uzfv3JwTeyR5QpC3PXwMg"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the session.",
                          "example": "Session 1"
                        },
                        "description": {
                          "type": "string",
                          "description": "The description of the session.This is a description of the session. This field does NOT support the Richtext Description field in the UI.",
                          "example": "Educational Session on ZoomEvents"
                        },
                        "start_time": {
                          "type": "string",
                          "description": "The start time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`",
                          "format": "date-time",
                          "example": "2022-05-31T13:00:00Z"
                        },
                        "end_time": {
                          "type": "string",
                          "description": "The end time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`",
                          "format": "date-time",
                          "example": "2022-05-31T13:00:00Z"
                        },
                        "session_speakers": {
                          "maxItems": 200,
                          "minItems": 0,
                          "type": "array",
                          "description": "The speakers join as attendees in a meeting session and as panelists in a webinar session.",
                          "items": {
                            "title": "The session speaker",
                            "type": "object",
                            "properties": {
                              "speaker_id": {
                                "type": "string",
                                "description": "The ID of the session speaker.",
                                "example": "4uzfv3JwTeyR5QpC3PXwMg"
                              },
                              "access_to_edit_session": {
                                "type": "boolean",
                                "description": "Whether the speaker has access to edit the session information.",
                                "example": true
                              },
                              "show_in_session_detail": {
                                "type": "boolean",
                                "description": "Whether to show the speaker information under session details.",
                                "example": true
                              },
                              "has_alternative_host_permission": {
                                "type": "boolean",
                                "description": "Whether the speaker can act as an alternative host for the session.",
                                "example": true
                              },
                              "meeting_role": {
                                "type": "integer",
                                "description": "The role of the speaker in a meeting:\nEnum:\n * `0` ALTERNATIVE_HOST\n * `1` ATTENDEE\n * `2` PANELIST\n",
                                "format": "int32",
                                "example": 2,
                                "enum": [
                                  0,
                                  1,
                                  2
                                ]
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the speaker.",
                                "example": "Speaker-1"
                              },
                              "company": {
                                "type": "string",
                                "description": "The company name of the speaker.",
                                "example": "Zoom"
                              },
                              "title": {
                                "type": "string",
                                "description": "The job title of the speaker.",
                                "example": "Product Lead"
                              }
                            },
                            "description": "The speaker joins a session as an attendee in a meeting session and as a panelist in a webinar session."
                          }
                        },
                        "featured": {
                          "type": "boolean",
                          "description": "Whether the session is featured.",
                          "example": true
                        },
                        "visible_in_landing_page": {
                          "type": "boolean",
                          "description": "Whether the session is visible in the landing page.",
                          "example": true
                        },
                        "featured_in_lobby": {
                          "type": "boolean",
                          "description": "Whether the session is featured in the event lobby.",
                          "example": false
                        },
                        "visible_in_lobby": {
                          "type": "boolean",
                          "description": "Whether the session is visible in event lobby.",
                          "example": true
                        },
                        "is_simulive": {
                          "type": "boolean",
                          "description": "Whether the webinar is `simulive`.",
                          "example": true
                        },
                        "record_file_id": {
                          "type": "string",
                          "description": "The previously recorded file's ID for `simulive`.",
                          "example": "f09340e1-cdc3-4eae-9a74-98f9777ed908"
                        },
                        "chat_channel": {
                          "type": "boolean",
                          "description": "Whether session chat in lobby is enabled.\nAttendees need to have Zoom Chat enabled by their Account Admin to view and participate in the conference chat.",
                          "example": true
                        },
                        "led_by_sponsor": {
                          "type": "boolean",
                          "description": "Whether the session is led by a sponsor.",
                          "example": false
                        },
                        "track_labels": {
                          "type": "array",
                          "description": "The track or classification that separates events into different categories. Tickets for these tracks link to specific sessions. Only ticket holders can join these sessions.",
                          "items": {
                            "type": "string",
                            "example": "Technical Track"
                          }
                        },
                        "audience_labels": {
                          "type": "array",
                          "description": "The list of audience type tags for the session.",
                          "items": {
                            "type": "string",
                            "example": "Family"
                          }
                        },
                        "product_labels": {
                          "type": "array",
                          "description": "The list of product type tags for the session.",
                          "items": {
                            "type": "string",
                            "example": "zoomMeeting"
                          }
                        },
                        "level": {
                          "type": "array",
                          "description": "The list of level type tags for the session.",
                          "items": {
                            "type": "string",
                            "example": "Level-1"
                          }
                        },
                        "alternative_host": {
                          "type": "array",
                          "description": "The list of alternative hosts. Alternative hosts can start the session on the host&rsquo;s behalf. The &quot;Alternative Host&quot; ticket is auto-assigned to alternative hosts.",
                          "items": {
                            "type": "string",
                            "description": "The email address of the alternative host.",
                            "example": "abc.cd@email.com"
                          }
                        },
                        "panelist": {
                          "type": "array",
                          "description": "The speaker joins session as an attendee in a meeting session and as a panelist in a webinar session.\n Panelist can mute or unmute themselves, start or stop their own video, view and respond to all questions and answers.",
                          "items": {
                            "type": "string",
                            "description": "The email address of the panelist.",
                            "example": "abc.cd@email.com"
                          }
                        },
                        "attendance_type": {
                          "type": "string",
                          "description": "The type of attendee experience for the event. \n * `virtual`  virtual attendees only \n * `in-person` in-person attendees only \n * `hybrid`  both in-person and virtual attendees",
                          "example": "hybrid",
                          "enum": [
                            "virtual",
                            "in-person",
                            "hybrid"
                          ]
                        },
                        "physical_location": {
                          "type": "string",
                          "description": "The physical location of the event. This field is applicable for Hybrid and in-person events only.",
                          "example": "801 Mt Vernon Pl NW, Washington, DC 20001"
                        }
                      },
                      "description": "The information about the event session."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `26402` <br>\n One or more session IDs are invalid. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:write:admin",
              "zoom_events_sessions:write",
              "zoom_events:write:session",
              "zoom_events:write:session:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:write:admin",
            "zoom_events_sessions:write"
          ],
          "x-granular-scopes": [
            "zoom_events:write:session",
            "zoom_events:write:session:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/sessions/{sessionId}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get the session information",
        "description": "Returns the session information.\n\n\n\n**Scopes:** `zoom_events_sessions:read`,`zoom_events_sessions:read:admin`\n\n**Granular Scopes:** `zoom_events:read:session`,`zoom_events:read:session:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getEventSessionInfo",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n Requested session details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Event Session",
                  "description": "The information about the event session.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "timezone": {
                          "type": "string",
                          "description": "The timezone of the event.",
                          "example": "America/New_York"
                        },
                        "type": {
                          "type": "integer",
                          "description": "The type of session:\n * `0` Meeting\n * `2` Webinar",
                          "format": "int32",
                          "example": 2,
                          "enum": [
                            0,
                            2
                          ]
                        },
                        "meeting_id": {
                          "type": "integer",
                          "description": "The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-) in **long** format (represented as int64 data type in JSON), also known as the meeting number. Applicable, if the session type is of meeting ( i.e type = 0). This ID is null for an unpublished event.",
                          "format": "int64",
                          "example": 97763643886
                        },
                        "webinar_id": {
                          "type": "integer",
                          "description": "The webinar ID in **long** format (represented as int64 data type in JSON), also known as the webinar number. \nApplicable, if the session type is of webinar ( i.e type = 2). This ID is null for an unpublished event.",
                          "format": "int64",
                          "example": 97871060099
                        }
                      }
                    },
                    {
                      "title": "Event Session",
                      "type": "object",
                      "properties": {
                        "session_id": {
                          "type": "string",
                          "description": "The ID of the session.",
                          "example": "4uzfv3JwTeyR5QpC3PXwMg"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the session.",
                          "example": "Session 1"
                        },
                        "description": {
                          "type": "string",
                          "description": "This is a description of the session.",
                          "example": "Educational Session on ZoomEvents"
                        },
                        "start_time": {
                          "type": "string",
                          "description": "The start time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`",
                          "format": "date-time",
                          "example": "2022-05-31T13:00:00Z"
                        },
                        "end_time": {
                          "type": "string",
                          "description": "The end time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`",
                          "format": "date-time",
                          "example": "2022-05-31T13:00:00Z"
                        },
                        "session_speakers": {
                          "maxItems": 200,
                          "minItems": 0,
                          "type": "array",
                          "description": "The speakers join as attendees in a meeting session and as panelists in a webinar session.",
                          "items": {
                            "title": "The session speaker",
                            "type": "object",
                            "properties": {
                              "speaker_id": {
                                "type": "string",
                                "description": "The ID of the session speaker.",
                                "example": "4uzfv3JwTeyR5QpC3PXwMg"
                              },
                              "access_to_edit_session": {
                                "type": "boolean",
                                "description": "Whether the speaker has access to edit the session information.",
                                "example": true
                              },
                              "show_in_session_detail": {
                                "type": "boolean",
                                "description": "Whether to show the speaker information under session details.",
                                "example": true
                              },
                              "has_alternative_host_permission": {
                                "type": "boolean",
                                "description": "Whether the speaker can act as an alternative host for the session.",
                                "example": true
                              },
                              "meeting_role": {
                                "type": "integer",
                                "description": "The role of the speaker in a meeting:\n * `0` ALTERNATIVE_HOST\n * `1` ATTENDEE\n * `2` PANELIST\n",
                                "format": "int32",
                                "example": 2,
                                "enum": [
                                  0,
                                  1,
                                  2
                                ]
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the speaker.",
                                "example": "Speaker-1"
                              },
                              "company": {
                                "type": "string",
                                "description": "The company name of the speaker.",
                                "example": "Zoom"
                              },
                              "title": {
                                "type": "string",
                                "description": "The job title of the speaker.",
                                "example": "Product Lead"
                              }
                            },
                            "description": "The speaker joins a session as an attendee in a meeting session and as a panelist in a webinar session."
                          }
                        },
                        "featured": {
                          "type": "boolean",
                          "description": "Whether the session is featured.",
                          "example": true
                        },
                        "visible_in_landing_page": {
                          "type": "boolean",
                          "description": "Whether the session is visible in the landing page.",
                          "example": true,
                          "default": true
                        },
                        "featured_in_lobby": {
                          "type": "boolean",
                          "description": "Whether the session is featured in the event lobby.",
                          "example": false
                        },
                        "visible_in_lobby": {
                          "type": "boolean",
                          "description": "Whether the session is visible in event lobby.",
                          "example": true,
                          "default": true
                        },
                        "is_simulive": {
                          "type": "boolean",
                          "description": "Whether the webinar is `simulive`.",
                          "example": true
                        },
                        "record_file_id": {
                          "type": "string",
                          "description": "The previously recorded file's ID for `simulive`.",
                          "example": "f09340e1-cdc3-4eae-9a74-98f9777ed908"
                        },
                        "chat_channel": {
                          "type": "boolean",
                          "description": "Whether session chat in lobby is enabled.\nAttendees need to have Zoom Chat enabled by their Account Admin to view and participate in the conference chat.",
                          "example": true
                        },
                        "led_by_sponsor": {
                          "type": "boolean",
                          "description": "Whether the session is led by a sponsor.",
                          "example": false
                        },
                        "track_labels": {
                          "type": "array",
                          "description": "The track or classification that separates events into different categories. Tickets for these tracks link to specific sessions. Only ticket holders can join these sessions.",
                          "items": {
                            "type": "string",
                            "example": "Technical Track"
                          }
                        },
                        "audience_labels": {
                          "type": "array",
                          "description": "The list of audience type tags for the session.",
                          "items": {
                            "type": "string",
                            "example": "Family"
                          }
                        },
                        "product_labels": {
                          "type": "array",
                          "description": "The list of product type tags for the session.",
                          "items": {
                            "type": "string",
                            "example": "zoomMeeting"
                          }
                        },
                        "level": {
                          "type": "array",
                          "description": "The list of level type tags for the session.",
                          "items": {
                            "type": "string",
                            "example": "Level-1"
                          }
                        },
                        "alternative_host": {
                          "type": "array",
                          "description": "The list of alternative hosts. Alternative hosts can start the session on the host&rsquo;s behalf. The &quot;Alternative Host&quot; ticket is auto-assigned to alternative hosts.",
                          "items": {
                            "type": "string",
                            "description": "The email address of the alternative host.",
                            "example": "abc.cd@email.com"
                          }
                        },
                        "panelist": {
                          "type": "array",
                          "description": "The speaker joins session as an attendee in a meeting session and as a panelist in a webinar session.\n Panelist can mute or unmute themselves, start or stop their own video, view and respond to all questions and answers.",
                          "items": {
                            "type": "string",
                            "description": "The email address of the panelist.",
                            "example": "abc.cd@email.com"
                          }
                        },
                        "interpreter_languages": {
                          "type": "array",
                          "description": "The languages available for interpretations.",
                          "items": {
                            "title": "Interpretation Context",
                            "type": "object",
                            "properties": {
                              "language_id": {
                                "type": "string",
                                "description": "The language ID for translation.",
                                "example": "EN"
                              },
                              "language_display_name": {
                                "type": "string",
                                "description": "The name of the language.",
                                "example": "English"
                              }
                            }
                          }
                        },
                        "sign_interpreter_languages": {
                          "type": "array",
                          "description": "The sign interpretation languages that are available.",
                          "items": {
                            "title": "Interpretation Context",
                            "type": "object",
                            "properties": {
                              "language_id": {
                                "type": "string",
                                "description": "The language ID for translation.",
                                "example": "EN"
                              },
                              "language_display_name": {
                                "type": "string",
                                "description": "The name of the language.",
                                "example": "English"
                              }
                            }
                          }
                        },
                        "attendance_type": {
                          "type": "string",
                          "description": "The type of attendee experience for the event. \n * `virtual`  virtual attendees only \n * `in-person` in-person attendees only \n * `hybrid`  both in-person and virtual attendees",
                          "example": "hybrid",
                          "enum": [
                            "virtual",
                            "in-person",
                            "hybrid"
                          ]
                        },
                        "physical_location": {
                          "type": "string",
                          "description": "The physical location of the event. This field is applicable for Hybrid and in-person events only.",
                          "example": "801 Mt Vernon Pl NW, Washington, DC 20001"
                        }
                      },
                      "description": "The information about the event session."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:read",
              "zoom_events_sessions:read:admin",
              "zoom_events:read:session",
              "zoom_events:read:session:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:read",
            "zoom_events_sessions:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:session",
            "zoom_events:read:session:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete a session",
        "description": "Deletes a session. This API is not allowed for single session event type.\n\n**Scopes:** `zoom_events_sessions:write`,`zoom_events_sessions:write:admin`\n\n**Granular Scopes:** `zoom_events:delete:session`,`zoom_events:delete:session:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteEventSession",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204` Session deleted successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n**Error Code:** `2003` <br>\n Session not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:write",
              "zoom_events_sessions:write:admin",
              "zoom_events:delete:session",
              "zoom_events:delete:session:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:write",
            "zoom_events_sessions:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:delete:session",
            "zoom_events:delete:session:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update a session",
        "description": "Updates an existing session in an event. \n\n**Scopes:** `zoom_events_sessions:write`,`zoom_events_sessions:write:admin`\n\n**Granular Scopes:** `zoom_events:update:session`,`zoom_events:update:session:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateEventSession",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Event Session",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the session. In case of single session event type, it inherits the event's name.",
                    "example": "Session 1"
                  },
                  "description": {
                    "type": "string",
                    "description": "This is a description of the session.This field does NOT support the Richtext Description field in the UI. Updating session description is only allowed for multi-session and recurring type event.",
                    "example": "Educational Session on ZoomEvents"
                  },
                  "start_time": {
                    "type": "string",
                    "description": "The start time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`. In case of single session event type, It inherits the event's start time.",
                    "format": "date-time",
                    "example": "2022-05-31T13:00:00Z"
                  },
                  "end_time": {
                    "type": "string",
                    "description": "The end time of the session in UTC. The format should be `yyyy-MM-dd`T`HH:mm:ssZ`. In case of Single Session Event Type, It inherits the event's end time.",
                    "format": "date-time",
                    "example": "2022-05-31T13:00:00Z"
                  },
                  "session_speakers": {
                    "maxItems": 200,
                    "minItems": 0,
                    "type": "array",
                    "description": "The speakers join as attendees in a meeting session and as panelists in a webinar session.",
                    "items": {
                      "title": "The session speaker",
                      "type": "object",
                      "properties": {
                        "speaker_id": {
                          "type": "string",
                          "description": "The ID of the session speaker.",
                          "example": "4uzfv3JwTeyR5QpC3PXwMg"
                        },
                        "access_to_edit_session": {
                          "type": "boolean",
                          "description": "Whether the speaker has access to edit the session information.",
                          "example": true
                        },
                        "show_in_session_detail": {
                          "type": "boolean",
                          "description": "Whether to show the speaker information under the session details.",
                          "example": true
                        },
                        "has_alternative_host_permission": {
                          "type": "boolean",
                          "description": "Whether the speaker can act as an alternative host for the session.",
                          "example": true
                        }
                      },
                      "description": "The speaker joins a session as an attendee in a meeting session and as a panelist in a webinar session."
                    }
                  },
                  "featured": {
                    "type": "boolean",
                    "description": "Whether the session is featured. This is not applicable for single session event type.",
                    "example": true
                  },
                  "visible_in_landing_page": {
                    "type": "boolean",
                    "description": "Whether the session is visible in the landing page. Session controls not supported for single session event type.",
                    "example": true,
                    "default": true
                  },
                  "featured_in_lobby": {
                    "type": "boolean",
                    "description": "Whether the session is featured in the event lobby. Session controls not supported for single session event type.",
                    "example": false
                  },
                  "visible_in_lobby": {
                    "type": "boolean",
                    "description": "Whether the session is visible in the event lobby. Session controls not supported for single session event type.",
                    "example": true,
                    "default": true
                  },
                  "is_simulive": {
                    "type": "boolean",
                    "description": "Whether the webinar is `simulive`.",
                    "example": false
                  },
                  "record_file_id": {
                    "type": "string",
                    "description": "The previously recorded file's ID for `simulive`.",
                    "example": "f09340e1-cdc3-4eae-9a74-98f9777ed908"
                  },
                  "chat_channel": {
                    "type": "boolean",
                    "description": "Whether session chat in lobby is enabled.\n*Attendees need to have Zoom Chat enabled by their account admin to view and participate in the conference chat. This is not applicable for single session event type.",
                    "example": true
                  },
                  "led_by_sponsor": {
                    "type": "boolean",
                    "description": "Whether the session is hosted by a sponsor. This is not applicable for single session event type.",
                    "example": false
                  },
                  "track_labels": {
                    "type": "array",
                    "description": "The track or classification that separates events into different categories. Tickets for these tracks link to specific sessions. Only ticket holders can join these sessions. This is not applicable for single session event type.",
                    "items": {
                      "type": "string",
                      "example": "Technical Track"
                    }
                  },
                  "audience_labels": {
                    "type": "array",
                    "description": "The list of audience type tags for the session. This is not applicable for single session event type.",
                    "items": {
                      "type": "string",
                      "example": "Family"
                    }
                  },
                  "product_labels": {
                    "type": "array",
                    "description": "The list of product type tags for the session. This is not applicable for single session event type.",
                    "items": {
                      "type": "string",
                      "example": "zoomMeeting"
                    }
                  },
                  "level": {
                    "type": "array",
                    "description": "The list of level type tags for the session. This is not applicable for single session event type.",
                    "items": {
                      "type": "string",
                      "example": "Level-1"
                    }
                  },
                  "alternative_host": {
                    "type": "array",
                    "description": "The list of alternative hosts. Alternative hosts can start the session on the hosts behalf. The &quot;Alternative Host&quot; ticket is auto-assigned to alternative hosts.",
                    "items": {
                      "type": "string",
                      "description": "The email address of the alternative host.",
                      "example": "abc.cd@email.com"
                    }
                  },
                  "panelist": {
                    "type": "array",
                    "description": "The speaker joins session as an attendee in a meeting session and as a panelist in a webinar session.\n Panelist can mute or unmute themselves, start or stop their own video, view and respond to all questions and answers. This is not applicable for single session event type.",
                    "items": {
                      "type": "string",
                      "description": "The email address of the panelist.",
                      "example": "abc.cd@email.com"
                    }
                  },
                  "attendance_type": {
                    "type": "string",
                    "description": "The type of attendee experience for the event:\n * `Virtual` &mdash; virtual attendees only \n * `In-person` &mdash; in-person attendees only \n * `Hybrid` &mdash; both in-person and virtual attendees.  \n\n  *In case of single session event type, It inherits event's attendance type.",
                    "example": "hybrid",
                    "enum": [
                      "virtual",
                      "in-person",
                      "hybrid"
                    ]
                  },
                  "physical_location": {
                    "type": "string",
                    "description": "The physical location of the event. This field is applicable for hybrid and in-person events only.",
                    "example": "801 Mt Vernon Pl NW, Washington, DC 20001"
                  }
                },
                "description": "The information about the event session."
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSession updated successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:write",
              "zoom_events_sessions:write:admin",
              "zoom_events:update:session",
              "zoom_events:update:session:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:write",
            "zoom_events_sessions:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:session",
            "zoom_events:update:session:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/sessions/{sessionId}/interpreters": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "List session interpreters",
        "description": "Retrieves interpreters in a session.\n\n**Scopes:** `zoom_events_sessions:read`,`zoom_events_sessions:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_session_interpreters`,`zoom_events:read:list_session_interpreters:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getSessionInterpreterList",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n List of interpreters.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of interpreters",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of interpreters.",
                      "example": 1
                    },
                    "interpreters": {
                      "type": "array",
                      "items": {
                        "title": "Interpreter",
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "The email address of the interpreter.",
                            "example": "abc.def@email.com"
                          },
                          "type": {
                            "type": "integer",
                            "description": "The interpreter type:\nEnum:\n * `1` language_interpreter\n * `2` sign_language_interpreter\n",
                            "format": "int32",
                            "example": 1,
                            "enum": [
                              1,
                              2
                            ]
                          },
                          "source_language_id": {
                            "allOf": [
                              {
                                "type": "string",
                                "description": "The language ID for translation. Valid for language_interpreter type:\nEnum:\n * `US` English \n * `CN` Chinese \n * `JP` Japanese \n * `DE` German \n * `FR` French \n * `RU` Russian \n * `PT` Portuguese \n * `ES` Spanish \n * `KR` Korean",
                                "example": "JP",
                                "enum": [
                                  "US",
                                  "CN",
                                  "JP",
                                  "DE",
                                  "FR",
                                  "RU",
                                  "PT",
                                  "ES",
                                  "KR"
                                ]
                              },
                              {
                                "example": "US"
                              }
                            ]
                          },
                          "source_language_display_name": {
                            "type": "string",
                            "description": "The name of the source language.",
                            "example": "English"
                          },
                          "target_language_id": {
                            "oneOf": [
                              {
                                "allOf": [
                                  {
                                    "type": "string",
                                    "description": "The language ID for translation. Valid for language_interpreter type:\nEnum:\n * `US` English \n * `CN` Chinese \n * `JP` Japanese \n * `DE` German \n * `FR` French \n * `RU` Russian \n * `PT` Portuguese \n * `ES` Spanish \n * `KR` Korean",
                                    "example": "JP",
                                    "enum": [
                                      "US",
                                      "CN",
                                      "JP",
                                      "DE",
                                      "FR",
                                      "RU",
                                      "PT",
                                      "ES",
                                      "KR"
                                    ]
                                  },
                                  {
                                    "example": "JP"
                                  }
                                ]
                              },
                              {
                                "type": "string",
                                "description": "The ID for sign_language. Valid for sign_language_interpreter type:\nEnum:\n * `ASE` American Sign Language \n * `CSL` Chinese Sign Language \n * `FSL` French Sign Language \n * `GSG` German Sign Language \n * `JSL` Japanese Sign Language \n * `RSL` Russian Sign Language \n * `BZS` Brazilian Sign Language \n * `SSP` Spanish Sign Language \n * `MFS` Mexican Sign Language \n * `BFI` British Sign Language",
                                "example": "ASE",
                                "enum": [
                                  "ASE",
                                  "CSL",
                                  "FSL",
                                  "GSG",
                                  "JSL",
                                  "RSL",
                                  "BZS",
                                  "SSP",
                                  "MFS",
                                  "BFI"
                                ]
                              }
                            ]
                          },
                          "target_language_display_name": {
                            "allOf": [
                              {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of the target language.",
                                    "example": "Japanese"
                                  },
                                  {
                                    "type": "string",
                                    "description": "The name of the sign language.",
                                    "example": "American Sign Language"
                                  }
                                ]
                              },
                              {}
                            ]
                          }
                        },
                        "description": "Information about the language interpreters."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2003` <br>\n Session not found. <br>\n**Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:read",
              "zoom_events_sessions:read:admin",
              "zoom_events:read:list_session_interpreters",
              "zoom_events:read:list_session_interpreters:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:read",
            "zoom_events_sessions:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_session_interpreters",
            "zoom_events:read:list_session_interpreters:admin"
          ]
        }
      },
      "put": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create or update session interpreters.",
        "description": "Creates or update the list of interpreters for the session.\n\n**Scopes:** `zoom_events_sessions:write`,`zoom_events_sessions:write:admin`\n\n**Granular Scopes:** `zoom_events:update:session_interpreter`,`zoom_events:update:session_interpreter:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateSessionInterpreters",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "List of interpreters",
                "type": "object",
                "properties": {
                  "interpreters": {
                    "type": "array",
                    "items": {
                      "title": "Interpreter",
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The email address of the interpreter.",
                          "example": "abc.def@email.com"
                        },
                        "type": {
                          "type": "integer",
                          "description": "The interpreter type:\nEnum:\n * `1` language_interpreter\n * `2` sign_language_interpreter\n",
                          "format": "int32",
                          "example": 1,
                          "enum": [
                            1,
                            2
                          ]
                        },
                        "source_language_id": {
                          "type": "string",
                          "description": "The language ID for translation. Valid for language_interpreter type:\nEnum:\n * `US` English \n * `CN` Chinese \n * `JP` Japanese \n * `DE` German \n * `FR` French \n * `RU` Russian \n * `PT` Portuguese \n * `ES` Spanish \n * `KR` Korean",
                          "example": "US",
                          "enum": [
                            "US",
                            "CN",
                            "JP",
                            "DE",
                            "FR",
                            "RU",
                            "PT",
                            "ES",
                            "KR"
                          ]
                        },
                        "target_language_id": {
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "The language ID for translation. Valid for language_interpreter type:\nEnum:\n * `US` English \n * `CN` Chinese \n * `JP` Japanese \n * `DE` German \n * `FR` French \n * `RU` Russian \n * `PT` Portuguese \n * `ES` Spanish \n * `KR` Korean",
                              "example": "JP",
                              "enum": [
                                "US",
                                "CN",
                                "JP",
                                "DE",
                                "FR",
                                "RU",
                                "PT",
                                "ES",
                                "KR"
                              ]
                            },
                            {
                              "type": "string",
                              "description": "The ID for sign_language. Valid for sign_language_interpreter type:\nEnum:\n * `ASE` American Sign Language \n * `CSL` Chinese Sign Language \n * `FSL` French Sign Language \n * `GSG` German Sign Language \n * `JSL` Japanese Sign Language \n * `RSL` Russian Sign Language \n * `BZS` Brazilian Sign Language \n * `SSP` Spanish Sign Language \n * `MFS` Mexican Sign Language \n * `BFI` British Sign Language",
                              "example": "ASE",
                              "enum": [
                                "ASE",
                                "CSL",
                                "FSL",
                                "GSG",
                                "JSL",
                                "RSL",
                                "BZS",
                                "SSP",
                                "MFS",
                                "BFI"
                              ]
                            }
                          ]
                        }
                      },
                      "description": "Information about the language interpreters."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nInterpreters updated successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:write",
              "zoom_events_sessions:write:admin",
              "zoom_events:update:session_interpreter",
              "zoom_events:update:session_interpreter:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:write",
            "zoom_events_sessions:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:session_interpreter",
            "zoom_events:update:session_interpreter:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/sessions/{sessionId}/join_token": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get ticket session join token by Event ID and Session ID",
        "description": "Retrieves the join token to join an event session.\n\n\n\n**Scopes:** `zoom_events_sessions:read`,`zoom_events_sessions:read:admin`\n\n**Granular Scopes:** `zoom_events:read:session_token`,`zoom_events:read:session_token:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getSessionJoinToken",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n The join token for the session.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Join Token",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "The join token error code:\nEnum:\n * `0` &mdash; SUCCESS\n * `1120` &mdash; BAD_REQUEST\n * `1130` &mdash; ERROR_TICKET_NOT_FOUND\n * `1140` &mdash; INTERNAL_SERVER_ERROR\n * `1150` &mdash; ERROR_CODE_TICKET_REVOKE\n",
                      "format": "int32",
                      "example": 0,
                      "enum": [
                        0,
                        1120,
                        1130,
                        1140,
                        1150
                      ]
                    },
                    "error_message": {
                      "type": "string",
                      "description": "The join token error message.",
                      "example": "success"
                    },
                    "join_token": {
                      "type": "string",
                      "description": "The join token of the session.",
                      "example": "OIgzlUv99nloE1vFMFssJVZuhFSstmSNd_Pi4WEBUNy0hWK2L6TtrRWscn"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:read",
              "zoom_events_sessions:read:admin",
              "zoom_events:read:session_token",
              "zoom_events:read:session_token:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:read",
            "zoom_events_sessions:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:session_token",
            "zoom_events:read:session_token:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/sessions/{sessionId}/polls": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "List session polls",
        "description": "List all the polls of a session.\n\n\n\n**Scopes:** `zoom_events_sessions:read`,`zoom_events_sessions:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_session_polls`,`zoom_events:read:list_session_polls:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getSessionPolls",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n List of polls returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of polls",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of polls.",
                      "example": 1
                    },
                    "polls": {
                      "type": "array",
                      "items": {
                        "title": "Session Polling Object",
                        "required": [
                          "anonymous",
                          "poll_type",
                          "title"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Session Poll ID. Required for updating an existing poll.",
                            "example": "QalIoKWLTJehBJ8e1xRrbQ"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the Session Poll:  \n `active` - Poll is active   \n `inactive` - Poll is deactivated",
                            "example": "active",
                            "enum": [
                              "active",
                              "inactive"
                            ],
                            "x-enum-descriptions": [
                              "Poll Active",
                              "Poll Inactive"
                            ]
                          },
                          "anonymous": {
                            "type": "boolean",
                            "description": "Allow session participants to answer poll questions anonymously.",
                            "example": false
                          },
                          "poll_type": {
                            "type": "integer",
                            "description": "The type of poll. \n* `1` &mdash; Basic Poll. Only single and multiple choice questions are allowed. \n* `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.  \n* `3` &mdash; Quiz. This feature must be enabled in your Zoom account.",
                            "example": 2,
                            "enum": [
                              1,
                              2,
                              3
                            ]
                          },
                          "questions": {
                            "type": "array",
                            "description": "Information about the poll's questions.",
                            "items": {
                              "required": [
                                "name",
                                "type"
                              ],
                              "type": "object",
                              "properties": {
                                "answer_max_character": {
                                  "type": "integer",
                                  "description": "The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls. \n* For `short_answer` polls, a maximum of 500 characters. \n* For `long_answer` polls, a maximum of 2,000 characters.",
                                  "example": 200
                                },
                                "answer_min_character": {
                                  "minimum": 1,
                                  "type": "integer",
                                  "description": "The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.",
                                  "example": 1
                                },
                                "answer_required": {
                                  "type": "boolean",
                                  "description": "Whether participants must answer the question. \n* `true` &mdash; The participant must answer the question. \n* `false` &mdash; The participant does not need to answer the question. \n\n**Note:** \n* When the poll's `type` value is `1` (Poll), this value defaults to `true`. \n* When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.",
                                  "example": false,
                                  "default": false
                                },
                                "answers": {
                                  "minItems": 2,
                                  "type": "array",
                                  "description": "The poll question's available answers. This field requires a **minimum** of two answers. \n\n* For `single` and `multiple` polls, you can only provide a maximum of 10 answers. \n* For `matching` polls, you can only provide a maximum of 16 answers. \n* For `rank_order` polls, you can only provide a maximum of seven answers.",
                                  "items": {
                                    "type": "string",
                                    "example": "Extremely useful"
                                  }
                                },
                                "case_sensitive": {
                                  "type": "boolean",
                                  "description": "Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls. \n* `true` &mdash; The answer is case-sensitive. \n* `false` &mdash; The answer is not case-sensitive. \n\nThis value defaults to `false`.",
                                  "example": false,
                                  "default": false
                                },
                                "name": {
                                  "maxLength": 255,
                                  "type": "string",
                                  "description": "The poll question, up to 255 characters. \n\nFor `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.",
                                  "example": "How useful was this meeting?"
                                },
                                "prompts": {
                                  "type": "array",
                                  "description": "Information about the prompt questions. The question prompt's title. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.",
                                  "items": {
                                    "type": "string",
                                    "example": "How are you?"
                                  }
                                },
                                "prompt_right_answers": {
                                  "type": "array",
                                  "description": "The question prompt's correct answers. \n* For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers. \n* For `rank_order` polls, you can only provide one correct answer.",
                                  "items": {
                                    "type": "string",
                                    "example": "Good"
                                  }
                                },
                                "rating_max_label": {
                                  "type": "string",
                                  "description": "The high score label used for the `rating_max_value` field. \n\nThis field only applies to the `rating_scale` poll.",
                                  "example": "Extremely Likely"
                                },
                                "rating_max_value": {
                                  "maximum": 10,
                                  "type": "integer",
                                  "description": "The rating scale's maximum value, up to a maximum value of 10. \n\nThis field only applies to the `rating_scale` poll.",
                                  "example": 4
                                },
                                "rating_min_label": {
                                  "type": "string",
                                  "description": "The low score label used for the `rating_min_value` field. \n\nThis field only applies to the `rating_scale` poll.",
                                  "example": "Not likely"
                                },
                                "rating_min_value": {
                                  "minimum": 0,
                                  "type": "integer",
                                  "description": "The rating scale's minimum value. This value cannot be less than zero. \n\nThis field only applies to the `rating_scale` poll.",
                                  "example": 0
                                },
                                "right_answers": {
                                  "minItems": 1,
                                  "type": "array",
                                  "description": "The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz). \n\n For `single` and `matching` polls, this field only accepts one answer.",
                                  "items": {
                                    "type": "string",
                                    "example": "Good"
                                  }
                                },
                                "show_as_dropdown": {
                                  "type": "boolean",
                                  "description": "Whether to display the radio selection as a drop-down box. \n* `true` &mdash; Show as a drop-down box. \n* `false` &mdash; Do not show as a drop-down box. \n\nThis value defaults to `false`.",
                                  "example": false,
                                  "default": false
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The poll's question and answer type. \n* `single` &mdash; Single choice. \n* `multiple` &mdash; Multiple choice. \n* `matching` &mdash; Matching. \n* `rank_order` &mdash; Rank order. \n* `short_answer` &mdash; Short answer. \n* `long_answer` &mdash; Long answer. \n* `fill_in_the_blank` &mdash; Fill in the blank. \n* `rating_scale` &mdash; Rating scale.",
                                  "example": "single",
                                  "enum": [
                                    "single",
                                    "multiple",
                                    "matching",
                                    "rank_order",
                                    "short_answer",
                                    "long_answer",
                                    "fill_in_the_blank",
                                    "rating_scale"
                                  ],
                                  "x-enum-descriptions": [
                                    "Single choice",
                                    "Multiple choice",
                                    "Matching",
                                    "Rank order",
                                    "Short answer",
                                    "Long answer",
                                    "Fill in the blank",
                                    "Rating scale"
                                  ]
                                }
                              }
                            }
                          },
                          "title": {
                            "maxLength": 64,
                            "type": "string",
                            "description": "The poll's title, up to 64 characters.",
                            "example": "Learn something new"
                          }
                        },
                        "description": "Information about session polling."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n**Error Code:** `2003` <br>\n Session not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:read",
              "zoom_events_sessions:read:admin",
              "zoom_events:read:list_session_polls",
              "zoom_events:read:list_session_polls:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:read",
            "zoom_events_sessions:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_session_polls",
            "zoom_events:read:list_session_polls:admin"
          ]
        }
      },
      "put": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create or update session polls.",
        "description": "Create or update the list of polls for the session.\n\n**Scopes:** `zoom_events_sessions:write`,`zoom_events_sessions:write:admin`\n\n**Granular Scopes:** `zoom_events:update:session_poll`,`zoom_events:update:session_poll:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateSessionPolls",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "The ID of the session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4uzfv3JwTeyR5QpC3PXwMg"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "List of polls",
                "type": "object",
                "properties": {
                  "polls": {
                    "type": "array",
                    "items": {
                      "title": "Session Polling Object",
                      "required": [
                        "anonymous",
                        "poll_type",
                        "title"
                      ],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Session Poll ID. Required for updating an existing poll.",
                          "example": "QalIoKWLTJehBJ8e1xRrbQ"
                        },
                        "status": {
                          "type": "string",
                          "description": "Status of the Session Poll:  \n `active` - Poll is active   \n `inactive` - Poll is deactivated",
                          "example": "active",
                          "enum": [
                            "active",
                            "inactive"
                          ],
                          "x-enum-descriptions": [
                            "Poll Active",
                            "Poll Inactive"
                          ]
                        },
                        "anonymous": {
                          "type": "boolean",
                          "description": "Allow session participants to answer poll questions anonymously.",
                          "example": false
                        },
                        "poll_type": {
                          "type": "integer",
                          "description": "The type of poll. \n* `1` &mdash; Basic Poll. Only single and multiple choice questions are allowed. \n* `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.  \n* `3` &mdash; Quiz. This feature must be enabled in your Zoom account.",
                          "example": 2,
                          "enum": [
                            1,
                            2,
                            3
                          ]
                        },
                        "questions": {
                          "type": "array",
                          "description": "Information about the poll's questions.",
                          "items": {
                            "required": [
                              "name",
                              "type"
                            ],
                            "type": "object",
                            "properties": {
                              "answer_max_character": {
                                "type": "integer",
                                "description": "The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls. \n* For `short_answer` polls, a maximum of 500 characters. \n* For `long_answer` polls, a maximum of 2,000 characters.",
                                "example": 200
                              },
                              "answer_min_character": {
                                "minimum": 1,
                                "type": "integer",
                                "description": "The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.",
                                "example": 1
                              },
                              "answer_required": {
                                "type": "boolean",
                                "description": "Whether participants must answer the question. \n* `true` &mdash; The participant must answer the question. \n* `false` &mdash; The participant does not need to answer the question. \n\n**Note:** \n* When the poll's `type` value is `1` (Poll), this value defaults to `true`. \n* When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.",
                                "example": false,
                                "default": false
                              },
                              "answers": {
                                "minItems": 2,
                                "type": "array",
                                "description": "The poll question's available answers. This field requires a **minimum** of two answers. \n\n* For `single` and `multiple` polls, you can only provide a maximum of 10 answers. \n* For `matching` polls, you can only provide a maximum of 16 answers. \n* For `rank_order` polls, you can only provide a maximum of seven answers.",
                                "items": {
                                  "type": "string",
                                  "example": "Extremely useful"
                                }
                              },
                              "case_sensitive": {
                                "type": "boolean",
                                "description": "Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls. \n* `true` &mdash; The answer is case-sensitive. \n* `false` &mdash; The answer is not case-sensitive. \n\nThis value defaults to `false`.",
                                "example": false,
                                "default": false
                              },
                              "name": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The poll question, up to 255 characters. \n\nFor `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.",
                                "example": "How useful was this meeting?"
                              },
                              "prompts": {
                                "type": "array",
                                "description": "Information about the prompt questions. The question prompt's title. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.",
                                "items": {
                                  "type": "string",
                                  "example": "How are you?"
                                }
                              },
                              "prompt_right_answers": {
                                "type": "array",
                                "description": "The question prompt's correct answers. \n* For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers. \n* For `rank_order` polls, you can only provide one correct answer.",
                                "items": {
                                  "type": "string",
                                  "example": "Good"
                                }
                              },
                              "rating_max_label": {
                                "type": "string",
                                "description": "The high score label used for the `rating_max_value` field. \n\nThis field only applies to the `rating_scale` poll.",
                                "example": "Extremely Likely"
                              },
                              "rating_max_value": {
                                "maximum": 10,
                                "type": "integer",
                                "description": "The rating scale's maximum value, up to a maximum value of 10. \n\nThis field only applies to the `rating_scale` poll.",
                                "example": 4
                              },
                              "rating_min_label": {
                                "type": "string",
                                "description": "The low score label used for the `rating_min_value` field. \n\nThis field only applies to the `rating_scale` poll.",
                                "example": "Not likely"
                              },
                              "rating_min_value": {
                                "minimum": 0,
                                "type": "integer",
                                "description": "The rating scale's minimum value. This value cannot be less than zero. \n\nThis field only applies to the `rating_scale` poll.",
                                "example": 0
                              },
                              "right_answers": {
                                "minItems": 1,
                                "type": "array",
                                "description": "The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz). \n\n For `single` and `matching` polls, this field only accepts one answer.",
                                "items": {
                                  "type": "string",
                                  "example": "Good"
                                }
                              },
                              "show_as_dropdown": {
                                "type": "boolean",
                                "description": "Whether to display the radio selection as a drop-down box. \n* `true` &mdash; Show as a drop-down box. \n* `false` &mdash; Do not show as a drop-down box. \n\nThis value defaults to `false`.",
                                "example": false,
                                "default": false
                              },
                              "type": {
                                "type": "string",
                                "description": "The poll's question and answer type. \n* `single` &mdash; Single choice. \n* `multiple` &mdash; Multiple choice. \n* `matching` &mdash; Matching. \n* `rank_order` &mdash; Rank order. \n* `short_answer` &mdash; Short answer. \n* `long_answer` &mdash; Long answer. \n* `fill_in_the_blank` &mdash; Fill in the blank. \n* `rating_scale` &mdash; Rating scale.",
                                "example": "single",
                                "enum": [
                                  "single",
                                  "multiple",
                                  "matching",
                                  "rank_order",
                                  "short_answer",
                                  "long_answer",
                                  "fill_in_the_blank",
                                  "rating_scale"
                                ],
                                "x-enum-descriptions": [
                                  "Single choice",
                                  "Multiple choice",
                                  "Matching",
                                  "Rank order",
                                  "Short answer",
                                  "Long answer",
                                  "Fill in the blank",
                                  "Rating scale"
                                ]
                              }
                            }
                          }
                        },
                        "title": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "The poll's title, up to 64 characters.",
                          "example": "Learn something new"
                        }
                      },
                      "description": "Information about session polling."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nPolls updated successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_sessions:write",
              "zoom_events_sessions:write:admin",
              "zoom_events:update:session_poll",
              "zoom_events:update:session_poll:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_sessions:write",
            "zoom_events_sessions:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:session_poll",
            "zoom_events:update:session_poll:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/speakers": {
      "get": {
        "tags": [
          "Speakers"
        ],
        "summary": "List speakers",
        "description": "Retrieves a list of speakers for an event.\n\n**Scopes:** `zoom_events_speakers:read`,`zoom_events_speakers:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_speakers`,`zoom_events:read:list_speakers:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getSpeakers",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`    List of speakers returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of speakers",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of speakers.",
                      "example": 1
                    },
                    "speakers": {
                      "type": "array",
                      "items": {
                        "title": "Speaker",
                        "type": "object",
                        "properties": {
                          "speaker_id": {
                            "type": "string",
                            "description": "The speaker ID.",
                            "example": "3935Ug73Sp6S-7K1BHk7qw"
                          },
                          "name": {
                            "type": "string",
                            "description": "The speaker's name.",
                            "example": "John Joseph Dev"
                          },
                          "email": {
                            "type": "string",
                            "description": "The speaker's email address.",
                            "example": "email@example.com"
                          },
                          "job_title": {
                            "type": "string",
                            "description": "The speaker's job title.",
                            "example": "Product Manager"
                          },
                          "biography": {
                            "type": "string",
                            "description": "The speaker's biography.",
                            "example": "Provide a brief introduction of the speaker."
                          },
                          "company_name": {
                            "type": "string",
                            "description": "The name of the speaker's company.",
                            "example": "zoom"
                          },
                          "company_website": {
                            "type": "string",
                            "description": "The speaker's company website.",
                            "example": "https://www.example.com"
                          },
                          "linkedin_url": {
                            "type": "string",
                            "description": "The LinkedIn URL.",
                            "example": "https://linkedin.com/example"
                          },
                          "twitter_url": {
                            "type": "string",
                            "description": "The Twitter URL.",
                            "example": "https://twitter.com/example"
                          },
                          "youtube_url": {
                            "type": "string",
                            "description": "The YouTube URL.",
                            "example": "https://youtube.com/example"
                          },
                          "featured_in_event_detail_page": {
                            "type": "boolean",
                            "description": "Whether the speaker is featured in the event detail page.",
                            "example": true
                          },
                          "visible_in_event_detail_page": {
                            "type": "boolean",
                            "description": "Whether the speaker is visible in the event detail page.",
                            "example": true,
                            "default": true
                          },
                          "featured_in_lobby": {
                            "type": "boolean",
                            "description": "Whether the speaker is featured in the event lobby.",
                            "example": false
                          },
                          "visible_in_lobby": {
                            "type": "boolean",
                            "description": "Whether the speaker is visible in the event lobby.",
                            "example": true,
                            "default": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_speakers:read",
              "zoom_events_speakers:read:admin",
              "zoom_events:read:list_speakers",
              "zoom_events:read:list_speakers:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_speakers:read",
            "zoom_events_speakers:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_speakers",
            "zoom_events:read:list_speakers:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Speakers"
        ],
        "summary": "Create a speaker",
        "description": "Creates a speaker for an event.\n\n**Scopes:** `zoom_events_speakers:write`,`zoom_events_speakers:write:admin`\n\n**Granular Scopes:** `zoom_events:write:speaker`,`zoom_events:write:speaker:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createSpeaker",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Speaker",
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The speaker's name.",
                    "example": "John Joseph Dev"
                  },
                  "email": {
                    "type": "string",
                    "description": "The speaker's email address.",
                    "example": "email@example.com"
                  },
                  "job_title": {
                    "type": "string",
                    "description": "The speaker's job title.",
                    "example": "Product Manager"
                  },
                  "biography": {
                    "type": "string",
                    "description": "The speaker's biography.",
                    "example": "Provide a brief introduction of the speaker."
                  },
                  "company_name": {
                    "type": "string",
                    "description": "The name of the speaker's comapny.",
                    "example": "zoom"
                  },
                  "company_website": {
                    "type": "string",
                    "description": "The speaker's company website.",
                    "example": "https://www.example.com"
                  },
                  "linkedin_url": {
                    "type": "string",
                    "description": "The LinkedIn URL.",
                    "example": "https://linkedin.com/example"
                  },
                  "twitter_url": {
                    "type": "string",
                    "description": "The Twitter URL.",
                    "example": "https://twitter.com/example"
                  },
                  "youtube_url": {
                    "type": "string",
                    "description": "The Youtube URL.",
                    "example": "https://youtube.com/example"
                  },
                  "featured_in_event_detail_page": {
                    "type": "boolean",
                    "description": "Whether the speaker is featured in the event detail page.",
                    "example": true
                  },
                  "visible_in_event_detail_page": {
                    "type": "boolean",
                    "description": "Whether the speaker is visible in the event detail page.",
                    "example": true,
                    "default": true
                  },
                  "featured_in_lobby": {
                    "type": "boolean",
                    "description": "Whether the speaker is featured in the event lobby.",
                    "example": false
                  },
                  "visible_in_lobby": {
                    "type": "boolean",
                    "description": "Whether the speaker is visible in the event lobby.",
                    "example": true,
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`  \n \nSpeakers returned",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Speaker",
                  "type": "object",
                  "properties": {
                    "speaker_id": {
                      "type": "string",
                      "description": "The speaker ID.",
                      "example": "3935Ug73Sp6S-7K1BHk7qw"
                    },
                    "name": {
                      "type": "string",
                      "description": "The speaker's name.",
                      "example": "John Joseph Dev"
                    },
                    "email": {
                      "type": "string",
                      "description": "The speaker's email address.",
                      "example": "email@example.com"
                    },
                    "job_title": {
                      "type": "string",
                      "description": "The speaker's job title.",
                      "example": "Product Manager"
                    },
                    "biography": {
                      "type": "string",
                      "description": "The speaker's biography.",
                      "example": "Provide a brief introduction of the speaker."
                    },
                    "company_name": {
                      "type": "string",
                      "description": "The name of the speaker's comapny.",
                      "example": "zoom"
                    },
                    "company_website": {
                      "type": "string",
                      "description": "The speaker's company website.",
                      "example": "https://www.example.com"
                    },
                    "linkedin_url": {
                      "type": "string",
                      "description": "The LinkedIn URL.",
                      "example": "https://linkedin.com/example"
                    },
                    "twitter_url": {
                      "type": "string",
                      "description": "The Twitter URL.",
                      "example": "https://twitter.com/example"
                    },
                    "youtube_url": {
                      "type": "string",
                      "description": "The YouTube URL.",
                      "example": "https://youtube.com/example"
                    },
                    "featured_in_event_detail_page": {
                      "type": "boolean",
                      "description": "Whether the speaker is featured in the event detail page.",
                      "example": true
                    },
                    "visible_in_event_detail_page": {
                      "type": "boolean",
                      "description": "Whether the speaker is visible in the event detail page.",
                      "example": true,
                      "default": true
                    },
                    "featured_in_lobby": {
                      "type": "boolean",
                      "description": "Whether the speaker is featured in the event lobby.",
                      "example": false
                    },
                    "visible_in_lobby": {
                      "type": "boolean",
                      "description": "Whether the speaker is visible in the event lobby.",
                      "example": true,
                      "default": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1001` <br>\n Content moderation check failed. <br>\n**Error Code:** `1003` <br>\n The email address has already been used by another speaker. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `3002` <br>\n You have exceeded the maximum speaker capacity. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_speakers:write",
              "zoom_events_speakers:write:admin",
              "zoom_events:write:speaker",
              "zoom_events:write:speaker:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_speakers:write",
            "zoom_events_speakers:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:write:speaker",
            "zoom_events:write:speaker:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/speakers/{speakerId}": {
      "get": {
        "tags": [
          "Speakers"
        ],
        "summary": "Get a speaker",
        "description": "Returns information on a specific speaker.\n\n\n\n**Scopes:** `zoom_events_speakers:read`,`zoom_events_speakers:read:admin`\n\n**Granular Scopes:** `zoom_events:read:speaker`,`zoom_events:read:speaker:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getSpeaker",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "speakerId",
            "in": "path",
            "description": "The ID of the speaker.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "HvjxfFGdRYCL2_ZIbq2Mvg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n Speaker returned",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Speaker",
                  "type": "object",
                  "properties": {
                    "speaker_id": {
                      "type": "string",
                      "description": "The speaker ID.",
                      "example": "3935Ug73Sp6S-7K1BHk7qw"
                    },
                    "name": {
                      "type": "string",
                      "description": "The speaker's name.",
                      "example": "John Joseph Dev"
                    },
                    "email": {
                      "type": "string",
                      "description": "The speaker's email address.",
                      "example": "email@example.com"
                    },
                    "job_title": {
                      "type": "string",
                      "description": "The speaker's job title.",
                      "example": "Product Manager"
                    },
                    "biography": {
                      "type": "string",
                      "description": "The speaker's biography.",
                      "example": "Provide a brief introduction of the speaker."
                    },
                    "company_name": {
                      "type": "string",
                      "description": "The name of the speaker's comapny.",
                      "example": "zoom"
                    },
                    "company_website": {
                      "type": "string",
                      "description": "The speaker's company website.",
                      "example": "https://www.example.com"
                    },
                    "linkedin_url": {
                      "type": "string",
                      "description": "The LinkedIn URL.",
                      "example": "https://linkedin.com/example"
                    },
                    "twitter_url": {
                      "type": "string",
                      "description": "The Twitter URL.",
                      "example": "https://twitter.com/example"
                    },
                    "youtube_url": {
                      "type": "string",
                      "description": "The YouTube URL.",
                      "example": "https://youtube.com/example"
                    },
                    "featured_in_event_detail_page": {
                      "type": "boolean",
                      "description": "Whether the speaker is featured in the event detail page.",
                      "example": true
                    },
                    "visible_in_event_detail_page": {
                      "type": "boolean",
                      "description": "Whether the speaker is visible in the event detail page.",
                      "example": true,
                      "default": true
                    },
                    "featured_in_lobby": {
                      "type": "boolean",
                      "description": "Whether the speaker is featured in the event lobby.",
                      "example": false
                    },
                    "visible_in_lobby": {
                      "type": "boolean",
                      "description": "Whether the speaker is visible in the event lobby.",
                      "example": true,
                      "default": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n**Error Code:** `2005` <br>\n Speaker not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_speakers:read",
              "zoom_events_speakers:read:admin",
              "zoom_events:read:speaker",
              "zoom_events:read:speaker:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_speakers:read",
            "zoom_events_speakers:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:speaker",
            "zoom_events:read:speaker:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Speakers"
        ],
        "summary": "Delete a speaker",
        "description": "Deletes a speaker.\n\n\n\n**Scopes:** `zoom_events_speakers:write`,`zoom_events_speakers:write:admin`\n\n**Granular Scopes:** `zoom_events:delete:speaker`,`zoom_events:delete:speaker:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteSpeaker",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "speakerId",
            "in": "path",
            "description": "The ID of the speaker.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "HvjxfFGdRYCL2_ZIbq2Mvg"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSpeaker deleted successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `2005` <br>\n Speaker not found. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_speakers:write",
              "zoom_events_speakers:write:admin",
              "zoom_events:delete:speaker",
              "zoom_events:delete:speaker:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_speakers:write",
            "zoom_events_speakers:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:delete:speaker",
            "zoom_events:delete:speaker:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Speakers"
        ],
        "summary": "Update a speaker",
        "description": "Updates the speaker information.\n\n**Scopes:** `zoom_events_speakers:write`,`zoom_events_speakers:write:admin`\n\n**Granular Scopes:** `zoom_events:update:speaker`,`zoom_events:update:speaker:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateSpeaker",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "speakerId",
            "in": "path",
            "description": "The ID of the speaker.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "HvjxfFGdRYCL2_ZIbq2Mvg"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Speaker",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The speaker's name.",
                    "example": "John Joseph Dev"
                  },
                  "email": {
                    "type": "string",
                    "description": "The speaker's email address.",
                    "example": "email@example.com"
                  },
                  "job_title": {
                    "type": "string",
                    "description": "The speaker's job title.",
                    "example": "Product Manager"
                  },
                  "biography": {
                    "type": "string",
                    "description": "The speaker's biography.",
                    "example": "Provide a brief introduction of the speaker."
                  },
                  "company_name": {
                    "type": "string",
                    "description": "The name of the speaker's company.",
                    "example": "zoom"
                  },
                  "company_website": {
                    "type": "string",
                    "description": "The speaker's company website.",
                    "example": "https://www.example.com"
                  },
                  "linkedin_url": {
                    "type": "string",
                    "description": "The LinkedIn URL.",
                    "example": "https://linkedin.com/example"
                  },
                  "twitter_url": {
                    "type": "string",
                    "description": "The Twitter URL.",
                    "example": "https://twitter.com/example"
                  },
                  "youtube_url": {
                    "type": "string",
                    "description": "The YouTube URL.",
                    "example": "https://youtube.com/example"
                  },
                  "featured_in_event_detail_page": {
                    "type": "boolean",
                    "description": "Whether the speaker is featured in the event detail page.",
                    "example": true
                  },
                  "visible_in_event_detail_page": {
                    "type": "boolean",
                    "description": "Whether the speaker is visible in the event detail page.",
                    "example": true,
                    "default": true
                  },
                  "featured_in_lobby": {
                    "type": "boolean",
                    "description": "Whether the speaker is featured in the event lobby.",
                    "example": false
                  },
                  "visible_in_lobby": {
                    "type": "boolean",
                    "description": "Whether the speaker is visible in the event lobby.",
                    "example": true,
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSpeaker updated successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1001` <br>\n Content moderation check failed. <br>\n**Error Code:** `1003` <br>\n The email address has already been used by another speaker. <br>\n**Error Code:** `1005` <br>\n The same person has been assigned multiple roles. A user is not allowed to hold multiple roles in the same session. <br>\n"
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n **Error Code:** `2005` <br>\n Speaker not found. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_speakers:write",
              "zoom_events_speakers:write:admin",
              "zoom_events:update:speaker",
              "zoom_events:update:speaker:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_speakers:write",
            "zoom_events_speakers:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:speaker",
            "zoom_events:update:speaker:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/questions": {
      "get": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "List registration questions for an event",
        "description": "List registration questions and fields that are to be answered by users while registering for an event. These questions are setup during the event level.\n\n**Scopes:** `zoom_events_ticket_types:read`,`zoom_events_ticket_types:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_registration_questions`,`zoom_events:read:list_registration_questions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getRegistrationQuestionsForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \nSuccessfully retrieved registration questions.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "title": "Event Registrant Questions",
                      "type": "object",
                      "properties": {
                        "questions": {
                          "type": "array",
                          "description": "Array of registration fields whose values should be provided by registrants during registration.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field_name": {
                                "type": "string",
                                "description": "Field name.",
                                "example": "last_name",
                                "enum": [
                                  "first_name",
                                  "last_name",
                                  "address",
                                  "city",
                                  "state",
                                  "zip",
                                  "country",
                                  "phone",
                                  "industry",
                                  "job_title",
                                  "organization",
                                  "organization_size"
                                ],
                                "x-enum-descriptions": [
                                  "First Name",
                                  "Last Name",
                                  "Address",
                                  "City",
                                  "State/Province",
                                  "Zip/Postal Code",
                                  "Country/Region",
                                  "Phone",
                                  "Industry",
                                  "Job Title",
                                  "Organization",
                                  "Organization Size"
                                ]
                              },
                              "required": {
                                "type": "boolean",
                                "description": "State whether the selected fields are required or optional.",
                                "example": true
                              },
                              "title": {
                                "type": "string",
                                "description": "Title of the question.",
                                "example": "Last Name"
                              },
                              "question_id": {
                                "type": "string",
                                "description": "The ID of the question.",
                                "example": "Fn2rBZgJQzi6VIU--uWqnA"
                              }
                            }
                          }
                        },
                        "custom_questions": {
                          "type": "array",
                          "description": "Array of Registrant Custom Questions.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "options": {
                                "type": "array",
                                "description": "An array of answer choices. Can't be used for short or long answer type.",
                                "items": {
                                  "type": "string",
                                  "example": "Good"
                                }
                              },
                              "required": {
                                "type": "boolean",
                                "description": "State whether or not the custom question is required to be answered by a registrant.",
                                "example": true
                              },
                              "title": {
                                "type": "string",
                                "description": "Custom question.",
                                "example": "How are you?"
                              },
                              "question_id": {
                                "type": "string",
                                "description": "The ID of the custom question.",
                                "example": "Fn2rBZgJQzi6VIU--uWqnA"
                              },
                              "type": {
                                "type": "string",
                                "description": "The question-answer type.",
                                "example": "short_answer",
                                "enum": [
                                  "short_answer",
                                  "long_answer",
                                  "single_radio",
                                  "single_dropdown",
                                  "multiple_choice"
                                ],
                                "x-enum-descriptions": [
                                  "Short Answer",
                                  "Long Answer",
                                  "Single Radio Answer",
                                  "Single Dropdown Answer",
                                  "Multiple Answer"
                                ]
                              },
                              "min_length": {
                                "type": "integer",
                                "description": "The minimum length of the custom question answer. This is applicable for short_answer/long_answer question types. \nIf this custom question is required then the min_length should be atleast 1.",
                                "example": 500
                              },
                              "max_length": {
                                "type": "integer",
                                "description": "The maximum length of the custom question answer. This is applicable for short_answer/long_answer question types. \nThe max_length should be greater than or equal min_length. The allowed max_length for short_answer is 500 and for long_answer is 2000.",
                                "example": 2000
                              }
                            }
                          }
                        }
                      },
                      "description": "Event Registrant Questions."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_ticket_types:read",
              "zoom_events_ticket_types:read:admin",
              "zoom_events:read:list_registration_questions",
              "zoom_events:read:list_registration_questions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_ticket_types:read",
            "zoom_events_ticket_types:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_registration_questions",
            "zoom_events:read:list_registration_questions:admin"
          ]
        }
      },
      "put": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "Update registration questions for an event",
        "description": "Updates registration questions and fields that are to be answered by users while registering for an event. These questions are setup at event level.\n\n**Scopes:** `zoom_events_ticket_types:write`,`zoom_events_ticket_types:write:admin`\n\n**Granular Scopes:** `zoom_events:update:registraion_question`,`zoom_events:update:registraion_question:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateRegistrationQuestionsForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Event Registrant Questions",
                "type": "object",
                "properties": {
                  "questions": {
                    "type": "array",
                    "description": "Array of registration fields whose values should be provided by registrants during registration.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field_name": {
                          "type": "string",
                          "description": "The field name.",
                          "example": "last_name",
                          "enum": [
                            "first_name",
                            "last_name",
                            "address",
                            "city",
                            "state",
                            "zip",
                            "country",
                            "phone",
                            "industry",
                            "job_title",
                            "organization",
                            "organization_size"
                          ],
                          "x-enum-descriptions": [
                            "First Name",
                            "Last Name",
                            "Address",
                            "City",
                            "State/Province",
                            "Zip/Postal Code",
                            "Country/Region",
                            "Phone",
                            "Industry",
                            "Job Title",
                            "Organization",
                            "Organization Size"
                          ]
                        },
                        "required": {
                          "type": "boolean",
                          "description": "Whether the selected fields are required or optional.",
                          "example": true
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the question.",
                          "example": "Last Name"
                        },
                        "question_id": {
                          "type": "string",
                          "description": "The ID of the question.",
                          "example": "Fn2rBZgJQzi6VIU--uWqnA"
                        }
                      }
                    }
                  },
                  "custom_questions": {
                    "type": "array",
                    "description": "Array of registrant custom questions.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "options": {
                          "type": "array",
                          "description": "An array of answer choices. Can't be used for short or long answer type.",
                          "items": {
                            "type": "string",
                            "example": "Good"
                          }
                        },
                        "required": {
                          "type": "boolean",
                          "description": "State whether or not the custom question is required to be answered by a registrant.",
                          "example": true
                        },
                        "title": {
                          "type": "string",
                          "description": "Custom question.",
                          "example": "How are you?"
                        },
                        "question_id": {
                          "type": "string",
                          "description": "The ID of the custom question.",
                          "example": "Fn2rBZgJQzi6VIU--uWqnA"
                        },
                        "type": {
                          "type": "string",
                          "description": "The question-answer type.",
                          "example": "short_answer",
                          "enum": [
                            "short_answer",
                            "long_answer",
                            "single_radio",
                            "single_dropdown",
                            "multiple_choice"
                          ],
                          "x-enum-descriptions": [
                            "Short Answer",
                            "Long Answer",
                            "Single Radio Answer",
                            "Single Dropdown Answer",
                            "Multiple Answer"
                          ]
                        },
                        "min_length": {
                          "type": "integer",
                          "description": "The minimum length of the custom question answer. This is applicable for short_answer/long_answer question types. \nIf this custom question is required then the min_length should be atleast 1.",
                          "example": 500
                        },
                        "max_length": {
                          "type": "integer",
                          "description": "The maximum length of the custom question answer. This is applicable for short_answer/long_answer question types. \nThe max_length should be greater than or equal min_length. The allowed max_length for short_answer is 500 and for long_answer is 2000.",
                          "example": 2000
                        }
                      }
                    }
                  }
                },
                "description": "Event Registrant Questions."
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSuccessfully updated registration questions."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_ticket_types:write",
              "zoom_events_ticket_types:write:admin",
              "zoom_events:update:registraion_question",
              "zoom_events:update:registraion_question:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_ticket_types:write",
            "zoom_events_ticket_types:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:registraion_question",
            "zoom_events:update:registraion_question:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/ticket_types": {
      "get": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "List ticket types",
        "description": "Lists all ticket types associated with an event.\n\n\n\n**Scopes:** `zoom_events_ticket_types:read`,`zoom_events_ticket_types:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_ticket_types`,`zoom_events:read:list_ticket_types:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getEventTicketTypes",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n A list of ticket types.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Ticket type pagination",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of records.",
                      "example": 1
                    },
                    "ticket_types": {
                      "type": "array",
                      "description": "The list of ticket types for the event.",
                      "items": {
                        "title": "Ticket type information",
                        "type": "object",
                        "properties": {
                          "ticket_type_id": {
                            "type": "string",
                            "description": "The ID of the ticket type.",
                            "example": "234kjhg23kl4jhlaksjdh3"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the ticket type.",
                            "example": "General Admission Ticket"
                          },
                          "currency": {
                            "type": "string",
                            "description": "The currency of the ticket type.",
                            "example": "USD"
                          },
                          "free": {
                            "type": "boolean",
                            "description": "Whether the ticket is free.",
                            "example": true
                          },
                          "price": {
                            "type": "string",
                            "description": "The price of the ticket type.",
                            "example": "0"
                          },
                          "quantity": {
                            "type": "number",
                            "description": "The quantity of the ticket type.",
                            "example": 50
                          },
                          "start_time": {
                            "type": "string",
                            "description": "The start time of ticket sales.",
                            "example": "2022-03-24T22:30:00Z"
                          },
                          "end_time": {
                            "type": "string",
                            "description": "The end time of ticket sales.",
                            "example": "2023-01-01T06:30:00Z"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the ticket type.",
                            "example": "The description of the ticket type."
                          },
                          "sold_quantity": {
                            "type": "number",
                            "description": "The total number of tickets sold.",
                            "example": 35
                          },
                          "sessions": {
                            "type": "array",
                            "description": "The list of session IDs allowed for this ticket type or *ALL* \n *ALL* refer all the sessions in the event.",
                            "items": {
                              "type": "string",
                              "example": "ALL"
                            }
                          },
                          "bookmarked_sessions": {
                            "type": "array",
                            "description": "Pre-bookmark sessions for your attendees. This is list of session IDs to be bookmarked for this ticket type. Its values could be comma seperated session IDs or can have value *ALL* \n.  *ALL* refer all the sessions in the event.",
                            "items": {
                              "type": "string",
                              "example": "ALL"
                            }
                          },
                          "private_visibility_rules": {
                            "type": "object",
                            "properties": {
                              "account_restrict": {
                                "type": "boolean",
                                "description": "Whether the ticket type is restricted to certain Zoom accounts.",
                                "example": true
                              },
                              "allow_domain_list": {
                                "type": "array",
                                "description": "The ticket type is restricted to these specific domains. This array returns a maximum of 50 domains.",
                                "items": {
                                  "type": "string",
                                  "example": "zoom.us"
                                }
                              },
                              "email_restrict_list": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "The registration restricted to users by email addresses. Only these users are allowed to register and these email addresses will receive an email invitation.",
                                "items": {
                                  "type": "string",
                                  "example": "example1@email.com"
                                }
                              },
                              "attendance_type": {
                                "type": "string",
                                "description": "The type of attendee experience for the event. \n * `virtual`  virtual attendees only \n * `in-person` in-person attendees only \n * `hybrid`  both in-person and virtual attendees.",
                                "example": "hybrid",
                                "enum": [
                                  "virtual",
                                  "in-person",
                                  "hybrid"
                                ]
                              }
                            },
                            "description": "The private visibility settings"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_ticket_types:read",
              "zoom_events_ticket_types:read:admin",
              "zoom_events:read:list_ticket_types",
              "zoom_events:read:list_ticket_types:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_ticket_types:read",
            "zoom_events_ticket_types:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_ticket_types",
            "zoom_events:read:list_ticket_types:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "Create an event ticket type",
        "description": "Creates a ticket type for the event ID. This API is not allowed for single session and recurring event type.\n\n**Scopes:** `zoom_events_ticket_types:write`,`zoom_events_ticket_types:write:admin`\n\n**Granular Scopes:** `zoom_events:write:ticket_type`,`zoom_events:write:ticket_type:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createTicketType",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "description": "The details about the ticket type.\n",
          "content": {
            "application/json": {
              "schema": {
                "title": "Ticket type information",
                "required": [
                  "currency",
                  "end_time",
                  "name",
                  "start_time"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the ticket type.",
                    "example": "General Admission Ticket."
                  },
                  "currency": {
                    "type": "string",
                    "description": "The currency of the ticket type.",
                    "example": "USD"
                  },
                  "free": {
                    "type": "boolean",
                    "description": "Whether the ticket is free.",
                    "example": true
                  },
                  "price": {
                    "type": "string",
                    "description": "The price of the ticket type.",
                    "example": "0"
                  },
                  "quantity": {
                    "type": "number",
                    "description": "The quantity of the ticket type.",
                    "example": 50
                  },
                  "start_time": {
                    "type": "string",
                    "description": "The start time of ticket sales.",
                    "example": "2022-03-24T22:30:00Z"
                  },
                  "end_time": {
                    "type": "string",
                    "description": "The end time of ticket sales.",
                    "example": "2023-01-01T06:30:00Z"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the ticket type.",
                    "example": "The description of the ticket type."
                  },
                  "sold_quantity": {
                    "type": "number",
                    "description": "The total number of tickets sold.",
                    "example": 35
                  },
                  "sessions": {
                    "type": "array",
                    "description": "The list of session IDs allowed for this ticket type or *ALL* \n *ALL* refer all the sessions in the event.",
                    "items": {
                      "type": "string",
                      "example": "ALL"
                    }
                  },
                  "bookmarked_sessions": {
                    "type": "array",
                    "description": "The list of sessions that display in the main lobby. The value is an array of session IDs or *ALL* . \n *ALL* refer all the sessions in the event.",
                    "items": {
                      "type": "string",
                      "example": "ALL"
                    }
                  },
                  "private_visibility_rules": {
                    "type": "object",
                    "properties": {
                      "account_restrict": {
                        "type": "boolean",
                        "description": "Whether the ticket type is restricted to certain Zoom accounts.",
                        "example": true
                      },
                      "allow_domain_list": {
                        "type": "array",
                        "description": "The ticket type is restricted to these specific domains. The maximum domains you can pass in the array is 50. ",
                        "items": {
                          "type": "string",
                          "description": "Each domain can have up to 40 characters",
                          "example": "zoom.us"
                        }
                      },
                      "email_restrict_list": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The registration restricted to users by email addresses. Only these users are allowed to register and these email addresses will receive an email invitation.",
                        "items": {
                          "type": "string",
                          "description": "Each email can have up to 60 characters",
                          "example": "example1@email.com"
                        }
                      },
                      "attendance_type": {
                        "type": "string",
                        "description": "The type of attendee experience for the event. \n * `virtual`  virtual attendees only \n * `in-person` in-person attendees only \n * `hybrid`  both in-person and virtual attendees",
                        "example": "hybrid",
                        "enum": [
                          "virtual",
                          "in-person",
                          "hybrid"
                        ]
                      }
                    },
                    "description": "The private visibility settings."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`  \n \nThe list of ticket types.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Ticket type information",
                  "type": "object",
                  "properties": {
                    "ticket_type_id": {
                      "type": "string",
                      "description": "The ID of the ticket type for purchase.",
                      "example": "pfalaof9s83lsLJD9u2d"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `26401` <br>\n The ticket sale dates are invalid. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event ID not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_ticket_types:write",
              "zoom_events_ticket_types:write:admin",
              "zoom_events:write:ticket_type",
              "zoom_events:write:ticket_type:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_ticket_types:write",
            "zoom_events_ticket_types:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:write:ticket_type",
            "zoom_events:write:ticket_type:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/ticket_types/{ticketTypeId}": {
      "delete": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "Delete a ticket type",
        "description": "Deletes a ticket type of an event. This API is not allowed for single session event type.\n\n**Scopes:** `zoom_events_ticket_types:write`,`zoom_events_ticket_types:write:admin`\n\n**Granular Scopes:** `zoom_events:delete:ticket_type`,`zoom_events:delete:ticket_type:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteEventTicketType",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "ticketTypeId",
            "in": "path",
            "description": "The ID of the ticket type.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W38C8g0_SfmIzp5toOLoLQ"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSuccessfully deleted the ticket type."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event ID not found. <br>\n**Error Code:** `26502` <br>\n The ticket type ID is invalid. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_ticket_types:write",
              "zoom_events_ticket_types:write:admin",
              "zoom_events:delete:ticket_type",
              "zoom_events:delete:ticket_type:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_ticket_types:write",
            "zoom_events_ticket_types:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:delete:ticket_type",
            "zoom_events:delete:ticket_type:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "Update ticket type for an event",
        "description": "Updates the ticket type for an event ID. This API is not allowed for single session event type.\n\n**Scopes:** `zoom_events_ticket_types:write`,`zoom_events_ticket_types:write:admin`\n\n**Granular Scopes:** `zoom_events:update:ticket_type`,`zoom_events:update:ticket_type:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateTicketType",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "ticketTypeId",
            "in": "path",
            "description": "The ID of the ticket type.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W38C8g0_SfmIzp5toOLoLQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "The ticket type information.",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the ticket type.",
                    "example": "General Admission Ticket"
                  },
                  "currency": {
                    "type": "string",
                    "description": "The currency of the ticket type.",
                    "example": "USD"
                  },
                  "free": {
                    "type": "boolean",
                    "description": "Whether the ticket is free.",
                    "example": true
                  },
                  "price": {
                    "type": "string",
                    "description": "The price of the ticket type.",
                    "example": "0"
                  },
                  "quantity": {
                    "type": "number",
                    "description": "The quantity of the ticket type.",
                    "example": 50
                  },
                  "start_time": {
                    "type": "string",
                    "description": "The start time of ticket sales.",
                    "example": "2022-03-24T22:30:00Z"
                  },
                  "end_time": {
                    "type": "string",
                    "description": "The end time of ticket sales.",
                    "example": "2023-01-01T06:30:00Z"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the ticket type.",
                    "example": "The description of the ticket type."
                  },
                  "sold_quantity": {
                    "type": "number",
                    "description": "The total number of tickets sold.",
                    "example": 35
                  },
                  "sessions": {
                    "type": "array",
                    "description": "The list of session IDs allowed for this ticket type or *ALL* \n *ALL* refer all the sessions in the event.",
                    "items": {
                      "type": "string",
                      "example": "ALL"
                    }
                  },
                  "bookmarked_sessions": {
                    "type": "array",
                    "description": "The list of sessions that display in the main lobby. The value is an array of session IDs or *ALL* . \n *ALL* refer all the sessions in the event.",
                    "items": {
                      "type": "string",
                      "example": "ALL"
                    }
                  },
                  "private_visibility_rules": {
                    "title": "The private visibility settings",
                    "type": "object",
                    "properties": {
                      "account_restrict": {
                        "type": "boolean",
                        "description": "Whether the ticket type is restricted to certain Zoom accounts.",
                        "example": true
                      },
                      "allow_domain_list": {
                        "type": "array",
                        "description": "The ticket type is restricted to these specific domains. The maximum domains we can pass in the array is 50. ",
                        "items": {
                          "type": "string",
                          "description": "Each domain can have up to 40 characters.",
                          "example": "zoom.us"
                        }
                      },
                      "email_restrict_list": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The registration restricted to users by email addresses. Only these users are allowed to register and these email addresses receive an email invitation.",
                        "items": {
                          "type": "string",
                          "description": "Each email can have up to 60 characters.",
                          "example": "example1@email.com"
                        }
                      },
                      "attendance_type": {
                        "type": "string",
                        "description": "The type of attendee experience for the event. \n * `virtual`  virtual attendees only \n * `in-person` in-person attendees only \n * `hybrid`  both in-person and virtual attendees.",
                        "example": "hybrid",
                        "enum": [
                          "virtual",
                          "in-person",
                          "hybrid"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSuccessfully updated the ticket type."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `26502` <br>\n The ticket type ID is invalid. <br>\n**Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_ticket_types:write",
              "zoom_events_ticket_types:write:admin",
              "zoom_events:update:ticket_type",
              "zoom_events:update:ticket_type:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_ticket_types:write",
            "zoom_events_ticket_types:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:ticket_type",
            "zoom_events:update:ticket_type:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/ticket_types/{ticketTypeId}/questions": {
      "get": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "List registration questions for ticket type",
        "description": "List registration questions and fields that are to be answered by users while registering for an event. These questions are setup at ticket_type level.\n\n**Scopes:** `zoom_events_ticket_types:read`,`zoom_events_ticket_types:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_registration_questions`,`zoom_events:read:list_registration_questions:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getRegistrationQuestionsForTicketType",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "ticketTypeId",
            "in": "path",
            "description": "The ID of the ticket type.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W38C8g0_SfmIzp5toOLoLQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \nSuccessfully retrieved registration questions.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "title": "Event Registrant Questions",
                      "type": "object",
                      "properties": {
                        "questions": {
                          "type": "array",
                          "description": "Array of registration fields whose values should be provided by registrants during registration.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field_name": {
                                "type": "string",
                                "description": "Field name.",
                                "example": "last_name",
                                "enum": [
                                  "first_name",
                                  "last_name",
                                  "address",
                                  "city",
                                  "state",
                                  "zip",
                                  "country",
                                  "phone",
                                  "industry",
                                  "job_title",
                                  "organization",
                                  "organization_size"
                                ],
                                "x-enum-descriptions": [
                                  "First Name",
                                  "Last Name",
                                  "Address",
                                  "City",
                                  "State/Province",
                                  "Zip/Postal Code",
                                  "Country/Region",
                                  "Phone",
                                  "Industry",
                                  "Job Title",
                                  "Organization",
                                  "Organization Size"
                                ]
                              },
                              "required": {
                                "type": "boolean",
                                "description": "State whether the selected fields are required or optional.",
                                "example": true
                              },
                              "title": {
                                "type": "string",
                                "description": "Title of the question.",
                                "example": "Last Name"
                              },
                              "question_id": {
                                "type": "string",
                                "description": "The ID of the question.",
                                "example": "Fn2rBZgJQzi6VIU--uWqnA"
                              }
                            }
                          }
                        },
                        "custom_questions": {
                          "type": "array",
                          "description": "Array of Registrant Custom Questions.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "options": {
                                "type": "array",
                                "description": "An array of answer choices. Can't be used for short or long answer type.",
                                "items": {
                                  "type": "string",
                                  "example": "Good"
                                }
                              },
                              "required": {
                                "type": "boolean",
                                "description": "State whether or not the custom question is required to be answered by a registrant.",
                                "example": true
                              },
                              "title": {
                                "type": "string",
                                "description": "Custom question.",
                                "example": "How are you?"
                              },
                              "question_id": {
                                "type": "string",
                                "description": "The ID of the custom question.",
                                "example": "Fn2rBZgJQzi6VIU--uWqnA"
                              },
                              "type": {
                                "type": "string",
                                "description": "The question-answer type.",
                                "example": "short_answer",
                                "enum": [
                                  "short_answer",
                                  "long_answer",
                                  "single_radio",
                                  "single_dropdown",
                                  "multiple_choice"
                                ],
                                "x-enum-descriptions": [
                                  "Short Answer",
                                  "Long Answer",
                                  "Single Radio Answer",
                                  "Single Dropdown Answer",
                                  "Multiple Answer"
                                ]
                              },
                              "min_length": {
                                "type": "integer",
                                "description": "The minimum length of the custom question answer. This is applicable for short_answer/long_answer question types. \nIf this custom question is required then the min_length should be atleast 1.",
                                "example": 500
                              },
                              "max_length": {
                                "type": "integer",
                                "description": "The maximum length of the custom question answer. This is applicable for short_answer/long_answer question types. \nThe max_length should be greater than or equal min_length. The allowed max_length for short_answer is 500 and for long_answer is 2000.",
                                "example": 2000
                              }
                            }
                          }
                        }
                      },
                      "description": "Event Registrant Questions."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_ticket_types:read",
              "zoom_events_ticket_types:read:admin",
              "zoom_events:read:list_registration_questions",
              "zoom_events:read:list_registration_questions:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_ticket_types:read",
            "zoom_events_ticket_types:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_registration_questions",
            "zoom_events:read:list_registration_questions:admin"
          ]
        }
      },
      "put": {
        "tags": [
          "Ticket Types"
        ],
        "summary": "Update registration questions for ticket type",
        "description": "Updates registration questions and fields that are to be answered by users while registering for an event. These questions are setup at ticket_type level. This API is not allowed for single session event type.\n\n**Scopes:** `zoom_events_ticket_types:write`,`zoom_events_ticket_types:write:admin`\n\n**Granular Scopes:** `zoom_events:update:registraion_question`,`zoom_events:update:registraion_question:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "updateRegistrationQuestionsForTicketType",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "ticketTypeId",
            "in": "path",
            "description": "The ID of the ticket type.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W38C8g0_SfmIzp5toOLoLQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Event Registrant Questions",
                "type": "object",
                "properties": {
                  "questions": {
                    "type": "array",
                    "description": "Array of registration fields whose values should be provided by registrants during registration.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field_name": {
                          "type": "string",
                          "description": "Field name.",
                          "example": "last_name",
                          "enum": [
                            "first_name",
                            "last_name",
                            "address",
                            "city",
                            "state",
                            "zip",
                            "country",
                            "phone",
                            "industry",
                            "job_title",
                            "organization",
                            "organization_size"
                          ],
                          "x-enum-descriptions": [
                            "First Name",
                            "Last Name",
                            "Address",
                            "City",
                            "State/Province",
                            "Zip/Postal Code",
                            "Country/Region",
                            "Phone",
                            "Industry",
                            "Job Title",
                            "Organization",
                            "Organization Size"
                          ]
                        },
                        "required": {
                          "type": "boolean",
                          "description": "Whether the selected fields are required or optional.",
                          "example": true
                        },
                        "title": {
                          "type": "string",
                          "description": "The title of the question.",
                          "example": "Last Name"
                        },
                        "question_id": {
                          "type": "string",
                          "description": "The ID of the question.",
                          "example": "Fn2rBZgJQzi6VIU--uWqnA"
                        }
                      }
                    }
                  },
                  "custom_questions": {
                    "type": "array",
                    "description": "Array of registrant custom questions.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "options": {
                          "type": "array",
                          "description": "An array of answer choices. Can't be used for short or long answer type.",
                          "items": {
                            "type": "string",
                            "example": "Good"
                          }
                        },
                        "required": {
                          "type": "boolean",
                          "description": "State whether or not the custom question is required to be answered by a registrant.",
                          "example": true
                        },
                        "title": {
                          "type": "string",
                          "description": "Custom question.",
                          "example": "How are you?"
                        },
                        "question_id": {
                          "type": "string",
                          "description": "The ID of the custom question.",
                          "example": "Fn2rBZgJQzi6VIU--uWqnA"
                        },
                        "type": {
                          "type": "string",
                          "description": "The question-answer type.",
                          "example": "short_answer",
                          "enum": [
                            "short_answer",
                            "long_answer",
                            "single_radio",
                            "single_dropdown",
                            "multiple_choice"
                          ],
                          "x-enum-descriptions": [
                            "Short Answer",
                            "Long Answer",
                            "Single Radio Answer",
                            "Single Dropdown Answer",
                            "Multiple Answer"
                          ]
                        },
                        "min_length": {
                          "type": "integer",
                          "description": "The minimum length of the custom question answer. This is applicable for short_answer/long_answer question types. \nIf this custom question is required then the min_length should be atleast 1.",
                          "example": 500
                        },
                        "max_length": {
                          "type": "integer",
                          "description": "The maximum length of the custom question answer. This is applicable for short_answer/long_answer question types. \nThe max_length should be greater than or equal min_length. The allowed max_length for short_answer is 500 and for long_answer is 2000.",
                          "example": 2000
                        }
                      }
                    }
                  }
                },
                "description": "Event Registrant Questions."
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSuccessfully updated registration questions."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_ticket_types:write",
              "zoom_events_ticket_types:write:admin",
              "zoom_events:update:registraion_question",
              "zoom_events:update:registraion_question:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_ticket_types:write",
            "zoom_events_ticket_types:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:update:registraion_question",
            "zoom_events:update:registraion_question:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/tickets": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "List tickets",
        "description": "Retrieves the ticket information of an event.\n\n**Scopes:** `zoom_events_tickets:read`,`zoom_events_tickets:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_tickets`,`zoom_events:read:list_tickets:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getTickets",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "external_ticket_id",
            "in": "query",
            "description": "The ID of the external ticket.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "W38C8g0_SfmIzp5toOLoLQ"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email of registrant.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test@example.com"
            }
          },
          {
            "name": "ticket_type_id",
            "in": "query",
            "description": "The ID of the ticket type.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "W38C8g0_SfmIzp5toOLoLQ"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n Ticket Information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Tickets pagination result",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of tickets.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token.",
                      "example": "yqT59YnBSHqvDdNnkeHQsA"
                    },
                    "tickets": {
                      "type": "array",
                      "description": "Tickets",
                      "items": {
                        "description": "The person who is registered for the event.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "ticket_id": {
                                "type": "string",
                                "description": "A set of unique alphanumeric characters that references the ticket ID.",
                                "example": "iso9Dllddp39dagjLj9j"
                              },
                              "ticket_type_id": {
                                "type": "string",
                                "description": "The ID of the ticket type for purchase.",
                                "example": "pfalaof9s83lsLJD9u2d"
                              },
                              "external_ticket_id": {
                                "type": "string",
                                "description": "A set of unique alphanumeric characters that references the external ticket ID.",
                                "example": "iso9Djldop39dagjLj3j"
                              },
                              "event_join_link": {
                                "type": "string",
                                "description": "A unique join link created for the ticket.",
                                "example": "https://events.zoom.us/ejl/xyz"
                              },
                              "send_notification": {
                                "type": "boolean",
                                "description": "Whether to receive email notifications.",
                                "example": false
                              },
                              "email": {
                                "type": "string",
                                "description": "The email address used for the registration.",
                                "example": "email@zoom.us"
                              },
                              "ticket_role_type": {
                                "type": "string",
                                "description": "The ticket role type: \n * `normal` The normal ticket \n * `alternative_host` The alternative host ticket \n * `panelist` The panelist ticket \n * `bind_meeting` The bind meeting ticket \n * `speaker` The speaker ticket \n * `interpreter` The interpreter ticket \n * `sponsor` The sponsor ticket \n * `host` The host ticket \n * `moderator` The moderator ticket \n * `expo_booth_owner` The expo booth owner ticket \n * `attendee_without_order` The attendee without order ticket \n * `pre_registration` The pre-registration ticket \n * `company_zoom_room` The company zoom room ticket \n * `moderator_allhost` The moderator all host ticket \n * `hub_host` The hub host ticket \n * `hub_owner` The hub owner ticket &quot;,\n * `subscription` The subscription ticket &quot;",
                                "example": "normal",
                                "enum": [
                                  "normal",
                                  "alternative_host",
                                  "panelist",
                                  "bind_meeting",
                                  "speaker",
                                  "subscription",
                                  "sponsor",
                                  "interpreter",
                                  "host",
                                  "moderator",
                                  "expo_booth_owner",
                                  "attendee_without_order",
                                  "pre_registration",
                                  "company_zoom_room",
                                  "moderator_allhost",
                                  "hub_host",
                                  "hub_owner"
                                ]
                              },
                              "registration_source": {
                                "type": "string",
                                "description": "The source of registration.",
                                "example": "Pardot"
                              },
                              "authentication_method": {
                                "type": "string",
                                "description": "The event authentication method for the ticket: \n * `zoom_account` Zoom account holder  * `zoom_account_otp` Zoom account holder with OTP  * `corporate_idp` Corporate IDP  * `no_auth` No authentication",
                                "example": "no_auth",
                                "enum": [
                                  "zoom_account",
                                  "zoom_account_otp",
                                  "corporate_idp",
                                  "no_auth"
                                ]
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "first_name": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "The registrant's first name.",
                                "example": "Jill"
                              },
                              "last_name": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "The registrant's last name.",
                                "example": "Chill"
                              },
                              "address": {
                                "type": "string",
                                "description": "The registrant's address.",
                                "example": "1800 Amphibious Blvd"
                              },
                              "city": {
                                "type": "string",
                                "description": "The registrant's city.",
                                "example": "Mountain View"
                              },
                              "state": {
                                "type": "string",
                                "description": "The registrant's state or province.",
                                "example": "CA"
                              },
                              "zip": {
                                "type": "string",
                                "description": "The registrant's ZIP or postal code.",
                                "example": "94045"
                              },
                              "country": {
                                "type": "string",
                                "description": "The registrant's two-letter [country code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).",
                                "example": "US"
                              },
                              "phone": {
                                "type": "string",
                                "description": "The registrant's phone number.",
                                "example": "5550100"
                              },
                              "industry": {
                                "type": "string",
                                "description": "The registrant's industry.",
                                "example": "Food"
                              },
                              "job_title": {
                                "type": "string",
                                "description": "The registrant's job title.",
                                "example": "Chef"
                              },
                              "organization": {
                                "type": "string",
                                "description": "The registrant's organization.",
                                "example": "ABC Ltd."
                              },
                              "organization_size": {
                                "type": "string",
                                "description": "The registrant's number of employees.",
                                "example": "150"
                              }
                            },
                            "description": "Standard question fields."
                          },
                          {
                            "type": "object",
                            "properties": {
                              "custom_questions": {
                                "type": "array",
                                "description": "Information about custom questions.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "title": {
                                      "maxLength": 256,
                                      "type": "string",
                                      "description": "The title of the custom question.",
                                      "example": "What do you hope to learn from this?"
                                    },
                                    "answer": {
                                      "type": "string",
                                      "description": "The custom question's response value.",
                                      "example": "Look forward to learning how you come up with new recipes and what other services you offer."
                                    }
                                  },
                                  "description": "Information about custom questions."
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_tickets:read",
              "zoom_events_tickets:read:admin",
              "zoom_events:read:list_tickets",
              "zoom_events:read:list_tickets:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_tickets:read",
            "zoom_events_tickets:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_tickets",
            "zoom_events:read:list_tickets:admin"
          ]
        }
      },
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Create tickets",
        "description": "Create tickets for an event. You can add a single ticket or up to 30 tickets in a batch operation. Please note that this request uses the [`pre-registration`](https://support.zoom.us/hc/en-us/articles/13475985512973-Pre-registering-Zoom-Events-guests) flow. \n\n**Scopes:** `zoom_events_tickets:write`,`zoom_events_tickets:write:admin`\n\n**Granular Scopes:** `zoom_events:write:ticket`,`zoom_events:write:ticket:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "createTickets",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          }
        ],
        "requestBody": {
          "description": "The information about the created ticket.\n",
          "content": {
            "application/json": {
              "schema": {
                "title": "List of tickets for the event.",
                "type": "object",
                "properties": {
                  "registration_source": {
                    "type": "string",
                    "description": "The source of registration.",
                    "example": "Pardot"
                  },
                  "tickets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "The name of the attendee who is registered for the event.",
                      "allOf": [
                        {
                          "required": [
                            "email",
                            "ticket_type_id"
                          ],
                          "type": "object",
                          "properties": {
                            "email": {
                              "maxLength": 128,
                              "type": "string",
                              "description": "The email address used for the registration.",
                              "format": "email",
                              "example": "email@zoom.us"
                            },
                            "ticket_type_id": {
                              "type": "string",
                              "description": "The ID of the ticket type for purchase.",
                              "example": "pfalaof9s83lsLJD9u2d"
                            },
                            "external_ticket_id": {
                              "type": "string",
                              "description": "A set of unique alphanumeric characters that references the external ticket ID.",
                              "example": "iso9Djldop39dagjLj3j"
                            },
                            "send_notification": {
                              "type": "boolean",
                              "description": "Whether to receive email notifications.",
                              "example": false
                            },
                            "fast_join": {
                              "type": "boolean",
                              "description": "Whether to support guest join i.e. Non-Zoom users (Fast join without upfront authentication). If true then the `registration_needed` flag should not be set to true as it is an invalid combination.",
                              "example": false
                            },
                            "registration_needed": {
                              "type": "boolean",
                              "description": "Whether registrant needs to fill an online registration form.\n If **true** then the registration questions fields such as first_name, last_name, and address are not needed in the request body and are ignored if present. \n Also, if **true** then event_registration_link is returned instead of event_join_link in the response.",
                              "example": false
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "first_name": {
                              "maxLength": 64,
                              "type": "string",
                              "description": "The registrant's first name.",
                              "example": "Jill"
                            },
                            "last_name": {
                              "maxLength": 64,
                              "type": "string",
                              "description": "The registrant's last name.",
                              "example": "Chill"
                            },
                            "address": {
                              "type": "string",
                              "description": "The registrant's address.",
                              "example": "1800 Amphibious Blvd"
                            },
                            "city": {
                              "type": "string",
                              "description": "The registrant's city.",
                              "example": "Mountain View"
                            },
                            "state": {
                              "type": "string",
                              "description": "The registrant's state or province.",
                              "example": "CA"
                            },
                            "zip": {
                              "type": "string",
                              "description": "The registrant's ZIP or postal code.",
                              "example": "94045"
                            },
                            "country": {
                              "type": "string",
                              "description": "The registrant's two-letter [country code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).",
                              "example": "US"
                            },
                            "phone": {
                              "type": "string",
                              "description": "The registrant's phone number.",
                              "example": "5550100"
                            },
                            "industry": {
                              "type": "string",
                              "description": "The registrant's industry.",
                              "example": "Food"
                            },
                            "job_title": {
                              "type": "string",
                              "description": "The registrant's job title.",
                              "example": "Chef"
                            },
                            "organization": {
                              "type": "string",
                              "description": "The registrant's organization.",
                              "example": "ABC Ltd."
                            },
                            "organization_size": {
                              "type": "string",
                              "description": "The registrant's number of employees.",
                              "example": "150"
                            }
                          },
                          "description": "The standard question fields."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "custom_questions": {
                              "type": "array",
                              "description": "The information about custom questions.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "title": {
                                    "maxLength": 256,
                                    "type": "string",
                                    "description": "The title of the custom question.",
                                    "example": "What do you hope to learn from this?"
                                  },
                                  "answer": {
                                    "type": "string",
                                    "description": "The custom question's response value.",
                                    "example": "Look forward to learning how you come up with new recipes and what other services you offer."
                                  }
                                },
                                "description": "Information about custom questions."
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "description": "The list of tickets for the event."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "**HTTP Status Code:** `201`  \n \nThe list of tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of tickets for the event.",
                  "type": "object",
                  "properties": {
                    "tickets": {
                      "type": "array",
                      "items": {
                        "required": [
                          "email",
                          "ticket_type_id"
                        ],
                        "type": "object",
                        "properties": {
                          "ticket_id": {
                            "type": "string",
                            "description": "A set of unique alphanumeric characters that references the ticket ID.",
                            "example": "iso9Dllddp39dagjLj9j"
                          },
                          "external_ticket_id": {
                            "type": "string",
                            "description": "A set of unique alphanumeric characters that references the external ticket ID.",
                            "example": "iso9Djldop39dagjLj3j"
                          },
                          "event_join_link": {
                            "type": "string",
                            "description": "A unique join link created for the ticket.",
                            "example": "https://events.zoom.us/ejl/xyz"
                          },
                          "event_registration_link": {
                            "type": "string",
                            "description": "A unique registration link created for the registrant to register for the event.",
                            "example": "https://events.zoom.us/etr/xyz123"
                          },
                          "email": {
                            "type": "string",
                            "description": "The email address used for the registration.",
                            "example": "email@zoom.us"
                          }
                        },
                        "description": "The name of the attendee who is registered for the event."
                      }
                    }
                  },
                  "description": "The list of tickets created for the event."
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `26502` <br>\n The ticket type ID is invalid. <br>\n**Error Code:** `26501` <br>\n Event is not published yet. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n**Error Code:** `2007` <br>\n Not enough stock or invalid ticket_type_id. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_tickets:write",
              "zoom_events_tickets:write:admin",
              "zoom_events:write:ticket",
              "zoom_events:write:ticket:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_tickets:write",
            "zoom_events_tickets:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:write:ticket",
            "zoom_events:write:ticket:admin"
          ]
        }
      }
    },
    "/zoom_events/events/{eventId}/tickets/{ticketId}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get a ticket",
        "description": "Retrieves information on a specific ticket.\n\n**Scopes:** `zoom_events_tickets:read`,`zoom_events_tickets:read:admin`\n\n**Granular Scopes:** `zoom_events:read:ticket`,`zoom_events:read:ticket:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getTicketDetails",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "ticketId",
            "in": "path",
            "description": "The ID of the registered ticket.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W38C8g0_SfmIzp5toOLoLQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`  \n \n Ticket Information.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "email",
                    "ticket_type_id"
                  ],
                  "description": "The name of the attendee who is registered for the event.",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "ticket_id": {
                          "type": "string",
                          "description": "A set of unique alphanumeric characters that references the ticket ID.",
                          "example": "iso9Dllddp39dagjLj9j"
                        },
                        "ticket_type_id": {
                          "type": "string",
                          "description": "The ID of the ticket type for purchase.",
                          "example": "pfalaof9s83lsLJD9u2d"
                        },
                        "external_ticket_id": {
                          "type": "string",
                          "description": "A set of unique alphanumeric characters that references the external ticket ID.",
                          "example": "iso9Djldop39dagjLj3j"
                        },
                        "event_join_link": {
                          "type": "string",
                          "description": "A unique join link created for the ticket.",
                          "example": "https://events.zoom.us/ejl/xyz"
                        },
                        "send_notification": {
                          "type": "boolean",
                          "description": "Whether to receive email notifications.",
                          "example": false
                        },
                        "email": {
                          "type": "string",
                          "description": "The email address used for the registration.",
                          "example": "email@zoom.us"
                        },
                        "ticket_role_type": {
                          "type": "string",
                          "description": "The ticket role type: \n * `normal` The normal ticket \n * `alternative_host` The alternative host ticket \n * `panelist` The panelist ticket \n * `bind_meeting` The bind meeting ticket \n * `speaker` The speaker ticket \n * `interpreter` The interpreter ticket \n * `sponsor` The sponsor ticket \n * `host` The host ticket \n * `moderator` The moderator ticket \n * `expo_booth_owner` The expo booth owner ticket \n * `attendee_without_order` The attendee without order ticket \n * `pre_registration` The pre-registration ticket \n * `company_zoom_room` The company Zoom Room ticket \n * `moderator_allhost` The moderator all host ticket \n * `hub_host` The hub host ticket \n * `hub_owner` The hub owner ticket\n * `subscription` The subscription ticket",
                          "example": "normal",
                          "enum": [
                            "normal",
                            "alternative_host",
                            "panelist",
                            "bind_meeting",
                            "speaker",
                            "subscription",
                            "sponsor",
                            "interpreter",
                            "host",
                            "moderator",
                            "expo_booth_owner",
                            "attendee_without_order",
                            "pre_registration",
                            "company_zoom_room",
                            "moderator_allhost",
                            "hub_host",
                            "hub_owner"
                          ]
                        },
                        "registration_source": {
                          "type": "string",
                          "description": "The source of registration.",
                          "example": "Pardot"
                        },
                        "authentication_method": {
                          "type": "string",
                          "description": "The event authentication method for the ticket: \n * `zoom_account` Zoom account holder  * `zoom_account_otp` Zoom account holder with OTP  * `corporate_idp` Corporate IDP  * `no_auth` No authentication",
                          "example": "no_auth",
                          "enum": [
                            "zoom_account",
                            "zoom_account_otp",
                            "corporate_idp",
                            "no_auth"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "first_name": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "The registrant's first name.",
                          "example": "Jill"
                        },
                        "last_name": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "The registrant's last name.",
                          "example": "Chill"
                        },
                        "address": {
                          "type": "string",
                          "description": "The registrant's address.",
                          "example": "1800 Amphibious Blvd"
                        },
                        "city": {
                          "type": "string",
                          "description": "The registrant's city.",
                          "example": "Mountain View"
                        },
                        "state": {
                          "type": "string",
                          "description": "The registrant's state or province.",
                          "example": "CA"
                        },
                        "zip": {
                          "type": "string",
                          "description": "The registrant's ZIP or postal code.",
                          "example": "94045"
                        },
                        "country": {
                          "type": "string",
                          "description": "The registrant's two-letter [country code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).",
                          "example": "US"
                        },
                        "phone": {
                          "type": "string",
                          "description": "The registrant's phone number.",
                          "example": "5550100"
                        },
                        "industry": {
                          "type": "string",
                          "description": "The registrant's industry.",
                          "example": "Food"
                        },
                        "job_title": {
                          "type": "string",
                          "description": "The registrant's job title.",
                          "example": "Chef"
                        },
                        "organization": {
                          "type": "string",
                          "description": "The registrant's organization.",
                          "example": "ABC Ltd."
                        },
                        "organization_size": {
                          "type": "string",
                          "description": "The registrant's number of employees.",
                          "example": "150"
                        }
                      },
                      "description": "The standard question fields."
                    },
                    {
                      "type": "object",
                      "properties": {
                        "custom_questions": {
                          "type": "array",
                          "description": "Information about custom questions.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "maxLength": 256,
                                "type": "string",
                                "description": "The title of the custom question.",
                                "example": "What do you hope to learn from this?"
                              },
                              "answer": {
                                "type": "string",
                                "description": "The custom question's response value.",
                                "example": "Look forward to learning how you come up with new recipes and what other services you offer."
                              }
                            },
                            "description": "Information about custom questions."
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `2002` <br>\n Event not found. <br>\n**Error Code:** `26503` <br>\n Ticket not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_tickets:read",
              "zoom_events_tickets:read:admin",
              "zoom_events:read:ticket",
              "zoom_events:read:ticket:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_tickets:read",
            "zoom_events_tickets:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:ticket",
            "zoom_events:read:ticket:admin"
          ]
        }
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "Delete a ticket",
        "description": "Deletes a ticket.\n\n**Scopes:** `zoom_events_tickets:write`,`zoom_events_tickets:write:admin`\n\n**Granular Scopes:** `zoom_events:delete:ticket`,`zoom_events:delete:ticket:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "deleteTicket",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "ticketId",
            "in": "path",
            "description": "The ID of the registered ticket.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "W38C8g0_SfmIzp5toOLoLQ"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nTicket deleted successfully."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `26503` <br>\n Ticket not found. <br>\n**Error Code:** `2002` <br>\n Event ID not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_tickets:write",
              "zoom_events_tickets:write:admin",
              "zoom_events:delete:ticket",
              "zoom_events:delete:ticket:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_tickets:write",
            "zoom_events_tickets:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:delete:ticket",
            "zoom_events:delete:ticket:admin"
          ]
        }
      },
      "patch": {
        "tags": [
          "Tickets"
        ],
        "summary": "Update ticket",
        "description": "Updates ticket questions for the given ticket ID and event ID.\n\n**Scopes:** `zoom_events_tickets:write`,`zoom_events_tickets:write:admin`\n\n**Granular Scopes:** `zoom_events:write:ticket`,`zoom_events:write:ticket:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "Updateticket",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "ticketId",
            "in": "path",
            "description": "The ID of the ticket.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "kNqDPC6hSFiZ9NpgjA782"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The registrant's first name.",
                    "example": "Jill"
                  },
                  "last_name": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The registrant's last name.",
                    "example": "Chill"
                  },
                  "address": {
                    "type": "string",
                    "description": "The registrant's address.",
                    "example": "1800 Amphibious Blvd"
                  },
                  "city": {
                    "type": "string",
                    "description": "The registrant's city.",
                    "example": "Mountain View"
                  },
                  "state": {
                    "type": "string",
                    "description": "The registrant's state or province.",
                    "example": "CA"
                  },
                  "zip": {
                    "type": "string",
                    "description": "The registrant's ZIP or postal code.",
                    "example": "94045"
                  },
                  "country": {
                    "type": "string",
                    "description": "The registrant's two-letter [country code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).",
                    "example": "US"
                  },
                  "phone": {
                    "type": "string",
                    "description": "The registrant's phone number.",
                    "example": "5550100"
                  },
                  "industry": {
                    "type": "string",
                    "description": "The registrant's industry.",
                    "example": "Food"
                  },
                  "job_title": {
                    "type": "string",
                    "description": "The registrant's job title.",
                    "example": "Chef"
                  },
                  "organization": {
                    "type": "string",
                    "description": "The registrant's organization.",
                    "example": "ABC Ltd."
                  },
                  "organization_size": {
                    "type": "string",
                    "description": "The registrant's number of employees.",
                    "example": "150"
                  },
                  "custom_questions": {
                    "maxItems": 100,
                    "type": "array",
                    "description": "Information about custom questions.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "maxLength": 256,
                          "type": "string",
                          "description": "The title of the custom question.",
                          "example": "What do you hope to learn from this?"
                        },
                        "answer": {
                          "type": "string",
                          "description": "The custom question's response value.",
                          "example": "Look forward to learning how you come up with new recipes and what other services you offer."
                        }
                      },
                      "description": "Information about custom questions."
                    }
                  },
                  "external_ticket_id": {
                    "type": "string",
                    "description": "A set of unique alphanumeric characters that references the external ticket ID.",
                    "example": "iso9Djldop39dagjLj3j"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "**HTTP Status Code:** `204`  \n \nSuccessfully updated the ticket questions."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n **Error Code:** `1063` <br>\n Ticket ID can not updated. <br>\n"
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n **Error Code:** `26503` <br>\n Ticket not found. <br>\n**Error Code:** `2002` <br>\n Event ID not found. <br>\n"
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_tickets:write",
              "zoom_events_tickets:write:admin",
              "zoom_events:write:ticket",
              "zoom_events:write:ticket:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "july-2024-zoap-gateway",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_tickets:write",
            "zoom_events_tickets:write:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:write:ticket",
            "zoom_events:write:ticket:admin"
          ]
        }
      }
    },
    "/zoom_events/hubs/{hubId}/vod_channels": {
      "get": {
        "tags": [
          "Video On-Demand"
        ],
        "summary": "List channels",
        "description": "Retrieves the channel information for a hub.\n\n**Scopes:** `zoom_events_vod_channels:read`,`zoom_events_vod_channels:read:admin`\n\n**Granular Scopes:** `zoom_events:read:list_all_vod_channels`,`zoom_events:read:list_all_vod_channels:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "getVODChannels",
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "description": "The ID of the hub.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kNqLPC6hSFiZ9NpgjA549w"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The next page token paginates through a set of large results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned in a single API call. Max 300.",
            "required": false,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "example": 30,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**HTTP Status Code:** `200`   Channel Information.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VOD Channels pagination result",
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "number",
                      "description": "The total number of VOD channels.",
                      "example": 1
                    },
                    "next_page_token": {
                      "type": "string",
                      "description": "The next page token.",
                      "example": "yqT59YnBSHqvDdNnkeHQsA"
                    },
                    "vod_channels": {
                      "type": "array",
                      "description": "Channels",
                      "items": {
                        "description": "The list of VOD channels for a hub.",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "channel_id": {
                                "type": "string",
                                "description": "A set of unique alphanumeric characters that references the VOD channel ID.",
                                "example": "iso9Dllddp39dagjLj9j"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the channel.",
                                "example": "My Channel"
                              },
                              "status": {
                                "type": "string",
                                "description": "The VOD channel status: \nOptions:\n * `PUBLISHED` - Published event.\n * `DRAFT` - Draft event.",
                                "example": "PUBLISHED"
                              },
                              "is_published_to_hub": {
                                "type": "boolean",
                                "description": "This field only applies to `VIDEO_LIST_HUB` type channel. This flag determines whether the content is visible on attendee facing hub profile page.",
                                "example": true
                              },
                              "type": {
                                "type": "string",
                                "description": "The channel type: \n * `video_list_hub` - The channel is fully on Zoom Events.  \n * `single_video_embedded` - The single video embedded channel.",
                                "example": "video_list_hub",
                                "enum": [
                                  "video_list_hub",
                                  "single_video_embedded"
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "zoom_events_vod_channels:read",
              "zoom_events_vod_channels:read:admin",
              "zoom_events:read:list_all_vod_channels",
              "zoom_events:read:list_all_vod_channels:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "May-2024",
          "x-permissions": [],
          "x-macro-scopes": [
            "zoom_events_vod_channels:read",
            "zoom_events_vod_channels:read:admin"
          ],
          "x-granular-scopes": [
            "zoom_events:read:list_all_vod_channels",
            "zoom_events:read:list_all_vod_channels:admin"
          ]
        }
      }
    }
  },
  "components": {}
}
