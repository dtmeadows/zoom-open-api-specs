{
  "openapi": "3.0.0",
  "info": {
    "title": "Zoom Calendar API",
    "description": "Zoom Calendar",
    "termsOfService": "https://zoom.us/docs/en-us/zoom_api_license_and_tou.html",
    "contact": {
      "name": "Zoom Developers",
      "url": "https://developer.zoom.us/"
    },
    "version": "2"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "https://swagger.io"
  },
  "servers": [{ "url": "https://api.zoom.us/v2" }],
  "paths": {
    "/calendars/{calId}/acl": {
      "get": {
        "tags": ["acl"],
        "summary": "List ACL rules of specified calendar",
        "description": "Returns the rules in the access control list for the calendar.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:list_acl`,`calendar:read:list_acl:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "Listacl",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs call, the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of entries returned on one result page.",
            "required": false,
            "schema": { "type": "integer", "example": 250 }
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "Whether to include deleted ACLs in the result.",
            "required": false,
            "schema": { "type": "boolean", "example": false }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "The token that specifies which result page to return.",
            "required": false,
            "schema": { "type": "string", "example": "user:abc@example.com!" }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns a response body with the following structure:",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of collection.",
                      "example": "calendar#acl"
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the collection.",
                      "example": "\"00000000000000000000\""
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "The token that accesses the next page of this result.",
                      "example": "user:abc@example.com!"
                    },
                    "items": {
                      "type": "array",
                      "description": "The list of rules for the access control list.",
                      "items": {
                        "required": ["role", "scope"],
                        "type": "object",
                        "properties": {
                          "kind": {
                            "type": "string",
                            "description": "The type of resource.",
                            "example": "calendar#aclRule",
                            "enum": ["calendar#aclRule"]
                          },
                          "etag": {
                            "type": "string",
                            "description": "The ETag of the resource.",
                            "example": "\"00000000000000000000\""
                          },
                          "id": {
                            "type": "string",
                            "description": "The identifier of the ACL rule.",
                            "example": "user:cba.fed@zoom.com"
                          },
                          "scope": {
                            "description": "The extent to which calendar access is granted by this ACL rule.",
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of scope.",
                                    "example": "default",
                                    "enum": ["default"]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of scope.",
                                    "example": "domain",
                                    "enum": ["domain"]
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The name of the domain",
                                    "format": "hostname",
                                    "example": "zoom.us"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of scope.",
                                    "example": "user",
                                    "enum": ["group", "user"]
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The email address of a user or group, depending on the scope type.",
                                    "format": "email",
                                    "example": "abc.def@zoom.us"
                                  }
                                }
                              }
                            ]
                          },
                          "role": {
                            "type": "string",
                            "description": "The role assigned to the scope.",
                            "example": "reader",
                            "enum": [
                              "none",
                              "freeBusyReader",
                              "reader",
                              "writer",
                              "owner"
                            ]
                          }
                        },
                        "description": "The ACL object."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:list_acl",
              "calendar:read:list_acl:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": [
            "calendar:read:list_acl",
            "calendar:read:list_acl:admin"
          ]
        }
      },
      "post": {
        "tags": ["acl"],
        "summary": "Create a new ACL rule",
        "description": "Creates an access control list rule.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:write:acl`,`calendar:write:acl:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Insertacl",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs call, the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["role", "scope"],
                "type": "object",
                "properties": {
                  "scope": {
                    "description": "The extent to which calendar access is granted by this ACL rule.",
                    "oneOf": [
                      {
                        "required": ["type"],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of the scope.",
                            "example": "default",
                            "enum": ["default"]
                          }
                        }
                      },
                      {
                        "required": ["type"],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of the scope.",
                            "example": "domain",
                            "enum": ["domain"]
                          },
                          "value": {
                            "type": "string",
                            "description": "he name of a domain.",
                            "format": "hostname",
                            "example": "zoom.us"
                          }
                        }
                      },
                      {
                        "required": ["type"],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of the scope.",
                            "example": "user",
                            "enum": ["group", "user"]
                          },
                          "value": {
                            "type": "string",
                            "description": "The email address of a user or group.",
                            "format": "email",
                            "example": "abc.def@zoom.us"
                          }
                        }
                      }
                    ]
                  },
                  "role": {
                    "type": "string",
                    "description": "The role assigned to the scope.",
                    "example": "reader",
                    "enum": [
                      "none",
                      "freeBusyReader",
                      "reader",
                      "writer",
                      "owner"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns an ACL resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["role", "scope"],
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of resource.",
                      "example": "calendar#aclRule",
                      "enum": ["calendar#aclRule"]
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the resource.",
                      "example": "\"00000000000000000000\""
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the ACL rule.",
                      "example": "user:cba.fed@zoom.com"
                    },
                    "scope": {
                      "description": "The extent to which calendar access is granted by this ACL rule.",
                      "oneOf": [
                        {
                          "required": ["type"],
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of the scope.",
                              "example": "default",
                              "enum": ["default"]
                            }
                          }
                        },
                        {
                          "required": ["type"],
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of scope.",
                              "example": "domain",
                              "enum": ["domain"]
                            },
                            "value": {
                              "type": "string",
                              "description": "The name of a domain.",
                              "format": "hostname",
                              "example": "zoom.us"
                            }
                          }
                        },
                        {
                          "required": ["type"],
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of scope.",
                              "example": "user",
                              "enum": ["group", "user"]
                            },
                            "value": {
                              "type": "string",
                              "description": "The email address of a user or group.",
                              "format": "email",
                              "example": "abc.def@zoom.us"
                            }
                          }
                        }
                      ]
                    },
                    "role": {
                      "type": "string",
                      "description": "The role assigned to the scope.",
                      "example": "reader",
                      "enum": [
                        "none",
                        "freeBusyReader",
                        "reader",
                        "writer",
                        "owner"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "429": {
            "description": "**HTTP Status Code:** `429` <br>\n Too Many Requests  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:write:acl",
              "calendar:write:acl:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:write:acl",
            "calendar:write:acl:admin"
          ]
        }
      }
    },
    "/calendars/{calId}/acl/{aclId}": {
      "get": {
        "tags": ["acl"],
        "summary": "Get the specified ACL rule",
        "description": "Returns an access control list (ACL) rule.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:acl`,`calendar:read:acl:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "Getacl",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "aclId",
            "in": "path",
            "description": "The ACL rule identifier.",
            "required": true,
            "schema": { "type": "string", "example": "user:cba.fed@zoom.com" }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns an ACL resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["role", "scope"],
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of resource.",
                      "example": "calendar#aclRule",
                      "enum": ["calendar#aclRule"]
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the resource.",
                      "example": "\"00000000000000000000\""
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the ACL rule.",
                      "example": "user:cba.fed@zoom.com"
                    },
                    "scope": {
                      "description": "The extent to which calendar access is granted by this ACL rule.",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of scope.",
                              "example": "default",
                              "enum": ["default"]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of scope.",
                              "example": "domain",
                              "enum": ["domain"]
                            },
                            "value": {
                              "type": "string",
                              "description": "The name of the domain.",
                              "format": "hostname",
                              "example": "zoom.us"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of scope.",
                              "example": "user",
                              "enum": ["group", "user"]
                            },
                            "value": {
                              "type": "string",
                              "description": "The email address of a user or group, depending on the scope type.",
                              "format": "email",
                              "example": "abc.def@zoom.us"
                            }
                          }
                        }
                      ]
                    },
                    "role": {
                      "type": "string",
                      "description": "The role assigned to the scope.",
                      "example": "reader",
                      "enum": [
                        "none",
                        "freeBusyReader",
                        "reader",
                        "writer",
                        "owner"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:acl",
              "calendar:read:acl:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": ["calendar:read:acl", "calendar:read:acl:admin"]
        }
      },
      "delete": {
        "tags": ["acl"],
        "summary": "Delete an existing ACL rule",
        "description": "Deletes an access control list (ACL) rule.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:delete:acl`,`calendar:delete:acl:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Deleteacl",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "aclId",
            "in": "path",
            "description": "The ACL rule identifier.",
            "required": true,
            "schema": { "type": "string", "example": "user:cba.fed@zoom.com" }
          }
        ],
        "responses": {
          "204": {
            "description": "If successful, the specified ACL rule is deleted and this method returns an empty response body."
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "429": {
            "description": "**HTTP Status Code:** `429` <br>\n Too Many Requests  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:delete:acl",
              "calendar:delete:acl:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:delete:acl",
            "calendar:delete:acl:admin"
          ]
        }
      },
      "patch": {
        "tags": ["acl"],
        "summary": "Update the specified ACL rule",
        "description": "Updates an access control list rule.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:update:acl`,`calendar:update:acl:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Patchacl",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "aclId",
            "in": "path",
            "description": "The ACL rule identifier.",
            "required": true,
            "schema": { "type": "string", "example": "user:cba.fed@zoom.com" }
          }
        ],
        "requestBody": {
          "description": "This field supplies the relevant portions of an ACL resource, according to the rules of patch semantics.",
          "content": {
            "application/json": {
              "schema": {
                "required": ["role", "scope"],
                "type": "object",
                "properties": {
                  "scope": {
                    "type": "object",
                    "description": "The extent to which calendar access is granted by this ACL rule.",
                    "oneOf": [
                      {
                        "required": ["type"],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of the scope.",
                            "example": "default",
                            "enum": ["default"]
                          }
                        }
                      },
                      {
                        "required": ["type"],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of scope.",
                            "example": "domain",
                            "enum": ["domain"]
                          },
                          "value": {
                            "type": "string",
                            "description": "The name of a domain.",
                            "format": "hostname",
                            "example": "zoom.us"
                          }
                        }
                      },
                      {
                        "required": ["type"],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of scope.",
                            "example": "user",
                            "enum": ["group", "user"]
                          },
                          "value": {
                            "type": "string",
                            "description": "The email address of a user or group.",
                            "format": "email",
                            "example": "abc.def@zoom.us"
                          }
                        }
                      }
                    ]
                  },
                  "role": {
                    "type": "string",
                    "description": "The role assigned to the scope.",
                    "example": "reader",
                    "enum": [
                      "none",
                      "freeBusyReader",
                      "reader",
                      "writer",
                      "owner"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns an ACL resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["role", "scope"],
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of resource.",
                      "example": "calendar#aclRule",
                      "enum": ["calendar#aclRule"]
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the resource.",
                      "example": "\"00000000000000000000\""
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the ACL rule.",
                      "example": "user:cba.fed@zoom.com"
                    },
                    "scope": {
                      "description": "The extent to which calendar access is granted by this ACL rule.",
                      "oneOf": [
                        {
                          "required": ["type"],
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of scope.",
                              "example": "default",
                              "enum": ["default"]
                            }
                          }
                        },
                        {
                          "required": ["type"],
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of scope.",
                              "example": "domain",
                              "enum": ["domain"]
                            },
                            "value": {
                              "type": "string",
                              "description": "The name of a domain.",
                              "format": "hostname",
                              "example": "zoom.us"
                            }
                          }
                        },
                        {
                          "required": ["type"],
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of scope.",
                              "example": "user",
                              "enum": ["group", "user"]
                            },
                            "value": {
                              "type": "string",
                              "description": "The email address of a user or group.",
                              "format": "email",
                              "example": "abc.def@zoom.us"
                            }
                          }
                        }
                      ]
                    },
                    "role": {
                      "type": "string",
                      "description": "The role assigned to the scope.",
                      "example": "reader",
                      "enum": [
                        "none",
                        "freeBusyReader",
                        "reader",
                        "writer",
                        "owner"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "429": {
            "description": "**HTTP Status Code:** `429` <br>\n Too Many Requests  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:update:acl",
              "calendar:update:acl:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:update:acl",
            "calendar:update:acl:admin"
          ]
        }
      }
    },
    "/calendars/users/{userIdentifier}/calendarList": {
      "get": {
        "tags": ["calendar list"],
        "summary": "List the calendars in the user's own calendarList",
        "description": "Returns the calendars in the user's calendar list.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:list_calendar_lists`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "ListcalendarList",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier. It identifies which user's calendarList to operate.",
            "required": true,
            "schema": { "type": "string", "example": "me" }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of entries returned on one result page.",
            "required": false,
            "schema": { "type": "integer", "example": 250 }
          },
          {
            "name": "minAccessRole",
            "in": "query",
            "description": "The minimum access role for the user in the returned entries.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "reader",
              "enum": ["freeBusyReader", "reader", "writer", "owner"]
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "The token that specifies which result page to return.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "c_fn3h8xf6ce6ehefnclpp869700@group.calendar.zoom.us!"
            }
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "Whether to include deleted calendar list entries in the result.",
            "required": false,
            "schema": { "type": "boolean", "example": false }
          },
          {
            "name": "showHidden",
            "in": "query",
            "description": "Whether to show hidden entries.",
            "required": false,
            "schema": { "type": "boolean", "example": false }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns a response body with the following structure:",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of the collection.",
                      "example": "calendar#calendarList"
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the collection.",
                      "example": "\"00000000000000000000\""
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "The token that accesses the next page of this result.",
                      "example": "c_fn3h8xf6ce6ehefnclpp869700@group.calendar.zoom.us!"
                    },
                    "items": {
                      "type": "array",
                      "description": "The calendars in the user's calendar list.",
                      "items": {
                        "required": ["id"],
                        "type": "object",
                        "properties": {
                          "kind": {
                            "type": "string",
                            "description": "The type of the resource.",
                            "example": "calendar#calendarListEntry"
                          },
                          "etag": {
                            "type": "string",
                            "description": "The ETag of the resource.",
                            "example": "\"00000000000000000000\""
                          },
                          "id": {
                            "type": "string",
                            "description": "The identifier of the calendar.",
                            "format": "email",
                            "example": "abc.def@zoom.com"
                          },
                          "summary": {
                            "maxLength": 256,
                            "type": "string",
                            "description": "The title of the calendar.",
                            "example": "My calendar"
                          },
                          "description": {
                            "maxLength": 8192,
                            "type": "string",
                            "description": "The description of the calendar.",
                            "example": "Calendar description"
                          },
                          "location": {
                            "type": "string",
                            "description": "The geographic location of the calendar as free-form text.",
                            "example": "San Jose"
                          },
                          "timeZone": {
                            "type": "string",
                            "description": "The time zone of the calendar.",
                            "example": "America/Los_Angeles"
                          },
                          "colorId": {
                            "type": "string",
                            "description": "The color of the calendar.",
                            "example": "6"
                          },
                          "backgroundColor": {
                            "type": "string",
                            "description": "The main color of the calendar in the hexadecimal format.",
                            "example": "#0088aa"
                          },
                          "foregroundColor": {
                            "type": "string",
                            "description": "The foreground color of the calendar in the hexadecimal format.",
                            "example": "#ffffff"
                          },
                          "hidden": {
                            "type": "boolean",
                            "description": "Whether the calendar has been hidden from the list.",
                            "example": false
                          },
                          "selected": {
                            "type": "boolean",
                            "description": "Whether the calendar content shows up in the calendar UI.",
                            "example": false
                          },
                          "accessRole": {
                            "type": "string",
                            "description": "The effective access role that the authenticated user has on the calendar.",
                            "readOnly": true,
                            "example": "freeBusyReader",
                            "enum": [
                              "freeBusyReader",
                              "reader",
                              "writer",
                              "owner"
                            ]
                          },
                          "defaultReminders": {
                            "maxItems": 5,
                            "type": "array",
                            "description": "The default reminders for non-all day events that the authenticated user has for this calendar.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "method": {
                                  "type": "string",
                                  "description": "The method this reminder uses.",
                                  "example": "email",
                                  "enum": ["email", "popup"]
                                },
                                "minutes": {
                                  "maximum": 40320,
                                  "minimum": 0,
                                  "type": "integer",
                                  "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                  "example": 5
                                }
                              }
                            }
                          },
                          "defaultAllDayReminders": {
                            "maxItems": 5,
                            "type": "array",
                            "description": "The default reminders for all day events that the authenticated user has for this calendar.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "method": {
                                  "type": "string",
                                  "description": "The method this reminder uses.",
                                  "example": "email",
                                  "enum": ["email", "popup"]
                                },
                                "minutes": {
                                  "maximum": 40320,
                                  "minimum": -1439,
                                  "type": "integer",
                                  "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                  "example": 5
                                }
                              }
                            }
                          },
                          "notificationSettings": {
                            "type": "object",
                            "properties": {
                              "notifications": {
                                "type": "array",
                                "description": "The list of notifications set for this calendar.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "The type of notification.",
                                      "example": "eventCreation",
                                      "enum": [
                                        "eventCreation",
                                        "eventChange",
                                        "eventCancellation",
                                        "eventResponse",
                                        "agenda"
                                      ]
                                    },
                                    "method": {
                                      "type": "string",
                                      "description": "The method that delivers the notification.",
                                      "example": "email",
                                      "enum": ["email"]
                                    }
                                  }
                                }
                              }
                            },
                            "description": "The notifications that the authenticated user is receiving for this calendar."
                          },
                          "primary": {
                            "type": "boolean",
                            "description": "Whether the calendar is the primary calendar of the authenticated user.",
                            "example": false
                          },
                          "deleted": {
                            "type": "boolean",
                            "description": "Whether this calendar list entry has been deleted from the calendar list.",
                            "example": false
                          },
                          "summaryOverride": {
                            "type": "string",
                            "description": "The summary that the authenticated user has set for this calendar.",
                            "example": "new summary"
                          }
                        },
                        "description": "The calendarList entry."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:list_calendar_lists"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": ["calendar:read:list_calendar_lists"]
        }
      },
      "post": {
        "tags": ["calendar list"],
        "summary": "Insert an existing calendar to the user's own calendarList",
        "description": "Inserts an existing calendar into the user's calendar list. The user can be `me` or a given calendar ID. \n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:write:calendar_list`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "InsertcalendarList",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier. It indicates which user's calendarList to operate.",
            "required": true,
            "schema": { "type": "string", "example": "me" }
          },
          {
            "name": "colorRgbFormat",
            "in": "query",
            "description": "This parameter must be set to true when the user wants to change the foreground or background color. ",
            "required": false,
            "schema": { "type": "boolean", "example": true }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["id"],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The identifier of the calendar.",
                    "format": "email",
                    "example": "abc.def@zoom.com"
                  },
                  "summary": {
                    "maxLength": 256,
                    "type": "string",
                    "description": "The title of the calendar.",
                    "example": "My calendar"
                  },
                  "description": {
                    "maxLength": 8192,
                    "type": "string",
                    "description": "The description of the calendar.",
                    "example": "Calendar description"
                  },
                  "location": {
                    "type": "string",
                    "description": "The geographic location of the calendar as free-form text.",
                    "example": "San Jose"
                  },
                  "timeZone": {
                    "type": "string",
                    "description": "The time zone of the calendar.",
                    "example": "America/Los_Angeles"
                  },
                  "colorId": {
                    "type": "string",
                    "description": "The color of the calendar.",
                    "example": "6"
                  },
                  "backgroundColor": {
                    "type": "string",
                    "description": "The main color of the calendar in the hexadecimal format.",
                    "example": "#0088aa"
                  },
                  "foregroundColor": {
                    "type": "string",
                    "description": "The foreground color of the calendar in the hexadecimal format.",
                    "example": "#ffffff"
                  },
                  "hidden": {
                    "type": "boolean",
                    "description": "Whether the calendar has been hidden from the list.",
                    "example": false
                  },
                  "selected": {
                    "type": "boolean",
                    "description": "Whether the calendar content shows up in the calendar UI.",
                    "example": false
                  },
                  "accessRole": {
                    "type": "string",
                    "description": "The effective access role that the authenticated user has on the calendar.",
                    "readOnly": true,
                    "example": "freeBusyReader",
                    "enum": ["freeBusyReader", "reader", "writer", "owner"]
                  },
                  "defaultReminders": {
                    "maxItems": 5,
                    "type": "array",
                    "description": "The default reminders for non-all day events that the authenticated user has for this calendar.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "The method this reminder uses.",
                          "example": "email",
                          "enum": ["email", "popup"]
                        },
                        "minutes": {
                          "maximum": 40320,
                          "minimum": 0,
                          "type": "integer",
                          "description": "The number of minutes before the start of the event when the reminder should trigger.",
                          "example": 5
                        }
                      }
                    }
                  },
                  "defaultAllDayReminders": {
                    "maxItems": 5,
                    "type": "array",
                    "description": "The default reminders for all day events that the authenticated user has for this calendar.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "The method this reminder uses.",
                          "example": "email",
                          "enum": ["email", "popup"]
                        },
                        "minutes": {
                          "maximum": 40320,
                          "minimum": -1439,
                          "type": "integer",
                          "description": "The number of minutes before the start of the event when the reminder should trigger.",
                          "example": 5
                        }
                      }
                    }
                  },
                  "notificationSettings": {
                    "type": "object",
                    "properties": {
                      "notifications": {
                        "type": "array",
                        "description": "The list of notifications set for this calendar.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of notification.",
                              "example": "eventCreation",
                              "enum": [
                                "eventCreation",
                                "eventChange",
                                "eventCancellation",
                                "eventResponse",
                                "agenda"
                              ]
                            },
                            "method": {
                              "type": "string",
                              "description": "The method that delivers the notification.",
                              "example": "email",
                              "enum": ["email"]
                            }
                          }
                        }
                      }
                    },
                    "description": "The notifications that the authenticated user is receiving for this calendar."
                  },
                  "primary": {
                    "type": "boolean",
                    "description": "Whether the calendar is the primary calendar of the authenticated user.",
                    "example": false
                  },
                  "deleted": {
                    "type": "boolean",
                    "description": "Whether this calendar list entry has been deleted from the calendar list.",
                    "example": false
                  },
                  "summaryOverride": {
                    "type": "string",
                    "description": "The summary that the authenticated user has set for this calendar.",
                    "example": "new summary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns a CalendarList resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["id"],
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#calendarListEntry"
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the resource.",
                      "example": "\"00000000000000000000\""
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the calendar.",
                      "format": "email",
                      "example": "abc.def@zoom.com"
                    },
                    "summary": {
                      "maxLength": 256,
                      "type": "string",
                      "description": "The title of the calendar.",
                      "example": "My calendar"
                    },
                    "description": {
                      "maxLength": 8192,
                      "type": "string",
                      "description": "The description of the calendar.",
                      "example": "Calendar description"
                    },
                    "location": {
                      "type": "string",
                      "description": "The geographic location of the calendar as free-form text.",
                      "example": "San Jose"
                    },
                    "timeZone": {
                      "type": "string",
                      "description": "The time zone of the calendar.",
                      "example": "America/Los_Angeles"
                    },
                    "colorId": {
                      "type": "string",
                      "description": "The color of the calendar.",
                      "example": "6"
                    },
                    "backgroundColor": {
                      "type": "string",
                      "description": "The main color of the calendar in the hexadecimal format.",
                      "example": "#0088aa"
                    },
                    "foregroundColor": {
                      "type": "string",
                      "description": "The foreground color of the calendar in the hexadecimal format",
                      "example": "#ffffff"
                    },
                    "hidden": {
                      "type": "boolean",
                      "description": "Whether the calendar has been hidden from the list.",
                      "example": false
                    },
                    "selected": {
                      "type": "boolean",
                      "description": "Whether the calendar content shows up in the calendar UI.",
                      "example": false
                    },
                    "accessRole": {
                      "type": "string",
                      "description": "The effective access role that the authenticated user has on the calendar.",
                      "readOnly": true,
                      "example": "freeBusyReader",
                      "enum": ["freeBusyReader", "reader", "writer", "owner"]
                    },
                    "defaultReminders": {
                      "maxItems": 5,
                      "type": "array",
                      "description": "The default reminders for non-all day events that the authenticated user has for this calendar.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "The method that this reminder uses.",
                            "example": "email",
                            "enum": ["email", "popup"]
                          },
                          "minutes": {
                            "maximum": 40320,
                            "minimum": 0,
                            "type": "integer",
                            "description": "The number of minutes before the start of the event when the reminder should trigger.",
                            "example": 5
                          }
                        }
                      }
                    },
                    "defaultAllDayReminders": {
                      "maxItems": 5,
                      "type": "array",
                      "description": "The default reminders for all day events that the authenticated user has for this calendar.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "The method that this reminder uses.",
                            "example": "email",
                            "enum": ["email", "popup"]
                          },
                          "minutes": {
                            "maximum": 40320,
                            "minimum": -1439,
                            "type": "integer",
                            "description": "The number of minutes before the start of the event when the reminder should trigger.",
                            "example": 5
                          }
                        }
                      }
                    },
                    "notificationSettings": {
                      "type": "object",
                      "properties": {
                        "notifications": {
                          "type": "array",
                          "description": "The list of notifications set for this calendar.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of notification.",
                                "example": "eventCreation",
                                "enum": [
                                  "eventCreation",
                                  "eventChange",
                                  "eventCancellation",
                                  "eventResponse",
                                  "agenda"
                                ]
                              },
                              "method": {
                                "type": "string",
                                "description": "The method that delivers the notification.",
                                "example": "email",
                                "enum": ["email"]
                              }
                            }
                          }
                        }
                      },
                      "description": "The notifications that the authenticated user is receiving for this calendar."
                    },
                    "primary": {
                      "type": "boolean",
                      "description": "Whether the calendar is the primary calendar of the authenticated user.",
                      "example": false
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "Whether this calendar list entry has been deleted from the calendar list.",
                      "example": false
                    },
                    "summaryOverride": {
                      "type": "string",
                      "description": "The summary that the authenticated user has set for this calendar.",
                      "example": "new summary"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:write:calendar_list"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": ["calendar:write:calendar_list"]
        }
      }
    },
    "/calendars/users/{userIdentifier}/calendarList/{calendarId}": {
      "get": {
        "tags": ["calendar list"],
        "summary": "Get a specified calendar from the user's own calendarList",
        "description": "Returns a calendar from the user's calendar list. The user can be `me` or a given calendar ID. \n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:calendar_list`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "GetcalendarList",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier. It indicates Which user's calendarList to operate.",
            "required": true,
            "schema": { "type": "string", "example": "me" }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "The calendar identifier. It specifies which calendarList entry in the user's calendarList to operate on. To retrieve calendar IDs, call the `List all calendars in a calendarlist` API.",
            "required": true,
            "schema": { "type": "string", "example": "abc@zoom.com" }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns a CalendarList resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["id"],
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#calendarListEntry"
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the resource.",
                      "example": "\"00000000000000000000\""
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the calendar.",
                      "format": "email",
                      "example": "abc.def@zoom.com"
                    },
                    "summary": {
                      "maxLength": 256,
                      "type": "string",
                      "description": "The title of the calendar.",
                      "example": "My calendar"
                    },
                    "description": {
                      "maxLength": 8192,
                      "type": "string",
                      "description": "The description of the calendar.",
                      "example": "Calendar description"
                    },
                    "location": {
                      "type": "string",
                      "description": "The geographic location of the calendar as free-form text.",
                      "example": "San Jose"
                    },
                    "timeZone": {
                      "type": "string",
                      "description": "The time zone of the calendar.",
                      "example": "America/Los_Angeles"
                    },
                    "colorId": {
                      "type": "string",
                      "description": "The color of the calendar.",
                      "example": "6"
                    },
                    "backgroundColor": {
                      "type": "string",
                      "description": "The main color of the calendar in the hexadecimal format.",
                      "example": "#0088aa"
                    },
                    "foregroundColor": {
                      "type": "string",
                      "description": "The foreground color of the calendar in the hexadecimal format.",
                      "example": "#ffffff"
                    },
                    "hidden": {
                      "type": "boolean",
                      "description": "Whether the calendar has been hidden from the list.",
                      "example": false
                    },
                    "selected": {
                      "type": "boolean",
                      "description": "Whether the calendar content shows up in the calendar UI.",
                      "example": false
                    },
                    "accessRole": {
                      "type": "string",
                      "description": "The effective access role that the authenticated user has on the calendar.",
                      "readOnly": true,
                      "example": "freeBusyReader",
                      "enum": ["freeBusyReader", "reader", "writer", "owner"]
                    },
                    "defaultReminders": {
                      "maxItems": 5,
                      "type": "array",
                      "description": "The default reminders for non-all day events that the authenticated user has for this calendar.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "The method this reminder uses.",
                            "example": "email",
                            "enum": ["email", "popup"]
                          },
                          "minutes": {
                            "maximum": 40320,
                            "minimum": 0,
                            "type": "integer",
                            "description": "The number of minutes before the start of the event when the reminder should trigger.",
                            "example": 5
                          }
                        }
                      }
                    },
                    "defaultAllDayReminders": {
                      "maxItems": 5,
                      "type": "array",
                      "description": "The default reminders for all day events that the authenticated user has for this calendar.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "The method this reminder uses.",
                            "example": "email",
                            "enum": ["email", "popup"]
                          },
                          "minutes": {
                            "maximum": 40320,
                            "minimum": -1439,
                            "type": "integer",
                            "description": "The number of minutes before the start of the event when the reminder should trigger.",
                            "example": 5
                          }
                        }
                      }
                    },
                    "notificationSettings": {
                      "type": "object",
                      "properties": {
                        "notifications": {
                          "type": "array",
                          "description": "The list of notifications set for this calendar.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of notification.",
                                "example": "eventCreation",
                                "enum": [
                                  "eventCreation",
                                  "eventChange",
                                  "eventCancellation",
                                  "eventResponse",
                                  "agenda"
                                ]
                              },
                              "method": {
                                "type": "string",
                                "description": "The method that delivers the notification.",
                                "example": "email",
                                "enum": ["email"]
                              }
                            }
                          }
                        }
                      },
                      "description": "The notifications that the authenticated user is receiving for this calendar."
                    },
                    "primary": {
                      "type": "boolean",
                      "description": "Whether the calendar is the primary calendar of the authenticated user.",
                      "example": false
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "Whether this calendar list entry has been deleted from the calendar list.",
                      "example": false
                    },
                    "summaryOverride": {
                      "type": "string",
                      "description": "The summary that the authenticated user has set for this calendar.",
                      "example": "new summary"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:calendar_list"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": ["calendar:read:calendar_list"]
        }
      },
      "delete": {
        "tags": ["calendar list"],
        "summary": "Delete an existing calendar from the user's own calendarList",
        "description": "Removes a calendar from the user's calendar list. The user can be `me` or a given calendar ID. \n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:delete:calendar_list`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "DeletecalendarList",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier.  It indicates which user's calendarList to operate.",
            "required": true,
            "schema": { "type": "string", "example": "me" }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "The calendar identifier. It specifies which calendarList entry in the user's calendarList to operate. To retrieve calendar IDs, call the `List all calendars in a calendarlist` API.",
            "required": true,
            "schema": { "type": "string", "example": "abc@zoom.com" }
          }
        ],
        "responses": {
          "204": {
            "description": "If successful, the specified calendar is removed from the user's own calendarList. This method returns an empty response body."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:delete:calendar_list"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": ["calendar:delete:calendar_list"]
        }
      },
      "patch": {
        "tags": ["calendar list"],
        "summary": "Update an existing calendar in the user's own calendarList",
        "description": "Updates an existing calendar on the user's calendar list.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:update:calendar_list`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "PatchcalendarList",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier. It indicates which user's calendarList to operate.",
            "required": true,
            "schema": { "type": "string", "example": "me" }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "The calendar identifier. It specifies which calendarList entry in the user's calendarList to operate. To retrieve the calendar ids, call the 'List all calendars in a calendarlist' API.",
            "required": true,
            "schema": { "type": "string", "example": "abc@zoom.com" }
          },
          {
            "name": "colorRgbFormat",
            "in": "query",
            "description": "This parameter must be set to true when user wants to change the foreground or background color. ",
            "required": false,
            "schema": { "type": "boolean", "example": true }
          }
        ],
        "requestBody": {
          "description": "This field supplies the relevant portions of a CalendarList resource, according to the rules of patch semantics.",
          "content": {
            "application/json": {
              "schema": {
                "required": ["id"],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The identifier of the calendar.",
                    "format": "email",
                    "example": "abc.def@zoom.com"
                  },
                  "summary": {
                    "maxLength": 256,
                    "type": "string",
                    "description": "The title of the calendar.",
                    "example": "My calendar"
                  },
                  "description": {
                    "maxLength": 8192,
                    "type": "string",
                    "description": "The description of the calendar.",
                    "example": "Calendar description"
                  },
                  "location": {
                    "type": "string",
                    "description": "The geographic location of the calendar as free-form text.",
                    "example": "San Jose"
                  },
                  "timeZone": {
                    "type": "string",
                    "description": "The time zone of the calendar.",
                    "example": "America/Los_Angeles"
                  },
                  "colorId": {
                    "type": "string",
                    "description": "The color of the calendar.",
                    "example": "6"
                  },
                  "backgroundColor": {
                    "type": "string",
                    "description": "The main color of the calendar in the hexadecimal format.",
                    "example": "#0088aa"
                  },
                  "foregroundColor": {
                    "type": "string",
                    "description": "The foreground color of the calendar in the hexadecimal format.",
                    "example": "#ffffff"
                  },
                  "hidden": {
                    "type": "boolean",
                    "description": "Whether the calendar has been hidden from the list.",
                    "example": false
                  },
                  "selected": {
                    "type": "boolean",
                    "description": "Whether the calendar content shows up in the calendar UI.",
                    "example": false
                  },
                  "accessRole": {
                    "type": "string",
                    "description": "The effective access role that the authenticated user has on the calendar.",
                    "readOnly": true,
                    "example": "freeBusyReader",
                    "enum": ["freeBusyReader", "reader", "writer", "owner"]
                  },
                  "defaultReminders": {
                    "maxItems": 5,
                    "type": "array",
                    "description": "The default reminders for non-all day events that the authenticated user has for this calendar.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "The method that this reminder uses.",
                          "example": "email",
                          "enum": ["email", "popup"]
                        },
                        "minutes": {
                          "maximum": 40320,
                          "minimum": 0,
                          "type": "integer",
                          "description": "The number of minutes before the start of the event when the reminder should trigger.",
                          "example": 5
                        }
                      }
                    }
                  },
                  "defaultAllDayReminders": {
                    "maxItems": 5,
                    "type": "array",
                    "description": "The default reminders for all day events that the authenticated user has for this calendar.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "The method this reminder uses.",
                          "example": "email",
                          "enum": ["email", "popup"]
                        },
                        "minutes": {
                          "maximum": 40320,
                          "minimum": -1439,
                          "type": "integer",
                          "description": "The number of minutes before the start of the event when the reminder should trigger.",
                          "example": 5
                        }
                      }
                    }
                  },
                  "notificationSettings": {
                    "type": "object",
                    "properties": {
                      "notifications": {
                        "type": "array",
                        "description": "The list of notifications set for this calendar.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of notification.",
                              "example": "eventCreation",
                              "enum": [
                                "eventCreation",
                                "eventChange",
                                "eventCancellation",
                                "eventResponse",
                                "agenda"
                              ]
                            },
                            "method": {
                              "type": "string",
                              "description": "The method to deliver the notification.",
                              "example": "email",
                              "enum": ["email"]
                            }
                          }
                        }
                      }
                    },
                    "description": "The notifications that the authenticated user is receiving for this calendar."
                  },
                  "primary": {
                    "type": "boolean",
                    "description": "Whether the calendar is the primary calendar of the authenticated user.",
                    "example": false
                  },
                  "deleted": {
                    "type": "boolean",
                    "description": "Whether this calendar list entry has been deleted from the calendar list.",
                    "example": false
                  },
                  "summaryOverride": {
                    "type": "string",
                    "description": "The summary that the authenticated user has set for this calendar.",
                    "example": "new summary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns a CalendarList resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["id"],
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#calendarListEntry"
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the resource.",
                      "example": "\"00000000000000000000\""
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the calendar.",
                      "format": "email",
                      "example": "abc.def@zoom.com"
                    },
                    "summary": {
                      "maxLength": 256,
                      "type": "string",
                      "description": "The title of the calendar.",
                      "example": "My calendar"
                    },
                    "description": {
                      "maxLength": 8192,
                      "type": "string",
                      "description": "The description of the calendar.",
                      "example": "Calendar description"
                    },
                    "location": {
                      "type": "string",
                      "description": "The geographic location of the calendar as free-form text.",
                      "example": "San Jose"
                    },
                    "timeZone": {
                      "type": "string",
                      "description": "The time zone of the calendar.",
                      "example": "America/Los_Angeles"
                    },
                    "colorId": {
                      "type": "string",
                      "description": "The color of the calendar.",
                      "example": "6"
                    },
                    "backgroundColor": {
                      "type": "string",
                      "description": "The main color of the calendar in the hexadecimal format.",
                      "example": "#0088aa"
                    },
                    "foregroundColor": {
                      "type": "string",
                      "description": "The foreground color of the calendar in the hexadecimal format.",
                      "example": "#ffffff"
                    },
                    "hidden": {
                      "type": "boolean",
                      "description": "Whether the calendar has been hidden from the list.",
                      "example": false
                    },
                    "selected": {
                      "type": "boolean",
                      "description": "Whether the calendar content shows up in the calendar UI.",
                      "example": false
                    },
                    "accessRole": {
                      "type": "string",
                      "description": "The effective access role that the authenticated user has on the calendar.",
                      "readOnly": true,
                      "example": "freeBusyReader",
                      "enum": ["freeBusyReader", "reader", "writer", "owner"]
                    },
                    "defaultReminders": {
                      "maxItems": 5,
                      "type": "array",
                      "description": "The default reminders for non-all day events that the authenticated user has for this calendar.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "The method this reminder uses.",
                            "example": "email",
                            "enum": ["email", "popup"]
                          },
                          "minutes": {
                            "maximum": 40320,
                            "minimum": 0,
                            "type": "integer",
                            "description": "The number of minutes before the start of the event when the reminder should trigger.",
                            "example": 5
                          }
                        }
                      }
                    },
                    "defaultAllDayReminders": {
                      "maxItems": 5,
                      "type": "array",
                      "description": "The default reminders for all day events that the authenticated user has for this calendar.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "The method this reminder uses.",
                            "example": "email",
                            "enum": ["email", "popup"]
                          },
                          "minutes": {
                            "maximum": 40320,
                            "minimum": -1439,
                            "type": "integer",
                            "description": "The number of minutes before the start of the event when the reminder should trigger.",
                            "example": 5
                          }
                        }
                      }
                    },
                    "notificationSettings": {
                      "type": "object",
                      "properties": {
                        "notifications": {
                          "type": "array",
                          "description": "The list of notifications set for this calendar.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of notification.",
                                "example": "eventCreation",
                                "enum": [
                                  "eventCreation",
                                  "eventChange",
                                  "eventCancellation",
                                  "eventResponse",
                                  "agenda"
                                ]
                              },
                              "method": {
                                "type": "string",
                                "description": "The method that delivers the notification.",
                                "example": "email",
                                "enum": ["email"]
                              }
                            }
                          }
                        }
                      },
                      "description": "The notifications that the authenticated user is receiving for this calendar."
                    },
                    "primary": {
                      "type": "boolean",
                      "description": "Whether the calendar is the primary calendar of the authenticated user.",
                      "example": false
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "Whether this calendar list entry has been deleted from the calendar list.",
                      "example": false
                    },
                    "summaryOverride": {
                      "type": "string",
                      "description": "The summary that the authenticated user has set for this calendar.",
                      "example": "new summary"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:update:calendar_list"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": ["calendar:update:calendar_list"]
        }
      }
    },
    "/calendars": {
      "post": {
        "tags": ["calendars"],
        "summary": "Create a new secondary calendar",
        "description": "Creates a secondary calendar.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:write:calendar`,`calendar:write:calendar:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Insertcalendar",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["summary"],
                "type": "object",
                "properties": {
                  "summary": {
                    "maxLength": 256,
                    "type": "string",
                    "description": "The title of the calendar.",
                    "example": "my calendar"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns a calendars resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of resource.",
                      "example": "calendar#calendar",
                      "enum": ["calendar#calendar"]
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the resource.",
                      "example": "\"00000000000000000000\""
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the calendar.",
                      "format": "email",
                      "example": "abc.def@zoom.com"
                    },
                    "summary": {
                      "maxLength": 256,
                      "type": "string",
                      "description": "The title of the calendar.",
                      "example": "My calendar"
                    },
                    "timeZone": {
                      "type": "string",
                      "description": "The time zone of the calendar.",
                      "example": "America/Los_Angeles"
                    },
                    "description": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The description of the calendar.",
                      "example": "calendar description"
                    },
                    "location": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The geographic location of the calendar as free-form text.",
                      "example": "San Jose"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "429": {
            "description": "**HTTP Status Code:** `429` <br>\n Too Many Requests  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:write:calendar",
              "calendar:write:calendar:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:write:calendar",
            "calendar:write:calendar:admin"
          ]
        }
      }
    },
    "/calendars/{calId}": {
      "get": {
        "tags": ["calendars"],
        "summary": "Get the specified calendar",
        "description": "Returns metadata for a calendar.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:calendar`,`calendar:read:calendar:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "Getcalendar",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns a calendar's resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["etag", "id", "kind", "summary", "timeZone"],
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#calendar",
                      "enum": ["calendar#calendar"]
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the resource.",
                      "example": "\"00000000000000000000\""
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the calendar.",
                      "format": "email",
                      "example": "abc.def@zoom.com"
                    },
                    "summary": {
                      "maxLength": 256,
                      "type": "string",
                      "description": "The title of the calendar.",
                      "example": "My calendar"
                    },
                    "timeZone": {
                      "type": "string",
                      "description": "The time zone of the calendar.",
                      "example": "America/Los_Angeles"
                    },
                    "description": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The description of the calendar.",
                      "example": "calendar description"
                    },
                    "location": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The geographic location of the calendar as free-form text.",
                      "example": "San Jose"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:calendar",
              "calendar:read:calendar:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": [
            "calendar:read:calendar",
            "calendar:read:calendar:admin"
          ]
        }
      },
      "delete": {
        "tags": ["calendars"],
        "summary": "Delete a calendar owned by a user",
        "description": "Deletes a calendar\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:delete:calendar`,`calendar:delete:calendar:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "Deletecalendar",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar ID of the calendar to be removed.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          }
        ],
        "responses": {
          "204": {
            "description": "If successful, the specified calendar is deleted and this method returns an empty response body."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:delete:calendar",
              "calendar:delete:calendar:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:delete:calendar",
            "calendar:delete:calendar:admin"
          ]
        }
      },
      "patch": {
        "tags": ["calendars"],
        "summary": "Update the specified calendar",
        "description": "Updates metadata for a calendar.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:update:calendar`,`calendar:update:calendar:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Patchcalendar",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          }
        ],
        "requestBody": {
          "description": "This field supplies the relevant portions of a calendar's resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "summary": {
                    "maxLength": 256,
                    "type": "string",
                    "description": "The title of the calendar.",
                    "example": "My calendar"
                  },
                  "timeZone": {
                    "type": "string",
                    "description": "The time zone of the calendar.",
                    "example": "America/Los_Angeles"
                  },
                  "description": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "The description of the calendar.",
                    "example": "calendar description"
                  },
                  "location": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "The geographic location of the calendar as free-form text.",
                    "example": "San Jose"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns a Calendars resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#calendar",
                      "enum": ["calendar#calendar"]
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the resource.",
                      "example": "\"00000000000000000000\""
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the calendar.",
                      "format": "email",
                      "example": "abc.def@zoom.com"
                    },
                    "summary": {
                      "maxLength": 256,
                      "type": "string",
                      "description": "The title of the calendar.",
                      "example": "My calendar"
                    },
                    "timeZone": {
                      "type": "string",
                      "description": "The time zone of the calendar.",
                      "example": "America/Los_Angeles"
                    },
                    "description": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The description of the calendar.",
                      "example": "calendar description"
                    },
                    "location": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The geographic location of the calendar as free-form text.",
                      "example": "San Jose"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "429": {
            "description": "**HTTP Status Code:** `429` <br>\n Too Many Requests  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:update:calendar",
              "calendar:update:calendar:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:update:calendar",
            "calendar:update:calendar:admin"
          ]
        }
      }
    },
    "/calendars/colors": {
      "get": {
        "tags": ["colors"],
        "summary": "Get the color definitions for calendars and events",
        "description": "Returns the color definitions for calendars and events.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:color`,`calendar:read:color:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "Getcolor",
        "responses": {
          "200": {
            "description": "If successful, this method returns a color's resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "ThetType of the resource.",
                      "example": "\"calendar#colors\"",
                      "enum": ["calendar#colors"]
                    },
                    "updated": {
                      "type": "string",
                      "description": "The last modification time of the color palette.",
                      "format": "date-time",
                      "readOnly": true,
                      "example": "2012-02-14T00:00:00Z"
                    },
                    "calendar": {
                      "type": "array",
                      "description": "A global palette of calendar colors, mapping from the color ID to its definition.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "color_id": {
                            "type": "string",
                            "description": "The ID of the color.",
                            "example": "\"1\""
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "foreground": {
                                "type": "string",
                                "description": "The foreground color value.",
                                "example": "\"#FD3D4A\""
                              },
                              "background": {
                                "type": "string",
                                "description": "The background color value.",
                                "example": "\"#F7F9FA\""
                              }
                            }
                          }
                        }
                      }
                    },
                    "event": {
                      "type": "array",
                      "description": "A global palette of event colors, mapping from the color ID to its definition.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "color_id": {
                            "type": "string",
                            "description": "The ID of the color.",
                            "example": "\"1\""
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "foreground": {
                                "type": "string",
                                "description": "The foreground color value.",
                                "example": "\"#FD3D4A\""
                              },
                              "background": {
                                "type": "string",
                                "description": "The background color value.",
                                "example": "\"#F7F9FA\""
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:color",
              "calendar:read:color:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": [
            "calendar:read:color",
            "calendar:read:color:admin"
          ]
        }
      }
    },
    "/calendars/{calId}/events": {
      "get": {
        "tags": ["events"],
        "summary": "List events on the specified calendar",
        "description": "Returns events on the specified calendar.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:list_events`,`calendar:read:list_events:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "Listevent",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of events returned on one result page.",
            "required": false,
            "schema": { "type": "integer", "example": 250 }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The order of the events returned in the result.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "updated",
              "enum": ["startTime", "updated"]
            }
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if `showDeleted` and `singleEvents` are both False. If `showDeleted` and `singleEvents` are both True and only single instances of deleted events (but not the underlying recurring events) are returned. The default is False. Optional.",
            "required": false,
            "schema": { "type": "boolean", "example": false }
          },
          {
            "name": "singleEvents",
            "in": "query",
            "description": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.  The default is False. Optional.",
            "required": false,
            "schema": { "type": "boolean", "example": false }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "The token that specifies which result page to return. Optional.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ffffffffa8b32bff_te7ldipj31fqfo3mw3jjzgz6c0!"
            }
          },
          {
            "name": "timeMax",
            "in": "query",
            "description": "The upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. It must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If `timeMin` is set, `timeMax` must be greater than `timeMin`.",
            "required": false,
            "schema": { "type": "string", "example": "2024-02-01T00:00:00Z" }
          },
          {
            "name": "timeMin",
            "in": "query",
            "description": "The lower bound (exclusive) for an event's end time from which to filter. Optional. The default is not to filter by end time. It must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds can be provided but are ignored. If `timeMax` is set, `timeMin` must be smaller than `timeMax`.",
            "required": false,
            "schema": { "type": "string", "example": "2024-01-01T00:00:00Z" }
          },
          {
            "name": "timeZone",
            "in": "query",
            "description": "The time zone in the response. The default is the time zone of the calendar. Optional. ",
            "required": false,
            "schema": { "type": "string", "example": "America/Los_Angeles" }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns a response body with the following structure:",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of the collection (\"calendar#events\").",
                      "example": "calendar#events"
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the collection.",
                      "example": "\"00000000000000000000\""
                    },
                    "summary": {
                      "type": "string",
                      "description": "The title of the calendar. Read-only.",
                      "example": "calendar summary"
                    },
                    "description": {
                      "type": "object",
                      "description": "The description of the calendar. Read-only.",
                      "example": "calendar description"
                    },
                    "updated": {
                      "type": "string",
                      "description": "The last modification time of the calendar (as a RFC3339 timestamp). Read-only.",
                      "format": "date-time",
                      "example": "2020-01-01T00:00:00Z"
                    },
                    "timeZone": {
                      "type": "string",
                      "description": "The time zone of the calendar. Read-only.",
                      "example": "America/Los_Angeles"
                    },
                    "accessRole": {
                      "type": "string",
                      "description": "The user's access role for this calendar. Read-only.",
                      "example": "owner",
                      "enum": [
                        "none",
                        "freeBusyReader",
                        "reader",
                        "writer",
                        "owner"
                      ]
                    },
                    "defaultReminders": {
                      "type": "array",
                      "description": "The default reminders on the calendar for the authenticated user.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "The method this reminder uses.",
                            "example": "email",
                            "enum": ["email", "popup"]
                          },
                          "minutes": {
                            "type": "integer",
                            "description": "The number of minutes before the start of the event when the reminder should trigger.",
                            "example": 5
                          }
                        }
                      }
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "The token to access the next page of this result.",
                      "example": "ffffffffa8b32bff_te7ldipj31fqfo3mw3jjzgz6c0!"
                    },
                    "items": {
                      "type": "array",
                      "description": "The list of events on the calendar.",
                      "items": {
                        "required": ["end", "start"],
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "object",
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                                "format": "date",
                                "example": "2020-01-01"
                              },
                              "dateTime": {
                                "type": "string",
                                "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                                "format": "date-time",
                                "example": "2020-01-01T00:00:00Z"
                              },
                              "timeZone": {
                                "type": "string",
                                "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                                "example": "America/Los_Angeles"
                              }
                            },
                            "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance."
                          },
                          "end": {
                            "type": "object",
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                                "format": "date",
                                "example": "2020-01-01"
                              },
                              "dateTime": {
                                "type": "string",
                                "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                                "format": "date-time",
                                "example": "2020-01-01T00:00:00Z"
                              },
                              "timeZone": {
                                "type": "string",
                                "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                                "example": "America/Los_Angeles"
                              }
                            },
                            "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                          },
                          "attendees": {
                            "type": "array",
                            "description": "The attendees of the event.",
                            "items": {
                              "required": ["email"],
                              "type": "object",
                              "properties": {
                                "additionalGuests": {
                                  "type": "integer",
                                  "description": "The number of additional guests. The default is 0. Optional."
                                },
                                "displayName": {
                                  "type": "string",
                                  "description": "The attendee's name, if available. ",
                                  "example": "Mark Joe"
                                },
                                "email": {
                                  "type": "string",
                                  "description": "The attendee's email address.",
                                  "format": "email",
                                  "example": "mark.joe@zoom.com"
                                },
                                "optional": {
                                  "type": "boolean",
                                  "description": "Whether this is an optional attendee. The default is False. Optional. ",
                                  "example": false
                                },
                                "resource": {
                                  "type": "boolean",
                                  "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                                  "example": false
                                },
                                "responseStatus": {
                                  "type": "string",
                                  "description": "The attendee's response status.",
                                  "example": "needsAction",
                                  "enum": [
                                    "needsAction",
                                    "declined",
                                    "tentative",
                                    "accepted"
                                  ]
                                }
                              }
                            }
                          },
                          "colorId": {
                            "type": "string",
                            "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use `color.get`)",
                            "example": "5"
                          },
                          "description": {
                            "maxLength": 15000,
                            "type": "string",
                            "description": "The description of the event.",
                            "example": "event description"
                          },
                          "guestsCanInviteOthers": {
                            "type": "boolean",
                            "description": "Whether attendees other than the organizer can invite others to the event. The default is True. Optional. ",
                            "example": true
                          },
                          "guestsCanModify": {
                            "type": "boolean",
                            "description": "Whether attendees other than the organizer can modify the event. The default is False. Optional. ",
                            "example": false
                          },
                          "guestsCanSeeOtherGuests": {
                            "type": "boolean",
                            "description": "Whether attendees other than the organizer can see who the event's attendees are. The default is True. Optional. ",
                            "example": true
                          },
                          "location": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "The geographic location of the event as free-form text.",
                            "example": "San Jose"
                          },
                          "recurrence": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event",
                            "items": {
                              "minLength": 1,
                              "type": "string",
                              "description": "A recurring rule.",
                              "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                            }
                          },
                          "reminders": {
                            "type": "object",
                            "properties": {
                              "useDefault": {
                                "type": "boolean",
                                "description": "Whether the default reminders of the calendar apply to the event.",
                                "example": false
                              },
                              "overrides": {
                                "maxItems": 5,
                                "type": "array",
                                "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event. If not, it indicates that no reminders are set for this event.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "method": {
                                      "type": "string",
                                      "description": "The method this reminder uses.",
                                      "example": "email",
                                      "enum": ["email", "popup"]
                                    },
                                    "minutes": {
                                      "maximum": 40320,
                                      "type": "integer",
                                      "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                      "example": 5
                                    }
                                  },
                                  "description": "A reminder setting."
                                }
                              }
                            },
                            "description": "The information about the event's reminders for the authenticated user."
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the event.",
                            "example": "confirmed",
                            "enum": ["confirmed", "tentative", "cancelled"]
                          },
                          "summary": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "The title of the event.",
                            "example": "event title"
                          },
                          "transparency": {
                            "type": "string",
                            "description": "Whether the event blocks time on the calendar.",
                            "example": "transparent",
                            "enum": ["opaque", "transparent"]
                          },
                          "visibility": {
                            "type": "string",
                            "description": "The visibility of the event.",
                            "example": "default",
                            "enum": ["default", "public", "private"]
                          },
                          "id": {
                            "type": "string",
                            "description": "The identifier of the event.",
                            "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
                          },
                          "created": {
                            "type": "string",
                            "description": "The creation time of the event.",
                            "example": "2020-01-01T00:00:00Z"
                          },
                          "creator": {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "description": "The creator's email address.",
                                "example": "mark.joe@zoom.com"
                              }
                            },
                            "description": "The creator of the event."
                          },
                          "organizer": {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "description": "The organizer's email address.",
                                "example": "mark.joe@zoom.com"
                              }
                            },
                            "description": "The organizer of the event."
                          },
                          "kind": {
                            "type": "string",
                            "description": "The type of the resource.",
                            "example": "calendar#event"
                          },
                          "updated": {
                            "type": "string",
                            "description": "The last modification time of the event.",
                            "example": "2020-01-01T00:00:00Z"
                          }
                        },
                        "description": "The event object."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:list_events",
              "calendar:read:list_events:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": [
            "calendar:read:list_events",
            "calendar:read:list_events:admin"
          ]
        }
      },
      "post": {
        "tags": ["events"],
        "summary": "Insert a new event to the specified calendar",
        "description": "Creates an event.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:write:event`,`calendar:write:event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Insertevent",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "sendUpdates",
            "in": "query",
            "description": "Whether to send notifications about the creation of the new event. Note that some emails might still be sent.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "all",
              "enum": ["all", "externalOnly", "none"]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["end", "start"],
                "type": "object",
                "properties": {
                  "start": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                        "format": "date",
                        "example": "2020-01-01"
                      },
                      "dateTime": {
                        "type": "string",
                        "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                        "format": "date-time",
                        "example": "2020-01-01T00:00:00Z"
                      },
                      "timeZone": {
                        "type": "string",
                        "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                        "example": "America/Los_Angeles"
                      }
                    },
                    "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance."
                  },
                  "end": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                        "format": "date",
                        "example": "2020-01-01"
                      },
                      "dateTime": {
                        "type": "string",
                        "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                        "format": "date-time",
                        "example": "2020-01-01T00:00:00Z"
                      },
                      "timeZone": {
                        "type": "string",
                        "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                        "example": "America/Los_Angeles"
                      }
                    },
                    "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                  },
                  "attendees": {
                    "type": "array",
                    "description": "The attendees of the event.",
                    "items": {
                      "required": ["email"],
                      "type": "object",
                      "properties": {
                        "additionalGuests": {
                          "type": "integer",
                          "description": "The number of additional guests. Optional. The default is 0."
                        },
                        "displayName": {
                          "type": "string",
                          "description": "The attendee's name, if available. ",
                          "example": "Mark Joe"
                        },
                        "email": {
                          "type": "string",
                          "description": "The attendee's email address.",
                          "format": "email",
                          "example": "mark.joe@zoom.com"
                        },
                        "optional": {
                          "type": "boolean",
                          "description": "Whether this is an optional attendee. Optional. The default is False.",
                          "example": false
                        },
                        "resource": {
                          "type": "boolean",
                          "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                          "example": false
                        },
                        "responseStatus": {
                          "type": "string",
                          "description": "The attendee's response status.",
                          "example": "needsAction",
                          "enum": [
                            "needsAction",
                            "declined",
                            "tentative",
                            "accepted"
                          ]
                        }
                      }
                    }
                  },
                  "colorId": {
                    "type": "string",
                    "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (`use color.get`).",
                    "example": "5"
                  },
                  "description": {
                    "maxLength": 15000,
                    "type": "string",
                    "description": "The description of the event.",
                    "example": "event description"
                  },
                  "guestsCanInviteOthers": {
                    "type": "boolean",
                    "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.",
                    "example": true
                  },
                  "guestsCanModify": {
                    "type": "boolean",
                    "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False.",
                    "example": false
                  },
                  "guestsCanSeeOtherGuests": {
                    "type": "boolean",
                    "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.",
                    "example": true
                  },
                  "location": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "The geographic location of the event as free-form text.",
                    "example": "San Jose"
                  },
                  "recurrence": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                    "items": {
                      "minLength": 1,
                      "type": "string",
                      "description": "A recurring rule.",
                      "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                    }
                  },
                  "reminders": {
                    "type": "object",
                    "properties": {
                      "useDefault": {
                        "type": "boolean",
                        "description": "Whether the default reminders of the calendar apply to the event.",
                        "example": false
                      },
                      "overrides": {
                        "maxItems": 5,
                        "type": "array",
                        "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event. If not, it indicates that no reminders are set for this event.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "method": {
                              "type": "string",
                              "description": "The method that this reminder uses.",
                              "example": "email",
                              "enum": ["email", "popup"]
                            },
                            "minutes": {
                              "maximum": 40320,
                              "type": "integer",
                              "description": "Number of minutes before the start of the event when the reminder should trigger.",
                              "example": 5
                            }
                          },
                          "description": "A reminder setting"
                        }
                      }
                    },
                    "description": "The information about the event's reminders for the authenticated user."
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the event.",
                    "example": "confirmed",
                    "enum": ["confirmed", "tentative", "cancelled"]
                  },
                  "summary": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "The title of the event.",
                    "example": "event title"
                  },
                  "transparency": {
                    "type": "string",
                    "description": "Whether the event blocks time on the calendar.",
                    "example": "transparent",
                    "enum": ["opaque", "transparent"]
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The visibility of the event.",
                    "example": "default",
                    "enum": ["default", "public", "private"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns an events resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "start": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "format": "date",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "format": "date-time",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (inclusive) start time of the event. For a recurring event, this field is the start time of the first instance."
                    },
                    "end": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "format": "date",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "format": "date-time",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                    },
                    "attendees": {
                      "type": "array",
                      "description": "The attendees of the event.",
                      "items": {
                        "required": ["email"],
                        "type": "object",
                        "properties": {
                          "additionalGuests": {
                            "type": "integer",
                            "description": "The number of additional guests. Optional. The default is 0."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "The attendee's name, if available. ",
                            "example": "Mark Joe"
                          },
                          "organizer": {
                            "type": "boolean",
                            "description": "Whether this is the organizer of this event. Optional. The default is False.",
                            "example": false
                          },
                          "email": {
                            "type": "string",
                            "description": "The attendee's email address",
                            "format": "email",
                            "example": "mark.joe@zoom.com"
                          },
                          "optional": {
                            "type": "boolean",
                            "description": "Whether this is an optional attendee. Optional. The default is False.",
                            "example": false
                          },
                          "self": {
                            "type": "boolean",
                            "description": "Whether this is the attendee sending this request. Optional. The default is False.",
                            "example": false
                          },
                          "resource": {
                            "type": "boolean",
                            "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                            "example": false
                          },
                          "responseStatus": {
                            "type": "string",
                            "description": "The attendee's response status.",
                            "example": "needsAction",
                            "enum": [
                              "needsAction",
                              "declined",
                              "tentative",
                              "accepted"
                            ]
                          }
                        }
                      }
                    },
                    "colorId": {
                      "type": "string",
                      "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use `color.get`)",
                      "example": "5"
                    },
                    "description": {
                      "maxLength": 15000,
                      "type": "string",
                      "description": "Description of the event.",
                      "example": "event description"
                    },
                    "guestsCanInviteOthers": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.",
                      "example": true
                    },
                    "guestsCanModify": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False.",
                      "example": false
                    },
                    "guestsCanSeeOtherGuests": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.",
                      "example": true
                    },
                    "location": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The geographic location of the event as free-form text.",
                      "example": "San Jose"
                    },
                    "recurrence": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                        "description": "A recurring rule.",
                        "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                      }
                    },
                    "reminders": {
                      "type": "object",
                      "properties": {
                        "useDefault": {
                          "type": "boolean",
                          "description": "Whether the default reminders of the calendar apply to the event.",
                          "example": false
                        },
                        "overrides": {
                          "maxItems": 5,
                          "type": "array",
                          "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event. If not, it indicates that no reminders are set for this event.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "method": {
                                "type": "string",
                                "description": "The method that this reminder uses.",
                                "example": "email",
                                "enum": ["email", "popup"]
                              },
                              "minutes": {
                                "maximum": 40320,
                                "type": "integer",
                                "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                "example": 5
                              }
                            },
                            "description": "A reminder setting."
                          }
                        }
                      },
                      "description": "The information about the event's reminders for the authenticated user."
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the event.",
                      "example": "confirmed",
                      "enum": ["confirmed", "tentative", "cancelled"]
                    },
                    "summary": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The title of the event.",
                      "example": "event title"
                    },
                    "transparency": {
                      "type": "string",
                      "description": "Whether the event blocks time on the calendar.",
                      "example": "transparent",
                      "enum": ["opaque", "transparent"]
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The visibility of the event.",
                      "example": "default",
                      "enum": ["default", "public", "private"]
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the event.",
                      "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
                    },
                    "created": {
                      "type": "string",
                      "description": "The creation time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    },
                    "creator": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The creator's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The creator of the event."
                    },
                    "organizer": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The organizer's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The organizer of the event."
                    },
                    "kind": {
                      "type": "string",
                      "description": "The type of resource.",
                      "example": "calendar#event"
                    },
                    "updated": {
                      "type": "string",
                      "description": "The last modification time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "429": {
            "description": "**HTTP Status Code:** `429` <br>\n Too Many Requests  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:write:event",
              "calendar:write:event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:write:event",
            "calendar:write:event:admin"
          ]
        }
      }
    },
    "/calendars/{calId}/events/import": {
      "post": {
        "tags": ["events"],
        "summary": "Import event to the specified calendar",
        "description": "Imports an event. This operation adds a private copy of an existing event to a calendar.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:write:import_event`,`calendar:write:import_event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Importevent",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["end", "start"],
                "type": "object",
                "properties": {
                  "start": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                        "format": "date",
                        "example": "2020-01-01"
                      },
                      "dateTime": {
                        "type": "string",
                        "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                        "format": "date-time",
                        "example": "2020-01-01T00:00:00Z"
                      },
                      "timeZone": {
                        "type": "string",
                        "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                        "example": "America/Los_Angeles"
                      }
                    },
                    "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance."
                  },
                  "end": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                        "format": "date",
                        "example": "2020-01-01"
                      },
                      "dateTime": {
                        "type": "string",
                        "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                        "format": "date-time",
                        "example": "2020-01-01T00:00:00Z"
                      },
                      "timeZone": {
                        "type": "string",
                        "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                        "example": "America/Los_Angeles"
                      }
                    },
                    "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                  },
                  "attendees": {
                    "type": "array",
                    "description": "The attendees of the event.",
                    "items": {
                      "required": ["email"],
                      "type": "object",
                      "properties": {
                        "additionalGuests": {
                          "type": "integer",
                          "description": "The number of additional guests. Optional. The default is 0."
                        },
                        "displayName": {
                          "type": "string",
                          "description": "The attendee's name, if available. ",
                          "example": "Mark Joe"
                        },
                        "email": {
                          "type": "string",
                          "description": "The attendee's email address.",
                          "format": "email",
                          "example": "mark.joe@zoom.com"
                        },
                        "optional": {
                          "type": "boolean",
                          "description": "Whether this is an optional attendee. Optional. The default is false.",
                          "example": false
                        },
                        "resource": {
                          "type": "boolean",
                          "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                          "example": false
                        },
                        "responseStatus": {
                          "type": "string",
                          "description": "The attendee's response status.",
                          "example": "needsAction",
                          "enum": [
                            "needsAction",
                            "declined",
                            "tentative",
                            "accepted"
                          ]
                        }
                      }
                    }
                  },
                  "colorId": {
                    "type": "string",
                    "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use `color.get`).",
                    "example": "5"
                  },
                  "description": {
                    "maxLength": 15000,
                    "type": "string",
                    "description": "Description of the event.",
                    "example": "event description"
                  },
                  "guestsCanInviteOthers": {
                    "type": "boolean",
                    "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.",
                    "example": true
                  },
                  "guestsCanModify": {
                    "type": "boolean",
                    "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False.",
                    "example": false
                  },
                  "guestsCanSeeOtherGuests": {
                    "type": "boolean",
                    "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.",
                    "example": true
                  },
                  "location": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "The geographic location of the event as free-form text.",
                    "example": "San Jose"
                  },
                  "recurrence": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                    "items": {
                      "minLength": 1,
                      "type": "string",
                      "description": "A recurring rule.",
                      "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                    }
                  },
                  "reminders": {
                    "type": "object",
                    "properties": {
                      "useDefault": {
                        "type": "boolean",
                        "description": "Whether the default reminders of the calendar apply to the event.",
                        "example": false
                      },
                      "overrides": {
                        "maxItems": 5,
                        "type": "array",
                        "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event. If not set, it indicates that no reminders are set for this event.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "method": {
                              "type": "string",
                              "description": "The method that this reminder uses.",
                              "example": "email",
                              "enum": ["email", "popup"]
                            },
                            "minutes": {
                              "maximum": 40320,
                              "type": "integer",
                              "description": "The number of minutes before the start of the event when the reminder should trigger.",
                              "example": 5
                            }
                          },
                          "description": "A reminder setting."
                        }
                      }
                    },
                    "description": "The information about the event's reminders for the authenticated user."
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the event.",
                    "example": "confirmed",
                    "enum": ["confirmed", "tentative", "cancelled"]
                  },
                  "summary": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "The title of the event.",
                    "example": "event title"
                  },
                  "transparency": {
                    "type": "string",
                    "description": "Whether the event blocks time on the calendar.",
                    "example": "transparent",
                    "enum": ["opaque", "transparent"]
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The visibility of the event.",
                    "example": "default",
                    "enum": ["default", "public", "private"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns an Events resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "start": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "format": "date",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "format": "date-time",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance."
                    },
                    "end": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "format": "date",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "format": "date-time",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                    },
                    "attendees": {
                      "type": "array",
                      "description": "The attendees of the event.",
                      "items": {
                        "required": ["email"],
                        "type": "object",
                        "properties": {
                          "additionalGuests": {
                            "type": "integer",
                            "description": "The number of additional guests. Optional. The default is 0."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "The attendee's name, if available. ",
                            "example": "Mark Joe"
                          },
                          "email": {
                            "type": "string",
                            "description": "The attendee's email address",
                            "format": "email",
                            "example": "mark.joe@zoom.com"
                          },
                          "optional": {
                            "type": "boolean",
                            "description": "Whether this is an optional attendee. Optional. The default is False.",
                            "example": false
                          },
                          "resource": {
                            "type": "boolean",
                            "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                            "example": false
                          },
                          "responseStatus": {
                            "type": "string",
                            "description": "The attendee's response status.",
                            "example": "needsAction",
                            "enum": [
                              "needsAction",
                              "declined",
                              "tentative",
                              "accepted"
                            ]
                          }
                        }
                      }
                    },
                    "colorId": {
                      "type": "string",
                      "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use `color.get`).",
                      "example": "5"
                    },
                    "description": {
                      "maxLength": 15000,
                      "type": "string",
                      "description": "Description of the event.",
                      "example": "event description"
                    },
                    "guestsCanInviteOthers": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.",
                      "example": true
                    },
                    "guestsCanModify": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False.",
                      "example": false
                    },
                    "guestsCanSeeOtherGuests": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.",
                      "example": true
                    },
                    "location": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The geographic location of the event as free-form text.",
                      "example": "San Jose"
                    },
                    "recurrence": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                        "description": "A recurring rule.",
                        "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                      }
                    },
                    "reminders": {
                      "type": "object",
                      "properties": {
                        "useDefault": {
                          "type": "boolean",
                          "description": "Whether the default reminders of the calendar apply to the event.",
                          "example": false
                        },
                        "overrides": {
                          "maxItems": 5,
                          "type": "array",
                          "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event. If not it indicates that no reminders are set for this event.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "method": {
                                "type": "string",
                                "description": "The method that this reminder uses/",
                                "example": "email",
                                "enum": ["email", "popup"]
                              },
                              "minutes": {
                                "maximum": 40320,
                                "type": "integer",
                                "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                "example": 5
                              }
                            },
                            "description": "A reminder setting"
                          }
                        }
                      },
                      "description": "The information about the event's reminders for the authenticated user."
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the event.",
                      "example": "confirmed",
                      "enum": ["confirmed", "tentative", "cancelled"]
                    },
                    "summary": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The title of the event.",
                      "example": "event title"
                    },
                    "transparency": {
                      "type": "string",
                      "description": "Whether the event blocks time on the calendar.",
                      "example": "transparent",
                      "enum": ["opaque", "transparent"]
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The visibility of the event.",
                      "example": "default",
                      "enum": ["default", "public", "private"]
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the event.",
                      "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
                    },
                    "created": {
                      "type": "string",
                      "description": "The creation time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    },
                    "creator": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The creator's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The creator of the event."
                    },
                    "organizer": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The organizer's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The organizer of the event."
                    },
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#event"
                    },
                    "updated": {
                      "type": "string",
                      "description": "The last modification time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "429": {
            "description": "**HTTP Status Code:** `429` <br>\n Too Many Requests  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:write:import_event",
              "calendar:write:import_event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:write:import_event",
            "calendar:write:import_event:admin"
          ]
        }
      }
    },
    "/calendars/{calId}/events/quickAdd": {
      "post": {
        "tags": ["events"],
        "summary": "Quick add an event to the specified calendar",
        "description": "Creates an event based on a simple text string.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:write:quick_add_event`,`calendar:write:quick_add_event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Quickaddevent",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text that describes the event to be created.",
            "required": true,
            "schema": { "type": "string", "example": "event summary" }
          },
          {
            "name": "sendUpdates",
            "in": "query",
            "description": "The guests who should receive notifications about the creation of the new event.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "all",
              "enum": ["all", "externalOnly", "none"]
            }
          }
        ],
        "requestBody": {
          "description": "This field indicates not to supply a request body with this method.",
          "content": {
            "undefined": { "schema": { "type": "object", "properties": {} } }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns an Events resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "start": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "format": "date",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "format": "date-time",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance."
                    },
                    "end": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "format": "date",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "format": "date-time",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                    },
                    "attendees": {
                      "type": "array",
                      "description": "The attendees of the event.",
                      "items": {
                        "required": ["email"],
                        "type": "object",
                        "properties": {
                          "additionalGuests": {
                            "type": "integer",
                            "description": "The number of additional guests. Optional. The default is 0."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "The attendee's name, if available. ",
                            "example": "Mark Joe"
                          },
                          "email": {
                            "type": "string",
                            "description": "The attendee's email address.",
                            "format": "email",
                            "example": "mark.joe@zoom.com"
                          },
                          "optional": {
                            "type": "boolean",
                            "description": "Whether this is an optional attendee. Optional. The default is False.",
                            "example": false
                          },
                          "resource": {
                            "type": "boolean",
                            "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                            "example": false
                          },
                          "responseStatus": {
                            "type": "string",
                            "description": "The attendee's response status.",
                            "example": "needsAction",
                            "enum": [
                              "needsAction",
                              "declined",
                              "tentative",
                              "accepted"
                            ]
                          }
                        }
                      }
                    },
                    "colorId": {
                      "type": "string",
                      "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use `color.get`).",
                      "example": "5"
                    },
                    "description": {
                      "maxLength": 15000,
                      "type": "string",
                      "description": "The description of the event.",
                      "example": "event description"
                    },
                    "guestsCanInviteOthers": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.",
                      "example": true
                    },
                    "guestsCanModify": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False.",
                      "example": false
                    },
                    "guestsCanSeeOtherGuests": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.",
                      "example": true
                    },
                    "location": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The geographic location of the event as free-form text.",
                      "example": "San Jose"
                    },
                    "recurrence": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                        "description": "A recurring rule.",
                        "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                      }
                    },
                    "reminders": {
                      "type": "object",
                      "properties": {
                        "useDefault": {
                          "type": "boolean",
                          "description": "Whether the default reminders of the calendar apply to the event.",
                          "example": false
                        },
                        "overrides": {
                          "maxItems": 5,
                          "type": "array",
                          "description": "If the event doesn't use the default reminders, this lists the reminders specific to the event. If not it indicates that no reminders are set for this event.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "method": {
                                "type": "string",
                                "description": "The method that this reminder uses.",
                                "example": "email",
                                "enum": ["email", "popup"]
                              },
                              "minutes": {
                                "maximum": 40320,
                                "type": "integer",
                                "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                "example": 5
                              }
                            },
                            "description": "A reminder setting."
                          }
                        }
                      },
                      "description": "The information about the event's reminders for the authenticated user."
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the event.",
                      "example": "confirmed",
                      "enum": ["confirmed", "tentative", "cancelled"]
                    },
                    "summary": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The title of the event.",
                      "example": "event title"
                    },
                    "transparency": {
                      "type": "string",
                      "description": "Whether the event blocks time on the calendar.",
                      "example": "transparent",
                      "enum": ["opaque", "transparent"]
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The visibility of the event.",
                      "example": "default",
                      "enum": ["default", "public", "private"]
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the event.",
                      "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
                    },
                    "created": {
                      "type": "string",
                      "description": "The creation time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    },
                    "creator": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The creator's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The creator of the event."
                    },
                    "organizer": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The organizer's email address",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The organizer of the event."
                    },
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#event"
                    },
                    "updated": {
                      "type": "string",
                      "description": "The last modification time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:write:quick_add_event",
              "calendar:write:quick_add_event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:write:quick_add_event",
            "calendar:write:quick_add_event:admin"
          ]
        }
      }
    },
    "/calendars/{calId}/events/{eventId}": {
      "get": {
        "tags": ["events"],
        "summary": "Get the specified event on the specified calendar",
        "description": "Returns a Zcalendar event.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:event`,`calendar:read:event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "Getevent",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns an event's resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attendees": {
                      "type": "array",
                      "description": "The attendees of the event.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "additionalGuests": {
                            "type": "integer",
                            "description": "The number of additional guests. Optional. The default is 0."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "The attendee's name, if available. ",
                            "example": "Mark Joe"
                          },
                          "email": {
                            "type": "string",
                            "description": "The attendee's email address",
                            "format": "email",
                            "example": "mark.joe@zoom.com"
                          },
                          "optional": {
                            "type": "boolean",
                            "description": "Whether this is an optional attendee. Optional. The default is False.",
                            "example": false
                          },
                          "resource": {
                            "type": "boolean",
                            "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                            "example": false
                          },
                          "responseStatus": {
                            "type": "string",
                            "description": "The attendee's response status.",
                            "example": "needsAction",
                            "enum": [
                              "needsAction",
                              "declined",
                              "tentative",
                              "accepted"
                            ]
                          }
                        }
                      }
                    },
                    "colorId": {
                      "type": "string",
                      "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use `color.get`).",
                      "example": "5"
                    },
                    "created": {
                      "type": "string",
                      "description": "The creation time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    },
                    "creator": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The creator's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The creator of the event."
                    },
                    "description": {
                      "maxLength": 15000,
                      "type": "string",
                      "description": "The description of the event.",
                      "example": "event description"
                    },
                    "end": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                    },
                    "etag": {
                      "type": "string",
                      "description": "The Etag of the resource.",
                      "example": "\"123456789\""
                    },
                    "eventType": {
                      "type": "string",
                      "description": "The type of the target event.",
                      "example": "default"
                    },
                    "guestsCanInviteOthers": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.",
                      "example": true
                    },
                    "guestsCanModify": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False.",
                      "example": false
                    },
                    "guestsCanSeeOtherGuests": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.",
                      "example": true
                    },
                    "iCalUID": {
                      "type": "string",
                      "description": "The iCalendar UID of the event.",
                      "example": "abc@zoom.us"
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the event.",
                      "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
                    },
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#event"
                    },
                    "location": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The geographic location of the event as free-form text.",
                      "example": "San Jose"
                    },
                    "organizer": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The organizer's email address",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The organizer of the event."
                    },
                    "recurrence": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                        "description": "A recurring rule.",
                        "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                      }
                    },
                    "reminders": {
                      "type": "object",
                      "properties": {
                        "useDefault": {
                          "type": "boolean",
                          "description": "Whether the default reminders of the calendar apply to the event.",
                          "example": false
                        },
                        "overrides": {
                          "maxItems": 5,
                          "type": "array",
                          "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event. If not, it indicates that no reminders are set for this event.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "method": {
                                "type": "string",
                                "description": "The method this reminder uses.",
                                "example": "email",
                                "enum": ["email", "popup"]
                              },
                              "minutes": {
                                "maximum": 40320,
                                "type": "integer",
                                "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                "example": 5
                              }
                            },
                            "description": "A reminder setting."
                          }
                        }
                      },
                      "description": "The information about the event's reminders for the authenticated user."
                    },
                    "sequence": {
                      "type": "integer",
                      "description": "The sequence number of the target event.",
                      "example": 1
                    },
                    "start": {
                      "type": "object",
                      "properties": {
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events, this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start and end.",
                          "example": "America/Los_Angeles"
                        },
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "format": "date",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.",
                          "format": "date-time",
                          "example": "2020-01-01T00:00:00Z"
                        }
                      },
                      "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance."
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the event.",
                      "example": "confirmed",
                      "enum": ["confirmed", "tentative", "cancelled"]
                    },
                    "summary": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The title of the event.",
                      "example": "event title"
                    },
                    "transparency": {
                      "type": "string",
                      "description": "Whether the event blocks time on the calendar.",
                      "example": "transparent",
                      "enum": ["opaque", "transparent"]
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The visibility of the event.",
                      "example": "default",
                      "enum": ["default", "public", "private"]
                    },
                    "updated": {
                      "type": "string",
                      "description": "The last modification time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:event",
              "calendar:read:event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": [
            "calendar:read:event",
            "calendar:read:event:admin"
          ]
        }
      },
      "delete": {
        "tags": ["events"],
        "summary": "Delete an existing event from the specified calendar",
        "description": "Deletes an event.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:delete:event`,`calendar:delete:event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Deleteevent",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
            }
          },
          {
            "name": "sendUpdates",
            "in": "query",
            "description": "Whether to send notifications about the deletion of the event. Note that some emails might still be sent.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "all",
              "enum": ["all", "externalOnly", "none"]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "If successful, the specified event is deleted and this method returns an empty response body."
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "429": {
            "description": "**HTTP Status Code:** `429` <br>\n Too Many Requests  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:delete:event",
              "calendar:delete:event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:delete:event",
            "calendar:delete:event:admin"
          ]
        }
      },
      "patch": {
        "tags": ["events"],
        "summary": "Update the specified event on the specified calendar",
        "description": "Updates an event.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:update:event`,`calendar:update:event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Patchevent",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
            }
          },
          {
            "name": "sendUpdates",
            "in": "query",
            "description": "The guests who should receive notifications about the event update.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "all",
              "enum": ["all", "externalOnly", "none"]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["end", "start"],
                "type": "object",
                "properties": {
                  "start": {
                    "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance.",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                            "format": "date",
                            "example": "2020-01-01"
                          },
                          "timeZone": {
                            "type": "string",
                            "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events, this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                            "example": "America/Los_Angeles"
                          }
                        },
                        "description": "The start of an all-day event."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "dateTime": {
                            "type": "string",
                            "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                            "format": "date-time",
                            "example": "2020-01-01T00:00:00Z"
                          },
                          "timeZone": {
                            "type": "string",
                            "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                            "example": "America/Los_Angeles"
                          }
                        },
                        "description": "start of a normal event"
                      }
                    ]
                  },
                  "end": {
                    "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance.",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                            "format": "date",
                            "example": "2020-01-01"
                          },
                          "timeZone": {
                            "type": "string",
                            "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                            "example": "America/Los_Angeles"
                          }
                        },
                        "description": "The end of an all-day event."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "dateTime": {
                            "type": "string",
                            "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                            "format": "date-time",
                            "example": "2020-01-01T00:00:00Z"
                          },
                          "timeZone": {
                            "type": "string",
                            "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events, this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                            "example": "America/Los_Angeles"
                          }
                        },
                        "description": "The end of a normal event."
                      }
                    ]
                  },
                  "attendees": {
                    "type": "array",
                    "description": "The attendees of the event.",
                    "items": {
                      "required": ["email"],
                      "type": "object",
                      "properties": {
                        "additionalGuests": {
                          "type": "integer",
                          "description": "The number of additional guests. The default is 0. Optional."
                        },
                        "displayName": {
                          "type": "string",
                          "description": "The attendee's name, if available. ",
                          "example": "Mark Joe"
                        },
                        "email": {
                          "type": "string",
                          "description": "The attendee's email address.",
                          "format": "email",
                          "example": "mark.joe@zoom.com"
                        },
                        "optional": {
                          "type": "boolean",
                          "description": "Whether this is an optional attendee. The default is False. Optional.",
                          "example": false
                        },
                        "resource": {
                          "type": "boolean",
                          "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                          "example": false
                        },
                        "responseStatus": {
                          "type": "string",
                          "description": "The attendee's response status.",
                          "example": "needsAction",
                          "enum": [
                            "needsAction",
                            "declined",
                            "tentative",
                            "accepted"
                          ]
                        }
                      }
                    }
                  },
                  "colorId": {
                    "type": "string",
                    "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use `color.get`).",
                    "example": "5"
                  },
                  "description": {
                    "maxLength": 15000,
                    "type": "string",
                    "description": "The description of the event.",
                    "example": "event description"
                  },
                  "guestsCanInviteOthers": {
                    "type": "boolean",
                    "description": "Whether attendees other than the organizer can invite others to the event. The default is True. Optional.",
                    "example": true
                  },
                  "guestsCanModify": {
                    "type": "boolean",
                    "description": "Whether attendees other than the organizer can modify the event. The default is False. Optional.",
                    "example": false
                  },
                  "guestsCanSeeOtherGuests": {
                    "type": "boolean",
                    "description": "Whether attendees other than the organizer can see who the event's attendees are. The default is True. Optional.",
                    "example": true
                  },
                  "location": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "The geographic location of the event as free-form text.",
                    "example": "San Jose"
                  },
                  "recurrence": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                    "items": {
                      "minLength": 1,
                      "type": "string",
                      "description": "A recurring rule.",
                      "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                    }
                  },
                  "reminders": {
                    "type": "object",
                    "properties": {
                      "useDefault": {
                        "type": "boolean",
                        "description": "Whether the default reminders of the calendar apply to the event.",
                        "example": false
                      },
                      "overrides": {
                        "maxItems": 5,
                        "type": "array",
                        "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event. If not, it indicates that no reminders are set for this event.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "method": {
                              "type": "string",
                              "description": "The method this reminder uses.",
                              "example": "email",
                              "enum": ["email", "popup"]
                            },
                            "minutes": {
                              "maximum": 40320,
                              "type": "integer",
                              "description": "The number of minutes before the start of the event when the reminder should trigger.",
                              "example": 5
                            }
                          },
                          "description": "A reminder setting."
                        }
                      }
                    },
                    "description": "The information about the event's reminders for the authenticated user."
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the event.",
                    "example": "confirmed",
                    "enum": ["confirmed", "tentative", "cancelled"]
                  },
                  "summary": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "The title of the event.",
                    "example": "event title"
                  },
                  "transparency": {
                    "type": "string",
                    "description": "Whether the event blocks time on the calendar.",
                    "example": "transparent",
                    "enum": ["opaque", "transparent"]
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The visibility of the event.",
                    "example": "default",
                    "enum": ["default", "public", "private"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns an event's resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "start": {
                      "type": "object",
                      "properties": {
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "example": "2020-01-01"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance."
                    },
                    "end": {
                      "type": "object",
                      "properties": {
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "example": "2020-01-01T01:00:00Z"
                        },
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "example": "2020-01-02"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                    },
                    "attendees": {
                      "type": "array",
                      "description": "The attendees of the event.",
                      "items": {
                        "required": ["email"],
                        "type": "object",
                        "properties": {
                          "additionalGuests": {
                            "type": "integer",
                            "description": "The number of additional guests. The default is 0. Optional."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "The attendee's name, if available. ",
                            "example": "Mark Joe"
                          },
                          "email": {
                            "type": "string",
                            "description": "The attendee's email address.",
                            "format": "email",
                            "example": "mark.joe@zoom.com"
                          },
                          "optional": {
                            "type": "boolean",
                            "description": "Whether this is an optional attendee. The default is False. Optional.",
                            "example": false
                          },
                          "resource": {
                            "type": "boolean",
                            "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                            "example": false
                          },
                          "responseStatus": {
                            "type": "string",
                            "description": "The attendee's response status.",
                            "example": "needsAction",
                            "enum": [
                              "needsAction",
                              "declined",
                              "tentative",
                              "accepted"
                            ]
                          }
                        }
                      }
                    },
                    "colorId": {
                      "type": "string",
                      "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use `color.get`).",
                      "example": "5"
                    },
                    "description": {
                      "maxLength": 15000,
                      "type": "string",
                      "description": "The description of the event.",
                      "example": "event description"
                    },
                    "guestsCanInviteOthers": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can invite others to the event. The default is True. Optional.",
                      "example": true
                    },
                    "guestsCanModify": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can modify the event. The default is False. Optional.",
                      "example": false
                    },
                    "guestsCanSeeOtherGuests": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can see who the event's attendees are. The default is True. Optional.",
                      "example": true
                    },
                    "location": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The geographic location of the event as free-form text.",
                      "example": "San Jose"
                    },
                    "recurrence": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                        "description": "A recurring rule.",
                        "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                      }
                    },
                    "reminders": {
                      "type": "object",
                      "properties": {
                        "useDefault": {
                          "type": "boolean",
                          "description": "Whether the default reminders of the calendar apply to the event.",
                          "example": false
                        },
                        "overrides": {
                          "maxItems": 5,
                          "type": "array",
                          "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event. If not, it indicates that no reminders are set for this event.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "method": {
                                "type": "string",
                                "description": "The method this reminder uses.",
                                "example": "email",
                                "enum": ["email", "popup"]
                              },
                              "minutes": {
                                "maximum": 40320,
                                "type": "integer",
                                "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                "example": 5
                              }
                            },
                            "description": "A reminder setting."
                          }
                        }
                      },
                      "description": "The information about the event's reminders for the authenticated user."
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the event.",
                      "example": "confirmed",
                      "enum": ["confirmed", "tentative", "cancelled"]
                    },
                    "summary": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The title of the event.",
                      "example": "event title"
                    },
                    "transparency": {
                      "type": "string",
                      "description": "Whether the event blocks time on the calendar.",
                      "example": "transparent",
                      "enum": ["opaque", "transparent"]
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The visibility of the event.",
                      "example": "default",
                      "enum": ["default", "public", "private"]
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the event.",
                      "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
                    },
                    "created": {
                      "type": "string",
                      "description": "The creation time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    },
                    "creator": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The creator's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The creator of the event."
                    },
                    "organizer": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The organizer's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The organizer of the event."
                    },
                    "kind": {
                      "type": "string",
                      "description": "The type of resource.",
                      "example": "calendar#event"
                    },
                    "updated": {
                      "type": "string",
                      "description": "The last modification time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "429": {
            "description": "**HTTP Status Code:** `429` <br>\n Too Many Requests  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:update:event",
              "calendar:update:event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:update:event",
            "calendar:update:event:admin"
          ]
        }
      }
    },
    "/calendars/{calId}/events/{eventId}/instances": {
      "get": {
        "tags": ["events"],
        "summary": "List all instances of the specified recurring event",
        "description": "Returns instances of the specified recurring event.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:instance_event`,`calendar:read:instance_event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "Instanceevent",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of events returned on one result page.",
            "required": false,
            "schema": { "type": "integer", "example": 250 }
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if `showDeleted` and `singleEvents` are both False. If `showDeleted` and `singleEvents` are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.",
            "required": false,
            "schema": { "type": "boolean", "example": false }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "The token that specifies which result page to return. Optional.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ffffffffa8b32bff_te7ldipj31fqfo3mw3jjzgz6c0!"
            }
          },
          {
            "name": "timeMax",
            "in": "query",
            "description": "The upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If `timeMin` is set, `timeMax` must be greater than `timeMin`.",
            "required": false,
            "schema": { "type": "string", "example": "2024-02-01T00:00:00Z" }
          },
          {
            "name": "timeMin",
            "in": "query",
            "description": "The lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If `timeMax` is set, `timeMin` must be smaller than `timeMax`.",
            "required": false,
            "schema": { "type": "string", "example": "2024-01-01T00:00:00Z" }
          },
          {
            "name": "timeZone",
            "in": "query",
            "description": "The time zone in the response. Optional. The default is the time zone of the calendar.",
            "required": false,
            "schema": { "type": "string", "example": "America/Los_Angeles" }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns a response body with the following structure:",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of the collection (\"calendar#events\").",
                      "example": "calendar#events"
                    },
                    "etag": {
                      "type": "string",
                      "description": "The ETag of the collection.",
                      "example": "\"00000000000000000000\""
                    },
                    "summary": {
                      "type": "string",
                      "description": "The title of the calendar. Read-only.",
                      "example": "calendar summary"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the calendar. Read-only.",
                      "example": "calendar description"
                    },
                    "updated": {
                      "type": "string",
                      "description": "The last modification time of the calendar (as a RFC3339 timestamp). Read-only.",
                      "format": "date-time",
                      "example": "2020-01-01T00:00:00Z"
                    },
                    "timeZone": {
                      "type": "string",
                      "description": "The time zone of the calendar. Read-only.",
                      "example": "America/Los_Angeles"
                    },
                    "accessRole": {
                      "type": "string",
                      "description": "The user's access role for this calendar. Read-only.",
                      "example": "owner",
                      "enum": [
                        "none",
                        "freeBusyReader",
                        "reader",
                        "writer",
                        "owner"
                      ]
                    },
                    "defaultReminders": {
                      "type": "array",
                      "description": "The default reminders on the calendar for the authenticated user.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "The method this reminder uses.",
                            "example": "email",
                            "enum": ["email", "popup"]
                          },
                          "minutes": {
                            "type": "integer",
                            "description": "The number of minutes before the start of the event when the reminder should trigger.",
                            "example": 5
                          }
                        }
                      }
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "The token used to access the next page of this result.",
                      "example": "ffffffffa8b32bff_te7ldipj31fqfo3mw3jjzgz6c0!"
                    },
                    "items": {
                      "type": "array",
                      "description": "The list of instances of the event on the calendar.",
                      "items": {
                        "required": ["end", "start"],
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "object",
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                                "format": "date",
                                "example": "2020-01-01"
                              },
                              "dateTime": {
                                "type": "string",
                                "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.",
                                "format": "date-time",
                                "example": "2020-01-01T00:00:00Z"
                              },
                              "timeZone": {
                                "type": "string",
                                "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.",
                                "example": "America/Los_Angeles"
                              }
                            },
                            "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance."
                          },
                          "end": {
                            "type": "object",
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                                "format": "date",
                                "example": "2020-01-01"
                              },
                              "dateTime": {
                                "type": "string",
                                "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.",
                                "format": "date-time",
                                "example": "2020-01-01T00:00:00Z"
                              },
                              "timeZone": {
                                "type": "string",
                                "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.",
                                "example": "America/Los_Angeles"
                              }
                            },
                            "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                          },
                          "attendees": {
                            "type": "array",
                            "description": "The attendees of the event.",
                            "items": {
                              "required": ["email"],
                              "type": "object",
                              "properties": {
                                "additionalGuests": {
                                  "type": "integer",
                                  "description": "The number of additional guests. Optional. The default is 0."
                                },
                                "displayName": {
                                  "type": "string",
                                  "description": "The attendee's name, if available. ",
                                  "example": "Mark Joe"
                                },
                                "email": {
                                  "type": "string",
                                  "description": "The attendee's email address.",
                                  "format": "email",
                                  "example": "mark.joe@zoom.com"
                                },
                                "optional": {
                                  "type": "boolean",
                                  "description": "Whether this is an optional attendee. Optional. The default is False.",
                                  "example": false
                                },
                                "resource": {
                                  "type": "boolean",
                                  "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                                  "example": false
                                },
                                "responseStatus": {
                                  "type": "string",
                                  "description": "The attendee's response status.",
                                  "example": "needsAction",
                                  "enum": [
                                    "needsAction",
                                    "declined",
                                    "tentative",
                                    "accepted"
                                  ]
                                }
                              }
                            }
                          },
                          "colorId": {
                            "type": "string",
                            "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use color.get)",
                            "example": "5"
                          },
                          "description": {
                            "maxLength": 15000,
                            "type": "string",
                            "description": "The description of the event.",
                            "example": "event description"
                          },
                          "guestsCanInviteOthers": {
                            "type": "boolean",
                            "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.",
                            "example": true
                          },
                          "guestsCanModify": {
                            "type": "boolean",
                            "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False.",
                            "example": false
                          },
                          "guestsCanSeeOtherGuests": {
                            "type": "boolean",
                            "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.",
                            "example": true
                          },
                          "location": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "The geographic location of the event as free-form text.",
                            "example": "San Jose"
                          },
                          "recurrence": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                            "items": {
                              "minLength": 1,
                              "type": "string",
                              "description": "A recurring rule.",
                              "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                            }
                          },
                          "reminders": {
                            "type": "object",
                            "properties": {
                              "useDefault": {
                                "type": "boolean",
                                "description": "Whether the default reminders of the calendar apply to the event.",
                                "example": false
                              },
                              "overrides": {
                                "maxItems": 5,
                                "type": "array",
                                "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event.  If not, it indicates that no reminders are set for this event.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "method": {
                                      "type": "string",
                                      "description": "The method this reminder uses.",
                                      "example": "email",
                                      "enum": ["email", "popup"]
                                    },
                                    "minutes": {
                                      "maximum": 40320,
                                      "type": "integer",
                                      "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                      "example": 5
                                    }
                                  },
                                  "description": "A reminder setting."
                                }
                              }
                            },
                            "description": "Information about the event's reminders for the authenticated user."
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the event.",
                            "example": "confirmed",
                            "enum": ["confirmed", "tentative", "cancelled"]
                          },
                          "summary": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "The title of the event.",
                            "example": "event title"
                          },
                          "transparency": {
                            "type": "string",
                            "description": "Whether the event blocks time on the calendar.",
                            "example": "transparent",
                            "enum": ["opaque", "transparent"]
                          },
                          "visibility": {
                            "type": "string",
                            "description": "The visibility of the event.",
                            "example": "default",
                            "enum": ["default", "public", "private"]
                          },
                          "id": {
                            "type": "string",
                            "description": "The identifier of the event.",
                            "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
                          },
                          "created": {
                            "type": "string",
                            "description": "The creation time of the event.",
                            "example": "2020-01-01T00:00:00Z"
                          },
                          "creator": {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "description": "The creator's email address.",
                                "example": "mark.joe@zoom.com"
                              }
                            },
                            "description": "The creator of the event."
                          },
                          "organizer": {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "description": "The organizer's email address",
                                "example": "mark.joe@zoom.com"
                              }
                            },
                            "description": "The organizer of the event."
                          },
                          "kind": {
                            "type": "string",
                            "description": "The type of the resource.",
                            "example": "calendar#event"
                          },
                          "updated": {
                            "type": "string",
                            "description": "The last modification time of the event.",
                            "example": "2020-01-01T00:00:00Z"
                          }
                        },
                        "description": "The event object."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:instance_event",
              "calendar:read:instance_event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": [
            "calendar:read:instance_event",
            "calendar:read:instance_event:admin"
          ]
        }
      }
    },
    "/calendars/{calId}/events/{eventId}/move": {
      "post": {
        "tags": ["events"],
        "summary": "Move the specified event from a calendar to another specified calendar",
        "description": "Moves an event to another calendar, such as changing an event's organizer.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:write:move_event`,`calendar:write:move_event:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`",
        "operationId": "Moveevent",
        "parameters": [
          {
            "name": "calId",
            "in": "path",
            "description": "The calendar identifier. To retrieve calendar IDs, call the `calendarList.list` method.",
            "required": true,
            "schema": { "type": "string", "example": "abc.def@zoom.com" }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
            }
          },
          {
            "name": "destination",
            "in": "query",
            "description": "The calendar identifier of the target calendar where the event is to be moved.",
            "required": true,
            "schema": { "type": "string", "example": "fed.cba@zoom.com" }
          },
          {
            "name": "sendUpdates",
            "in": "query",
            "description": "Whether to send notifications about the creation of the new event. Note that some emails might still be sent.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "all",
              "enum": ["all", "externalOnly", "none"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns an Events resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "start": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "format": "date",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "format": "date-time",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance."
                    },
                    "end": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
                          "format": "date",
                          "example": "2020-01-01"
                        },
                        "dateTime": {
                          "type": "string",
                          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in `timeZone`.",
                          "format": "date-time",
                          "example": "2020-01-01T00:00:00Z"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event's start or end.",
                          "example": "America/Los_Angeles"
                        }
                      },
                      "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance."
                    },
                    "attendees": {
                      "type": "array",
                      "description": "The attendees of the event.",
                      "items": {
                        "required": ["email"],
                        "type": "object",
                        "properties": {
                          "additionalGuests": {
                            "type": "integer",
                            "description": "The number of additional guests. Optional. The default is 0."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "The attendee's name, if available. ",
                            "example": "Mark Joe"
                          },
                          "email": {
                            "type": "string",
                            "description": "The attendee's email address",
                            "format": "email",
                            "example": "mark.joe@zoom.com"
                          },
                          "optional": {
                            "type": "boolean",
                            "description": "Whether this is an optional attendee. Optional. The default is False.",
                            "example": false
                          },
                          "resource": {
                            "type": "boolean",
                            "description": "Whether the attendee is a resource. It can only be set when the attendee is added to the event for the first time.",
                            "example": false
                          },
                          "responseStatus": {
                            "type": "string",
                            "description": "The attendee's response status.",
                            "example": "needsAction",
                            "enum": [
                              "needsAction",
                              "declined",
                              "tentative",
                              "accepted"
                            ]
                          }
                        }
                      }
                    },
                    "colorId": {
                      "type": "string",
                      "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (use `color.get`).",
                      "example": "5"
                    },
                    "description": {
                      "maxLength": 15000,
                      "type": "string",
                      "description": "Description of the event.",
                      "example": "event description"
                    },
                    "guestsCanInviteOthers": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.",
                      "example": true
                    },
                    "guestsCanModify": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False.",
                      "example": false
                    },
                    "guestsCanSeeOtherGuests": {
                      "type": "boolean",
                      "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.",
                      "example": true
                    },
                    "location": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The geographic location of the event as free-form text.",
                      "example": "San Jose"
                    },
                    "recurrence": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "The list of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event.",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                        "description": "A recurring rule.",
                        "example": "RRULE:FREQ=DAILY;COUNT=2;INTERVAL=3"
                      }
                    },
                    "reminders": {
                      "type": "object",
                      "properties": {
                        "useDefault": {
                          "type": "boolean",
                          "description": "Whether the default reminders of the calendar apply to the event.",
                          "example": false
                        },
                        "overrides": {
                          "maxItems": 5,
                          "type": "array",
                          "description": "If the event doesn't use the default reminders, this field lists the reminders specific to the event. If not, it indicates that no reminders are set for this event.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "method": {
                                "type": "string",
                                "description": "The method used by this reminder.",
                                "example": "email",
                                "enum": ["email", "popup"]
                              },
                              "minutes": {
                                "maximum": 40320,
                                "type": "integer",
                                "description": "The number of minutes before the start of the event when the reminder should trigger.",
                                "example": 5
                              }
                            },
                            "description": "A reminder setting."
                          }
                        }
                      },
                      "description": "The information about the event's reminders for the authenticated user."
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the event.",
                      "example": "confirmed",
                      "enum": ["confirmed", "tentative", "cancelled"]
                    },
                    "summary": {
                      "maxLength": 1024,
                      "type": "string",
                      "description": "The title of the event.",
                      "example": "event title"
                    },
                    "transparency": {
                      "type": "string",
                      "description": "Whether the event blocks time on the calendar.",
                      "example": "transparent",
                      "enum": ["opaque", "transparent"]
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The visibility of the event.",
                      "example": "default",
                      "enum": ["default", "public", "private"]
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier of the event.",
                      "example": "0lyk1qjjd8t8thnf5y1f02a6c0"
                    },
                    "created": {
                      "type": "string",
                      "description": "The creation time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    },
                    "creator": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The creator's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The creator of the event."
                    },
                    "organizer": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "The organizer's email address.",
                          "example": "mark.joe@zoom.com"
                        }
                      },
                      "description": "The organizer of the event."
                    },
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#event"
                    },
                    "updated": {
                      "type": "string",
                      "description": "The last modification time of the event.",
                      "example": "2020-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "403": {
            "description": "**HTTP Status Code:** `403` <br>\n Forbidden  \n\n "
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:write:move_event",
              "calendar:write:move_event:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:write:move_event",
            "calendar:write:move_event:admin"
          ]
        }
      }
    },
    "/calendars/freeBusy": {
      "post": {
        "tags": ["freebusy"],
        "summary": "Query freebusy information for a set of calendars",
        "description": "Returns free or busy information for a set of calendars.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:list_events`,`calendar:read:list_events:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "Queryfreebusy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["timeMax", "timeMin"],
                "type": "object",
                "properties": {
                  "timeZone": {
                    "type": "string",
                    "description": "The time zone in the response.",
                    "readOnly": true,
                    "example": "America/Los_Angeles"
                  },
                  "timeMin": {
                    "type": "string",
                    "description": "The start of the interval for the query.",
                    "format": "date-time",
                    "example": "2024-01-01T00:00:00Z"
                  },
                  "timeMax": {
                    "type": "string",
                    "description": "The end of the interval for the query.",
                    "format": "date-time",
                    "example": "2024-02-01T00:00:00Z"
                  },
                  "calendarExpansionMax": {
                    "type": "integer",
                    "description": "The maximum number of calendars for which FreeBusy information is to be provided.",
                    "example": 50
                  },
                  "groupExpansionMax": {
                    "type": "integer",
                    "description": "The maximum number of calendar identifiers to be provided for a single group.",
                    "example": 100
                  },
                  "items": {
                    "type": "array",
                    "description": "The list of calendars and/or groups to query.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The identifier of a calendar or a group.",
                          "format": "email",
                          "example": "abc.def@zoom.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, this method returns a response body with the following structure:",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["kind", "timeMax", "timeMin"],
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of the resource.",
                      "example": "calendar#freeBusy",
                      "enum": ["calendar#freeBusy"]
                    },
                    "timeMin": {
                      "type": "string",
                      "description": "The start of the interval.",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "timeMax": {
                      "type": "string",
                      "description": "The end of the interval.",
                      "format": "date-time",
                      "example": "2024-02-01T00:00:00Z"
                    },
                    "calendars": {
                      "type": "array",
                      "description": "The expansion of calendars.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The calendar identifier.",
                            "example": "abc.def@zoom.com"
                          },
                          "errors": {
                            "type": "array",
                            "description": "The optional errors.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "domain": {
                                  "type": "string",
                                  "description": "The domain, or broad category, of the error.",
                                  "example": "global"
                                },
                                "reason": {
                                  "type": "string",
                                  "description": "The specific reason for the error.",
                                  "example": "notFound"
                                }
                              }
                            }
                          },
                          "busy": {
                            "type": "array",
                            "description": "The list of time ranges during which this calendar should be regarded as busy.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "start": {
                                  "type": "string",
                                  "description": "The (inclusive) start of the time period.",
                                  "example": "2024-01-20T17:00:00Z"
                                },
                                "end": {
                                  "type": "string",
                                  "description": "The (exclusive) end of the time period.",
                                  "example": "2024-01-20T18:00:00Z"
                                }
                              }
                            }
                          }
                        },
                        "description": "The list of time ranges during which this calendar should be regarded as busy."
                      }
                    },
                    "groups": {
                      "type": "array",
                      "description": "The expansion of groups.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The group identifier.",
                            "example": "abc.group@zoom.com"
                          },
                          "errors": {
                            "type": "object",
                            "properties": {
                              "domain": {
                                "type": "string",
                                "description": "The domain, or broad category, of the error.",
                                "example": "global"
                              },
                              "reason": {
                                "type": "string",
                                "description": "The specific reason for the error.",
                                "example": "notFound"
                              }
                            }
                          },
                          "calendars": {
                            "type": "array",
                            "description": "The list of calendars included in the group.",
                            "items": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:list_events",
              "calendar:read:list_events:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": [
            "calendar:read:list_events",
            "calendar:read:list_events:admin"
          ]
        }
      }
    },
    "/calendars/users/{userIdentifier}/settings": {
      "get": {
        "tags": ["settings"],
        "summary": "List all user calendar settings of the authenticated user",
        "description": "Returns all user settings for the authenticated user.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:list_settings`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`",
        "operationId": "Listsettings",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier. It indicates Which user's calendarList to operate.",
            "required": true,
            "schema": { "type": "string", "example": "me" }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of entries returned on one result page.",
            "required": false,
            "schema": { "type": "integer", "example": 100 }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "The token that specifies which result page to return.",
            "required": false,
            "schema": { "type": "string", "example": "format24HourTime" }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns a response body with the following structure:",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "description": "The type of collection",
                      "example": "calendar#settings"
                    },
                    "etag": {
                      "type": "string",
                      "description": "The Etag of the collection.",
                      "example": "\"00000000000000000000\""
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "The token that accesses the next page of this result.",
                      "example": "displaySecondaryTimezone"
                    },
                    "items": {
                      "type": "array",
                      "description": "The list of user settings.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the user setting.",
                            "example": "autoAddZoomMeeting"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the user setting. The format of the value depends on the ID of the setting.",
                            "example": "false"
                          }
                        },
                        "description": "A setting object."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**HTTP Status Code:** `400` <br>\n Bad Request  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:list_settings"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": ["calendar:read:list_settings"]
        }
      }
    },
    "/calendars/users/{userIdentifier}/settings/{settingId}": {
      "get": {
        "tags": ["settings"],
        "summary": "Get the specified user calendar settings of the authenticated user",
        "description": "Returns a single setting.\n\n**Scopes:** `calendar:read`,`calendar:read:admin`\n\n**Granular Scopes:** `calendar:read:setting`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "Getsetting",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier. ",
            "required": true,
            "schema": { "type": "string", "example": "me" }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The identifier of the user setting. To retrieve calendar IDs, call the 'List all user settings' API.",
            "required": true,
            "schema": { "type": "string", "example": "format24HourTime" }
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, this method returns a setting's resource in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "required": ["id", "value"],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "autoAddZoomMeeting",
                          "enum": [
                            "autoAddZoomMeeting",
                            "hideInvitations",
                            "hideInvitationsFromOthers",
                            "hideWeekends",
                            "remindOnRespondedEventsOnly",
                            "showDeclinedEvents",
                            "useKeyboardShortcuts",
                            "format24HourTime",
                            "displaySecondaryTimezone"
                          ]
                        },
                        "value": {
                          "type": "string",
                          "description": "The allowed values are `true` or `false`.",
                          "example": "false",
                          "enum": ["true", "false"]
                        }
                      }
                    },
                    {
                      "required": ["id", "value"],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "defaultEventLength",
                          "enum": ["defaultEventLength"]
                        },
                        "value": {
                          "pattern": "^[1-9][0-9]*$",
                          "type": "string",
                          "description": "The allowed values are positive numbers.",
                          "example": "25"
                        }
                      }
                    },
                    {
                      "required": ["id", "value"],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The combinations of \"Modify the event\", \"Invite others\" and \"See list of attendees\" in an event.",
                          "example": "defaultGuestPermissions",
                          "enum": ["defaultGuestPermissions"]
                        },
                        "value": {
                          "type": "string",
                          "description": "The allowed values are 0, 1, 2, 3, and 7. These values respesent as bitmap with three digits, from left to right are \"Modify the event\", \"Invite others\" and \"See list of attendees.\"",
                          "example": "0",
                          "enum": ["0", "1", "2", "3", "7"]
                        }
                      }
                    },
                    {
                      "required": ["id", "value"],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "locale",
                          "enum": ["locale", "timezone"]
                        },
                        "value": { "type": "string", "example": "ca" }
                      }
                    },
                    {
                      "required": ["id", "value"],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "secondaryTimezone",
                          "enum": ["secondaryTimezone"]
                        },
                        "value": {
                          "type": "string",
                          "example": "America/Los_Angeles"
                        }
                      }
                    },
                    {
                      "required": ["id", "value"],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Whether the week should start on Sunday (0), Monday (1), or Saturday (6).",
                          "example": "weekStart",
                          "enum": ["weekStart"]
                        },
                        "value": {
                          "type": "string",
                          "description": "The allowed values are 0, 1, and 6.",
                          "example": "0",
                          "enum": ["0", "1", "6"]
                        }
                      }
                    },
                    {
                      "required": ["id", "value"],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The default `addon` type in an event: 1 as Zoom meeting, 2 as phone, and 3 as offline.",
                          "example": "defaultAddOnType",
                          "enum": ["defaultAddOnType"]
                        },
                        "value": {
                          "type": "string",
                          "description": "The allowed values are 1, 2, and 3.",
                          "example": "1",
                          "enum": ["1", "2", "3"]
                        }
                      }
                    },
                    {
                      "required": ["id", "value"],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "What should the order of day (D), month (M) and year (Y) be when displaying dates.",
                          "example": "dateFieldOrder",
                          "enum": ["dateFieldOrder"]
                        },
                        "value": {
                          "type": "string",
                          "description": "The allowed values are ”MDY”, “DMY”,and “YMD”.",
                          "example": "MDY",
                          "enum": ["MDY", "DMY", "YMD"]
                        }
                      }
                    },
                    {
                      "required": ["id", "value"],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The view in the calendar: D as day, W as week, M as month, Y as year, A as schedule, X as 4 days, WW as work week, and N as no fix time.",
                          "example": "dateViewSelected",
                          "enum": ["dateViewSelected"]
                        },
                        "value": {
                          "type": "string",
                          "description": "The allowed values are D, W, M, Y, A, X, WW, and N.",
                          "example": "W",
                          "enum": ["D", "W", "M", "Y", "A", "X", "WW", "N"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "**HTTP Status Code:** `404` <br>\n Not Found  \n\n "
          },
          "500": {
            "description": "**HTTP Status Code:** `500` <br>\n Internal Server Error  \n\n "
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:read",
              "calendar:read:admin",
              "calendar:read:setting"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:read", "calendar:read:admin"],
          "x-granular-scopes": ["calendar:read:setting"]
        }
      },
      "patch": {
        "tags": ["settings"],
        "summary": "Patch the specified user calendar settings of the authenticated user ",
        "description": "Patches a single setting.\n\n**Scopes:** `calendar:write`,`calendar:write:admin`\n\n**Granular Scopes:** `calendar:update:setting`,`calendar:update:setting:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`",
        "operationId": "Patchsetting",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier.",
            "required": true,
            "schema": { "type": "string", "example": "me" }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The ID of the setting to be patched.",
            "required": true,
            "schema": { "type": "string", "example": "timezone" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["id", "value"],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The target setting ID to patch.",
                    "example": "timezone"
                  },
                  "value": {
                    "type": "string",
                    "description": "The target setting value to patch.",
                    "example": "Asia/Shanghai"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The patched setting ID.",
                      "example": "timezone"
                    },
                    "value": {
                      "type": "string",
                      "description": "The patched setting value.",
                      "example": "Asia/Shanghai"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "openapi_oauth": [
              "calendar:write",
              "calendar:write:admin",
              "calendar:update:setting",
              "calendar:update:setting:admin"
            ],
            "openapi_authorization": []
          }
        ],
        "x-extensions": {
          "x-fixVersion": "1.0.0",
          "x-permissions": [],
          "x-macro-scopes": ["calendar:write", "calendar:write:admin"],
          "x-granular-scopes": [
            "calendar:update:setting",
            "calendar:update:setting:admin"
          ]
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "openapi_authorization": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      },
      "openapi_oauth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/",
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {
              "calendar:read": "calendar:read",
              "calendar:read:admin": "calendar:read:admin",
              "calendar:read:list_acl": "calendar:read:list_acl",
              "calendar:read:list_acl:admin": "calendar:read:list_acl:admin",
              "calendar:write": "calendar:write",
              "calendar:write:admin": "calendar:write:admin",
              "calendar:write:acl": "calendar:write:acl",
              "calendar:write:acl:admin": "calendar:write:acl:admin",
              "calendar:delete:acl": "calendar:delete:acl",
              "calendar:delete:acl:admin": "calendar:delete:acl:admin",
              "calendar:read:acl": "calendar:read:acl",
              "calendar:read:acl:admin": "calendar:read:acl:admin",
              "calendar:update:acl": "calendar:update:acl",
              "calendar:update:acl:admin": "calendar:update:acl:admin",
              "calendar:read:list_calendar_lists": "calendar:read:list_calendar_lists",
              "calendar:write:calendar_list": "calendar:write:calendar_list",
              "calendar:update:calendar_list": "calendar:update:calendar_list",
              "calendar:delete:calendar_list": "calendar:delete:calendar_list",
              "calendar:read:calendar_list": "calendar:read:calendar_list",
              "calendar:write:calendar": "calendar:write:calendar",
              "calendar:write:calendar:admin": "calendar:write:calendar:admin",
              "calendar:read:calendar": "calendar:read:calendar",
              "calendar:read:calendar:admin": "calendar:read:calendar:admin",
              "calendar:update:calendar": "calendar:update:calendar",
              "calendar:update:calendar:admin": "calendar:update:calendar:admin",
              "calendar:delete:calendar": "calendar:delete:calendar",
              "calendar:delete:calendar:admin": "calendar:delete:calendar:admin",
              "calendar:read:color": "calendar:read:color",
              "calendar:read:color:admin": "calendar:read:color:admin",
              "calendar:read:list_events": "calendar:read:list_events",
              "calendar:read:list_events:admin": "calendar:read:list_events:admin",
              "calendar:write:event": "calendar:write:event",
              "calendar:write:event:admin": "calendar:write:event:admin",
              "calendar:write:import_event": "calendar:write:import_event",
              "calendar:write:import_event:admin": "calendar:write:import_event:admin",
              "calendar:write:quick_add_event": "calendar:write:quick_add_event",
              "calendar:write:quick_add_event:admin": "calendar:write:quick_add_event:admin",
              "calendar:read:event": "calendar:read:event",
              "calendar:read:event:admin": "calendar:read:event:admin",
              "calendar:delete:event": "calendar:delete:event",
              "calendar:delete:event:admin": "calendar:delete:event:admin",
              "calendar:update:event": "calendar:update:event",
              "calendar:update:event:admin": "calendar:update:event:admin",
              "calendar:read:instance_event": "calendar:read:instance_event",
              "calendar:read:instance_event:admin": "calendar:read:instance_event:admin",
              "calendar:write:move_event": "calendar:write:move_event",
              "calendar:write:move_event:admin": "calendar:write:move_event:admin",
              "calendar:read:list_settings": "calendar:read:list_settings",
              "calendar:read:setting": "calendar:read:setting",
              "calendar:update:setting": "calendar:update:setting",
              "calendar:update:setting:admin": "calendar:update:setting:admin"
            }
          }
        }
      }
    }
  }
}
